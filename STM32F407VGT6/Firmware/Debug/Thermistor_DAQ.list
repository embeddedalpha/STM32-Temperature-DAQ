
Thermistor_DAQ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000731c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bb4  080074b0  080074b0  000084b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008064  08008064  0000a1cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008064  08008064  00009064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800806c  0800806c  0000a1cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800806c  0800806c  0000906c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008070  08008070  00009070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001cc  20000000  08008074  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a1cc  2**0
                  CONTENTS
 10 .bss          000008b4  200001cc  200001cc  0000a1cc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000a80  20000a80  0000a1cc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a1cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e65f  00000000  00000000  0000a1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001767  00000000  00000000  0001885b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000198b  00000000  00000000  00019fc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000440  00000000  00000000  0001b950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000340  00000000  00000000  0001bd90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006c3e  00000000  00000000  0001c0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00002d2e  00000000  00000000  00022d0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00025a3c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001cd0  00000000  00000000  00025a80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004e  00000000  00000000  00027750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001cc 	.word	0x200001cc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007494 	.word	0x08007494

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d0 	.word	0x200001d0
 80001cc:	08007494 	.word	0x08007494

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2lz>:
 8000ba8:	b538      	push	{r3, r4, r5, lr}
 8000baa:	2200      	movs	r2, #0
 8000bac:	2300      	movs	r3, #0
 8000bae:	4604      	mov	r4, r0
 8000bb0:	460d      	mov	r5, r1
 8000bb2:	f7ff ff93 	bl	8000adc <__aeabi_dcmplt>
 8000bb6:	b928      	cbnz	r0, 8000bc4 <__aeabi_d2lz+0x1c>
 8000bb8:	4620      	mov	r0, r4
 8000bba:	4629      	mov	r1, r5
 8000bbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000bc0:	f000 b80a 	b.w	8000bd8 <__aeabi_d2ulz>
 8000bc4:	4620      	mov	r0, r4
 8000bc6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000bca:	f000 f805 	bl	8000bd8 <__aeabi_d2ulz>
 8000bce:	4240      	negs	r0, r0
 8000bd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bd4:	bd38      	pop	{r3, r4, r5, pc}
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2ulz>:
 8000bd8:	b5d0      	push	{r4, r6, r7, lr}
 8000bda:	4b0c      	ldr	r3, [pc, #48]	@ (8000c0c <__aeabi_d2ulz+0x34>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	4606      	mov	r6, r0
 8000be0:	460f      	mov	r7, r1
 8000be2:	f7ff fd09 	bl	80005f8 <__aeabi_dmul>
 8000be6:	f000 f815 	bl	8000c14 <__aeabi_d2uiz>
 8000bea:	4604      	mov	r4, r0
 8000bec:	f7ff fc8a 	bl	8000504 <__aeabi_ui2d>
 8000bf0:	4b07      	ldr	r3, [pc, #28]	@ (8000c10 <__aeabi_d2ulz+0x38>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	f7ff fd00 	bl	80005f8 <__aeabi_dmul>
 8000bf8:	4602      	mov	r2, r0
 8000bfa:	460b      	mov	r3, r1
 8000bfc:	4630      	mov	r0, r6
 8000bfe:	4639      	mov	r1, r7
 8000c00:	f7ff fb42 	bl	8000288 <__aeabi_dsub>
 8000c04:	f000 f806 	bl	8000c14 <__aeabi_d2uiz>
 8000c08:	4621      	mov	r1, r4
 8000c0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c0c:	3df00000 	.word	0x3df00000
 8000c10:	41f00000 	.word	0x41f00000

08000c14 <__aeabi_d2uiz>:
 8000c14:	004a      	lsls	r2, r1, #1
 8000c16:	d211      	bcs.n	8000c3c <__aeabi_d2uiz+0x28>
 8000c18:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c1c:	d211      	bcs.n	8000c42 <__aeabi_d2uiz+0x2e>
 8000c1e:	d50d      	bpl.n	8000c3c <__aeabi_d2uiz+0x28>
 8000c20:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c28:	d40e      	bmi.n	8000c48 <__aeabi_d2uiz+0x34>
 8000c2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c36:	fa23 f002 	lsr.w	r0, r3, r2
 8000c3a:	4770      	bx	lr
 8000c3c:	f04f 0000 	mov.w	r0, #0
 8000c40:	4770      	bx	lr
 8000c42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c46:	d102      	bne.n	8000c4e <__aeabi_d2uiz+0x3a>
 8000c48:	f04f 30ff 	mov.w	r0, #4294967295
 8000c4c:	4770      	bx	lr
 8000c4e:	f04f 0000 	mov.w	r0, #0
 8000c52:	4770      	bx	lr

08000c54 <Delay_ms>:
	while((SysTick->CTRL & 0x00010000) == 0);
	return (0UL);                                                     /* Function successful */
}

__STATIC_INLINE uint32_t Delay_ms(volatile uint32_t ms)
{
 8000c54:	b082      	sub	sp, #8
 8000c56:	9001      	str	r0, [sp, #4]
	unsigned long x =0x29040 * (ms);
 8000c58:	9a01      	ldr	r2, [sp, #4]
 8000c5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c84 <Delay_ms+0x30>)
 8000c5c:	fb03 f202 	mul.w	r2, r3, r2
	SysTick->LOAD =  x ;
 8000c60:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000c64:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0;
 8000c66:	2200      	movs	r2, #0
 8000c68:	619a      	str	r2, [r3, #24]
	SysTick->CTRL |= 1;
 8000c6a:	691a      	ldr	r2, [r3, #16]
 8000c6c:	f042 0201 	orr.w	r2, r2, #1
 8000c70:	611a      	str	r2, [r3, #16]
	while((SysTick->CTRL & 0x00010000) == 0);
 8000c72:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000c76:	691b      	ldr	r3, [r3, #16]
 8000c78:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8000c7c:	d0f9      	beq.n	8000c72 <Delay_ms+0x1e>
	return (0UL);                                                     /* Function successful */
}
 8000c7e:	2000      	movs	r0, #0
 8000c80:	b002      	add	sp, #8
 8000c82:	4770      	bx	lr
 8000c84:	00029040 	.word	0x00029040

08000c88 <Delay_milli>:


__STATIC_INLINE uint32_t Delay_milli(float ms)
{
 8000c88:	b508      	push	{r3, lr}
 8000c8a:	ed2d 8b02 	vpush	{d8}
 8000c8e:	eeb0 8a40 	vmov.f32	s16, s0
	for (; ms>0; ms--)
 8000c92:	e006      	b.n	8000ca2 <Delay_milli+0x1a>
	{
		Delay_ms(1);
 8000c94:	2001      	movs	r0, #1
 8000c96:	f7ff ffdd 	bl	8000c54 <Delay_ms>
	for (; ms>0; ms--)
 8000c9a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8000c9e:	ee38 8a67 	vsub.f32	s16, s16, s15
 8000ca2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8000ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000caa:	dcf3      	bgt.n	8000c94 <Delay_milli+0xc>
	}
	return ms;
}
 8000cac:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 8000cb0:	ee17 0a90 	vmov	r0, s15
 8000cb4:	ecbd 8b02 	vpop	{d8}
 8000cb8:	bd08      	pop	{r3, pc}

08000cba <ADC_Sampling_Config>:
static int8_t ADC_Sampling_Config(ADC_Config *config)
{
    uint8_t conversion_Counter = 0;

    // Configure sampling time for Channel 0 if enabled
    if(config->Channel_0.Enable == ENABLE)
 8000cba:	7a83      	ldrb	r3, [r0, #10]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	f000 80b5 	beq.w	8000e2c <ADC_Sampling_Config+0x172>
    {
        config->Port->SMPR2 |= config->Channel_0.Sample_Time << ADC_SMPR2_SMP0_Pos;
 8000cc2:	6802      	ldr	r2, [r0, #0]
 8000cc4:	6913      	ldr	r3, [r2, #16]
 8000cc6:	7b01      	ldrb	r1, [r0, #12]
 8000cc8:	430b      	orrs	r3, r1
 8000cca:	6113      	str	r3, [r2, #16]
        conversion_Counter += 1;
 8000ccc:	2301      	movs	r3, #1
    }

    // Configure sampling time for Channel 1 if enabled
    if(config->Channel_1.Enable == ENABLE)
 8000cce:	7b42      	ldrb	r2, [r0, #13]
 8000cd0:	b142      	cbz	r2, 8000ce4 <ADC_Sampling_Config+0x2a>
    {
        config->Port->SMPR2 |= config->Channel_1.Sample_Time << ADC_SMPR2_SMP1_Pos;
 8000cd2:	6801      	ldr	r1, [r0, #0]
 8000cd4:	690a      	ldr	r2, [r1, #16]
 8000cd6:	f890 c00f 	ldrb.w	ip, [r0, #15]
 8000cda:	ea42 02cc 	orr.w	r2, r2, ip, lsl #3
 8000cde:	610a      	str	r2, [r1, #16]
        conversion_Counter += 1;
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	b2db      	uxtb	r3, r3
    }

    // Configure sampling time for Channel 2 if enabled
    if(config->Channel_2.Enable == ENABLE)
 8000ce4:	7c02      	ldrb	r2, [r0, #16]
 8000ce6:	b142      	cbz	r2, 8000cfa <ADC_Sampling_Config+0x40>
    {
        config->Port->SMPR2 |= config->Channel_2.Sample_Time << ADC_SMPR2_SMP2_Pos;
 8000ce8:	6801      	ldr	r1, [r0, #0]
 8000cea:	690a      	ldr	r2, [r1, #16]
 8000cec:	f890 c012 	ldrb.w	ip, [r0, #18]
 8000cf0:	ea42 128c 	orr.w	r2, r2, ip, lsl #6
 8000cf4:	610a      	str	r2, [r1, #16]
        conversion_Counter += 1;
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	b2db      	uxtb	r3, r3
    }

    // Configure sampling time for Channel 3 if enabled
    if(config->Channel_3.Enable == ENABLE)
 8000cfa:	7cc2      	ldrb	r2, [r0, #19]
 8000cfc:	b142      	cbz	r2, 8000d10 <ADC_Sampling_Config+0x56>
    {
        config->Port->SMPR2 |= config->Channel_3.Sample_Time << ADC_SMPR2_SMP3_Pos;
 8000cfe:	6801      	ldr	r1, [r0, #0]
 8000d00:	690a      	ldr	r2, [r1, #16]
 8000d02:	f890 c015 	ldrb.w	ip, [r0, #21]
 8000d06:	ea42 224c 	orr.w	r2, r2, ip, lsl #9
 8000d0a:	610a      	str	r2, [r1, #16]
        conversion_Counter += 1;
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	b2db      	uxtb	r3, r3
    }

    // Configure sampling time for Channel 4 if enabled
    if(config->Channel_4.Enable == ENABLE)
 8000d10:	7d82      	ldrb	r2, [r0, #22]
 8000d12:	b142      	cbz	r2, 8000d26 <ADC_Sampling_Config+0x6c>
    {
        config->Port->SMPR2 |= config->Channel_4.Sample_Time << ADC_SMPR2_SMP4_Pos;
 8000d14:	6801      	ldr	r1, [r0, #0]
 8000d16:	690a      	ldr	r2, [r1, #16]
 8000d18:	f890 c018 	ldrb.w	ip, [r0, #24]
 8000d1c:	ea42 320c 	orr.w	r2, r2, ip, lsl #12
 8000d20:	610a      	str	r2, [r1, #16]
        conversion_Counter += 1;
 8000d22:	3301      	adds	r3, #1
 8000d24:	b2db      	uxtb	r3, r3
    }

    // Configure sampling time for Channel 5 if enabled
    if(config->Channel_5.Enable == ENABLE)
 8000d26:	7e42      	ldrb	r2, [r0, #25]
 8000d28:	b142      	cbz	r2, 8000d3c <ADC_Sampling_Config+0x82>
    {
        config->Port->SMPR2 |= config->Channel_5.Sample_Time << ADC_SMPR2_SMP5_Pos;
 8000d2a:	6801      	ldr	r1, [r0, #0]
 8000d2c:	690a      	ldr	r2, [r1, #16]
 8000d2e:	f890 c01b 	ldrb.w	ip, [r0, #27]
 8000d32:	ea42 32cc 	orr.w	r2, r2, ip, lsl #15
 8000d36:	610a      	str	r2, [r1, #16]
        conversion_Counter += 1;
 8000d38:	3301      	adds	r3, #1
 8000d3a:	b2db      	uxtb	r3, r3
    }

    // Configure sampling time for Channel 6 if enabled
    if(config->Channel_6.Enable == ENABLE)
 8000d3c:	7f02      	ldrb	r2, [r0, #28]
 8000d3e:	b142      	cbz	r2, 8000d52 <ADC_Sampling_Config+0x98>
    {
        config->Port->SMPR2 |= config->Channel_6.Sample_Time << ADC_SMPR2_SMP6_Pos;
 8000d40:	6801      	ldr	r1, [r0, #0]
 8000d42:	690a      	ldr	r2, [r1, #16]
 8000d44:	f890 c01e 	ldrb.w	ip, [r0, #30]
 8000d48:	ea42 428c 	orr.w	r2, r2, ip, lsl #18
 8000d4c:	610a      	str	r2, [r1, #16]
        conversion_Counter += 1;
 8000d4e:	3301      	adds	r3, #1
 8000d50:	b2db      	uxtb	r3, r3
    }

    // Configure sampling time for Channel 7 if enabled
    if(config->Channel_7.Enable == ENABLE)
 8000d52:	7fc2      	ldrb	r2, [r0, #31]
 8000d54:	b142      	cbz	r2, 8000d68 <ADC_Sampling_Config+0xae>
    {
        config->Port->SMPR2 |= config->Channel_7.Sample_Time << ADC_SMPR2_SMP7_Pos;
 8000d56:	6801      	ldr	r1, [r0, #0]
 8000d58:	690a      	ldr	r2, [r1, #16]
 8000d5a:	f890 c021 	ldrb.w	ip, [r0, #33]	@ 0x21
 8000d5e:	ea42 524c 	orr.w	r2, r2, ip, lsl #21
 8000d62:	610a      	str	r2, [r1, #16]
        conversion_Counter += 1;
 8000d64:	3301      	adds	r3, #1
 8000d66:	b2db      	uxtb	r3, r3
    }

    // Configure sampling time for Channel 8 if enabled
    if(config->Channel_8.Enable == ENABLE)
 8000d68:	f890 2022 	ldrb.w	r2, [r0, #34]	@ 0x22
 8000d6c:	b142      	cbz	r2, 8000d80 <ADC_Sampling_Config+0xc6>
    {
        config->Port->SMPR2 |= config->Channel_8.Sample_Time << ADC_SMPR2_SMP8_Pos;
 8000d6e:	6801      	ldr	r1, [r0, #0]
 8000d70:	690a      	ldr	r2, [r1, #16]
 8000d72:	f890 c024 	ldrb.w	ip, [r0, #36]	@ 0x24
 8000d76:	ea42 620c 	orr.w	r2, r2, ip, lsl #24
 8000d7a:	610a      	str	r2, [r1, #16]
        conversion_Counter += 1;
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	b2db      	uxtb	r3, r3
    }

    // Configure sampling time for Channel 9 if enabled
    if(config->Channel_9.Enable == ENABLE)
 8000d80:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8000d84:	b142      	cbz	r2, 8000d98 <ADC_Sampling_Config+0xde>
    {
        config->Port->SMPR1 |= config->Channel_9.Sample_Time << ADC_SMPR2_SMP9_Pos;
 8000d86:	6801      	ldr	r1, [r0, #0]
 8000d88:	68ca      	ldr	r2, [r1, #12]
 8000d8a:	f890 c027 	ldrb.w	ip, [r0, #39]	@ 0x27
 8000d8e:	ea42 62cc 	orr.w	r2, r2, ip, lsl #27
 8000d92:	60ca      	str	r2, [r1, #12]
        conversion_Counter += 1;
 8000d94:	3301      	adds	r3, #1
 8000d96:	b2db      	uxtb	r3, r3
    }

    // Configure sampling time for Channel 10 if enabled
    if(config->Channel_10.Enable == ENABLE)
 8000d98:	f890 2028 	ldrb.w	r2, [r0, #40]	@ 0x28
 8000d9c:	b142      	cbz	r2, 8000db0 <ADC_Sampling_Config+0xf6>
    {
        config->Port->SMPR1 |= config->Channel_10.Sample_Time << ADC_SMPR1_SMP10_Pos;
 8000d9e:	6801      	ldr	r1, [r0, #0]
 8000da0:	68ca      	ldr	r2, [r1, #12]
 8000da2:	f890 c02a 	ldrb.w	ip, [r0, #42]	@ 0x2a
 8000da6:	ea42 020c 	orr.w	r2, r2, ip
 8000daa:	60ca      	str	r2, [r1, #12]
        conversion_Counter += 1;
 8000dac:	3301      	adds	r3, #1
 8000dae:	b2db      	uxtb	r3, r3
    }

    // Configure sampling time for Channel 11 if enabled
    if(config->Channel_11.Enable == ENABLE)
 8000db0:	f890 202b 	ldrb.w	r2, [r0, #43]	@ 0x2b
 8000db4:	b142      	cbz	r2, 8000dc8 <ADC_Sampling_Config+0x10e>
    {
        config->Port->SMPR1 |= config->Channel_11.Sample_Time << ADC_SMPR1_SMP11_Pos;
 8000db6:	6801      	ldr	r1, [r0, #0]
 8000db8:	68ca      	ldr	r2, [r1, #12]
 8000dba:	f890 c02d 	ldrb.w	ip, [r0, #45]	@ 0x2d
 8000dbe:	ea42 02cc 	orr.w	r2, r2, ip, lsl #3
 8000dc2:	60ca      	str	r2, [r1, #12]
        conversion_Counter += 1;
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	b2db      	uxtb	r3, r3
    }

    /**************************************************************************************************************/

    // Configure sampling time for Channel 12 if enabled
    if(config->Channel_12.Enable == ENABLE)
 8000dc8:	f890 202e 	ldrb.w	r2, [r0, #46]	@ 0x2e
 8000dcc:	b142      	cbz	r2, 8000de0 <ADC_Sampling_Config+0x126>
    {
        config->Port->SMPR1 |= config->Channel_12.Sample_Time << ADC_SMPR1_SMP12_Pos;
 8000dce:	6801      	ldr	r1, [r0, #0]
 8000dd0:	68ca      	ldr	r2, [r1, #12]
 8000dd2:	f890 c030 	ldrb.w	ip, [r0, #48]	@ 0x30
 8000dd6:	ea42 128c 	orr.w	r2, r2, ip, lsl #6
 8000dda:	60ca      	str	r2, [r1, #12]
        conversion_Counter += 1;
 8000ddc:	3301      	adds	r3, #1
 8000dde:	b2db      	uxtb	r3, r3
    }

    /**************************************************************************************************************/

    // Configure sampling time for Channel 13 if enabled
    if(config->Channel_13.Enable == ENABLE)
 8000de0:	f890 2031 	ldrb.w	r2, [r0, #49]	@ 0x31
 8000de4:	b142      	cbz	r2, 8000df8 <ADC_Sampling_Config+0x13e>
    {
        config->Port->SMPR1 |= config->Channel_13.Sample_Time << ADC_SMPR1_SMP13_Pos;
 8000de6:	6801      	ldr	r1, [r0, #0]
 8000de8:	68ca      	ldr	r2, [r1, #12]
 8000dea:	f890 c033 	ldrb.w	ip, [r0, #51]	@ 0x33
 8000dee:	ea42 224c 	orr.w	r2, r2, ip, lsl #9
 8000df2:	60ca      	str	r2, [r1, #12]
        conversion_Counter += 1;
 8000df4:	3301      	adds	r3, #1
 8000df6:	b2db      	uxtb	r3, r3
    }

    /**************************************************************************************************************/

    // Configure sampling time for Channel 14 if enabled
    if(config->Channel_14.Enable == ENABLE)
 8000df8:	f890 2034 	ldrb.w	r2, [r0, #52]	@ 0x34
 8000dfc:	b142      	cbz	r2, 8000e10 <ADC_Sampling_Config+0x156>
    {
        config->Port->SMPR1 |= config->Channel_14.Sample_Time << ADC_SMPR1_SMP14_Pos;
 8000dfe:	6801      	ldr	r1, [r0, #0]
 8000e00:	68ca      	ldr	r2, [r1, #12]
 8000e02:	f890 c036 	ldrb.w	ip, [r0, #54]	@ 0x36
 8000e06:	ea42 320c 	orr.w	r2, r2, ip, lsl #12
 8000e0a:	60ca      	str	r2, [r1, #12]
        conversion_Counter += 1;
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	b2db      	uxtb	r3, r3
    }

    /**************************************************************************************************************/

    // Configure sampling time for Channel 15 if enabled
    if(config->Channel_15.Enable == ENABLE)
 8000e10:	f890 2037 	ldrb.w	r2, [r0, #55]	@ 0x37
 8000e14:	b142      	cbz	r2, 8000e28 <ADC_Sampling_Config+0x16e>
    {
        config->Port->SMPR1 |= config->Channel_15.Sample_Time << ADC_SMPR1_SMP15_Pos;
 8000e16:	6801      	ldr	r1, [r0, #0]
 8000e18:	68ca      	ldr	r2, [r1, #12]
 8000e1a:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 8000e1e:	ea42 32c0 	orr.w	r2, r2, r0, lsl #15
 8000e22:	60ca      	str	r2, [r1, #12]
        conversion_Counter += 1;
 8000e24:	3301      	adds	r3, #1
 8000e26:	b2db      	uxtb	r3, r3
    }

    // Return the number of configured channels
    return conversion_Counter;
}
 8000e28:	b258      	sxtb	r0, r3
 8000e2a:	4770      	bx	lr
    uint8_t conversion_Counter = 0;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	e74e      	b.n	8000cce <ADC_Sampling_Config+0x14>

08000e30 <ADC_Sequence_Config>:
 * @return int8_t Returns 1 on successful configuration of the sequence.
 */
static int8_t ADC_Sequence_Config(ADC_Config *config)
{
    // Configure sequence for Channel 0
    if(config->Channel_0.Enable == ENABLE)
 8000e30:	7a83      	ldrb	r3, [r0, #10]
 8000e32:	b123      	cbz	r3, 8000e3e <ADC_Sequence_Config+0xe>
    {
        config->Port->SQR3 |= config->Channel_0.Sequence_Number << ADC_SQR3_SQ1_Pos;
 8000e34:	6802      	ldr	r2, [r0, #0]
 8000e36:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8000e38:	7ac1      	ldrb	r1, [r0, #11]
 8000e3a:	430b      	orrs	r3, r1
 8000e3c:	6353      	str	r3, [r2, #52]	@ 0x34
    }

    // Configure sequence for Channel 1
    if(config->Channel_1.Enable == ENABLE)
 8000e3e:	7b43      	ldrb	r3, [r0, #13]
 8000e40:	b12b      	cbz	r3, 8000e4e <ADC_Sequence_Config+0x1e>
    {
        config->Port->SQR3 |= config->Channel_1.Sequence_Number << ADC_SQR3_SQ2_Pos;
 8000e42:	6802      	ldr	r2, [r0, #0]
 8000e44:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8000e46:	7b81      	ldrb	r1, [r0, #14]
 8000e48:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 8000e4c:	6353      	str	r3, [r2, #52]	@ 0x34
    }

    // Configure sequence for Channel 2
    if(config->Channel_2.Enable == ENABLE)
 8000e4e:	7c03      	ldrb	r3, [r0, #16]
 8000e50:	b12b      	cbz	r3, 8000e5e <ADC_Sequence_Config+0x2e>
    {
        config->Port->SQR3 |= config->Channel_2.Sequence_Number << ADC_SQR3_SQ3_Pos;
 8000e52:	6802      	ldr	r2, [r0, #0]
 8000e54:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8000e56:	7c41      	ldrb	r1, [r0, #17]
 8000e58:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8000e5c:	6353      	str	r3, [r2, #52]	@ 0x34
    }

    // Configure sequence for Channel 3
    if(config->Channel_3.Enable == ENABLE)
 8000e5e:	7cc3      	ldrb	r3, [r0, #19]
 8000e60:	b12b      	cbz	r3, 8000e6e <ADC_Sequence_Config+0x3e>
    {
        config->Port->SQR3 |= config->Channel_3.Sequence_Number << ADC_SQR3_SQ4_Pos;
 8000e62:	6802      	ldr	r2, [r0, #0]
 8000e64:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8000e66:	7d01      	ldrb	r1, [r0, #20]
 8000e68:	ea43 33c1 	orr.w	r3, r3, r1, lsl #15
 8000e6c:	6353      	str	r3, [r2, #52]	@ 0x34
    }

    // Configure sequence for Channel 4
    if(config->Channel_4.Enable == ENABLE)
 8000e6e:	7d83      	ldrb	r3, [r0, #22]
 8000e70:	b12b      	cbz	r3, 8000e7e <ADC_Sequence_Config+0x4e>
    {
        config->Port->SQR3 |= config->Channel_4.Sequence_Number << ADC_SQR3_SQ5_Pos;
 8000e72:	6802      	ldr	r2, [r0, #0]
 8000e74:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8000e76:	7dc1      	ldrb	r1, [r0, #23]
 8000e78:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 8000e7c:	6353      	str	r3, [r2, #52]	@ 0x34
    }

    // Configure sequence for Channel 5
    if(config->Channel_5.Enable == ENABLE)
 8000e7e:	7e43      	ldrb	r3, [r0, #25]
 8000e80:	b12b      	cbz	r3, 8000e8e <ADC_Sequence_Config+0x5e>
    {
        config->Port->SQR3 |= config->Channel_5.Sequence_Number << ADC_SQR3_SQ6_Pos;
 8000e82:	6802      	ldr	r2, [r0, #0]
 8000e84:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8000e86:	7e81      	ldrb	r1, [r0, #26]
 8000e88:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8000e8c:	6353      	str	r3, [r2, #52]	@ 0x34
    }

    // Configure sequence for Channel 6
    if(config->Channel_6.Enable == ENABLE)
 8000e8e:	7f03      	ldrb	r3, [r0, #28]
 8000e90:	b123      	cbz	r3, 8000e9c <ADC_Sequence_Config+0x6c>
    {
        config->Port->SQR2 |= config->Channel_6.Sequence_Number << ADC_SQR2_SQ7_Pos;
 8000e92:	6802      	ldr	r2, [r0, #0]
 8000e94:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8000e96:	7f41      	ldrb	r1, [r0, #29]
 8000e98:	430b      	orrs	r3, r1
 8000e9a:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    // Configure sequence for Channel 7
    if(config->Channel_7.Enable == ENABLE)
 8000e9c:	7fc3      	ldrb	r3, [r0, #31]
 8000e9e:	b133      	cbz	r3, 8000eae <ADC_Sequence_Config+0x7e>
    {
        config->Port->SQR2 |= config->Channel_7.Sequence_Number << ADC_SQR2_SQ8_Pos;
 8000ea0:	6802      	ldr	r2, [r0, #0]
 8000ea2:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8000ea4:	f890 1020 	ldrb.w	r1, [r0, #32]
 8000ea8:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 8000eac:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    // Configure sequence for Channel 8
    if(config->Channel_8.Enable == ENABLE)
 8000eae:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 8000eb2:	b133      	cbz	r3, 8000ec2 <ADC_Sequence_Config+0x92>
    {
        config->Port->SQR2 |= config->Channel_8.Sequence_Number << ADC_SQR2_SQ9_Pos;
 8000eb4:	6802      	ldr	r2, [r0, #0]
 8000eb6:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8000eb8:	f890 1023 	ldrb.w	r1, [r0, #35]	@ 0x23
 8000ebc:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8000ec0:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    // Configure sequence for Channel 9
    if(config->Channel_9.Enable == ENABLE)
 8000ec2:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8000ec6:	b133      	cbz	r3, 8000ed6 <ADC_Sequence_Config+0xa6>
    {
        config->Port->SQR2 |= config->Channel_9.Sequence_Number << ADC_SQR2_SQ10_Pos;
 8000ec8:	6802      	ldr	r2, [r0, #0]
 8000eca:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8000ecc:	f890 1026 	ldrb.w	r1, [r0, #38]	@ 0x26
 8000ed0:	ea43 33c1 	orr.w	r3, r3, r1, lsl #15
 8000ed4:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    // Configure sequence for Channel 10
    if(config->Channel_10.Enable == ENABLE)
 8000ed6:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 8000eda:	b133      	cbz	r3, 8000eea <ADC_Sequence_Config+0xba>
    {
        config->Port->SQR2 |= config->Channel_10.Sequence_Number << ADC_SQR2_SQ11_Pos;
 8000edc:	6802      	ldr	r2, [r0, #0]
 8000ede:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8000ee0:	f890 1029 	ldrb.w	r1, [r0, #41]	@ 0x29
 8000ee4:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 8000ee8:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    // Configure sequence for Channel 11
    if(config->Channel_11.Enable == ENABLE)
 8000eea:	f890 302b 	ldrb.w	r3, [r0, #43]	@ 0x2b
 8000eee:	b133      	cbz	r3, 8000efe <ADC_Sequence_Config+0xce>
    {
        config->Port->SQR2 |= config->Channel_11.Sequence_Number << ADC_SQR2_SQ12_Pos;
 8000ef0:	6802      	ldr	r2, [r0, #0]
 8000ef2:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8000ef4:	f890 102c 	ldrb.w	r1, [r0, #44]	@ 0x2c
 8000ef8:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8000efc:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /**************************************************************************************************************/

    // Configure sequence for Channel 12
    if(config->Channel_12.Enable == ENABLE)
 8000efe:	f890 302e 	ldrb.w	r3, [r0, #46]	@ 0x2e
 8000f02:	b12b      	cbz	r3, 8000f10 <ADC_Sequence_Config+0xe0>
    {
        config->Port->SQR1 |= config->Channel_12.Sequence_Number << ADC_SQR1_SQ13_Pos;
 8000f04:	6802      	ldr	r2, [r0, #0]
 8000f06:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8000f08:	f890 102f 	ldrb.w	r1, [r0, #47]	@ 0x2f
 8000f0c:	430b      	orrs	r3, r1
 8000f0e:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /**************************************************************************************************************/

    // Configure sequence for Channel 13
    if(config->Channel_13.Enable == ENABLE)
 8000f10:	f890 3031 	ldrb.w	r3, [r0, #49]	@ 0x31
 8000f14:	b133      	cbz	r3, 8000f24 <ADC_Sequence_Config+0xf4>
    {
        config->Port->SQR1 |= config->Channel_13.Sequence_Number << ADC_SQR1_SQ14_Pos;
 8000f16:	6802      	ldr	r2, [r0, #0]
 8000f18:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8000f1a:	f890 1032 	ldrb.w	r1, [r0, #50]	@ 0x32
 8000f1e:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 8000f22:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /**************************************************************************************************************/

    // Configure sequence for Channel 14
    if(config->Channel_14.Enable == ENABLE)
 8000f24:	f890 3034 	ldrb.w	r3, [r0, #52]	@ 0x34
 8000f28:	b133      	cbz	r3, 8000f38 <ADC_Sequence_Config+0x108>
    {
        config->Port->SQR1 |= config->Channel_14.Sequence_Number << ADC_SQR1_SQ15_Pos;
 8000f2a:	6802      	ldr	r2, [r0, #0]
 8000f2c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8000f2e:	f890 1035 	ldrb.w	r1, [r0, #53]	@ 0x35
 8000f32:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8000f36:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /**************************************************************************************************************/

    // Configure sequence for Channel 15
    if(config->Channel_15.Enable == ENABLE)
 8000f38:	f890 3037 	ldrb.w	r3, [r0, #55]	@ 0x37
 8000f3c:	b133      	cbz	r3, 8000f4c <ADC_Sequence_Config+0x11c>
    {
        config->Port->SQR1 |= config->Channel_15.Sequence_Number << ADC_SQR1_SQ16_Pos;
 8000f3e:	6802      	ldr	r2, [r0, #0]
 8000f40:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8000f42:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 8000f46:	ea43 33c1 	orr.w	r3, r3, r1, lsl #15
 8000f4a:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    // Return success
    return 1;
}
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	4770      	bx	lr

08000f50 <ADC_Pin_Init>:
{
 8000f50:	b510      	push	{r4, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	4604      	mov	r4, r0
    if (config->Channel_0.Enable == ENABLE)
 8000f56:	7a83      	ldrb	r3, [r0, #10]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d13f      	bne.n	8000fdc <ADC_Pin_Init+0x8c>
    if (config->Channel_1.Enable == ENABLE)
 8000f5c:	7b63      	ldrb	r3, [r4, #13]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d147      	bne.n	8000ff2 <ADC_Pin_Init+0xa2>
    if (config->Channel_2.Enable == ENABLE)
 8000f62:	7c23      	ldrb	r3, [r4, #16]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d150      	bne.n	800100a <ADC_Pin_Init+0xba>
    if (config->Channel_3.Enable == ENABLE)
 8000f68:	7ce3      	ldrb	r3, [r4, #19]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d159      	bne.n	8001022 <ADC_Pin_Init+0xd2>
    if (config->Channel_4.Enable == ENABLE)
 8000f6e:	7da3      	ldrb	r3, [r4, #22]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d162      	bne.n	800103a <ADC_Pin_Init+0xea>
    if (config->Channel_5.Enable == ENABLE)
 8000f74:	7e63      	ldrb	r3, [r4, #25]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d16a      	bne.n	8001050 <ADC_Pin_Init+0x100>
    if (config->Channel_6.Enable == ENABLE)
 8000f7a:	7f23      	ldrb	r3, [r4, #28]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d173      	bne.n	8001068 <ADC_Pin_Init+0x118>
    if (config->Channel_7.Enable == ENABLE)
 8000f80:	7fe3      	ldrb	r3, [r4, #31]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d17c      	bne.n	8001080 <ADC_Pin_Init+0x130>
    if (config->Channel_8.Enable == ENABLE)
 8000f86:	f894 3022 	ldrb.w	r3, [r4, #34]	@ 0x22
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	f040 8084 	bne.w	8001098 <ADC_Pin_Init+0x148>
    if (config->Channel_9.Enable == ENABLE)
 8000f90:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	f040 808a 	bne.w	80010ae <ADC_Pin_Init+0x15e>
    if (config->Channel_10.Enable == ENABLE)
 8000f9a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	f040 8091 	bne.w	80010c6 <ADC_Pin_Init+0x176>
    if (config->Channel_11.Enable == ENABLE)
 8000fa4:	f894 302b 	ldrb.w	r3, [r4, #43]	@ 0x2b
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	f040 8097 	bne.w	80010dc <ADC_Pin_Init+0x18c>
    if (config->Channel_12.Enable == ENABLE)
 8000fae:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	f040 809e 	bne.w	80010f4 <ADC_Pin_Init+0x1a4>
    if (config->Channel_13.Enable == ENABLE)
 8000fb8:	f894 3031 	ldrb.w	r3, [r4, #49]	@ 0x31
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	f040 80a5 	bne.w	800110c <ADC_Pin_Init+0x1bc>
    if (config->Channel_14.Enable == ENABLE)
 8000fc2:	f894 3034 	ldrb.w	r3, [r4, #52]	@ 0x34
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	f040 80ac 	bne.w	8001124 <ADC_Pin_Init+0x1d4>
    if (config->Channel_15.Enable == ENABLE)
 8000fcc:	f894 3037 	ldrb.w	r3, [r4, #55]	@ 0x37
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	f040 80b2 	bne.w	800113a <ADC_Pin_Init+0x1ea>
}
 8000fd6:	2001      	movs	r0, #1
 8000fd8:	b004      	add	sp, #16
 8000fda:	bd10      	pop	{r4, pc}
        GPIO_Pin_Init(GPIOA, 0, GPIO_Configuration.Mode.Analog,
 8000fdc:	2100      	movs	r1, #0
 8000fde:	9102      	str	r1, [sp, #8]
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	9301      	str	r3, [sp, #4]
 8000fe4:	2204      	movs	r2, #4
 8000fe6:	9200      	str	r2, [sp, #0]
 8000fe8:	2203      	movs	r2, #3
 8000fea:	485a      	ldr	r0, [pc, #360]	@ (8001154 <ADC_Pin_Init+0x204>)
 8000fec:	f001 fedc 	bl	8002da8 <GPIO_Pin_Init>
 8000ff0:	e7b4      	b.n	8000f5c <ADC_Pin_Init+0xc>
        GPIO_Pin_Init(GPIOA, 1, GPIO_Configuration.Mode.Analog,
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	9302      	str	r3, [sp, #8]
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	9301      	str	r3, [sp, #4]
 8000ffa:	2204      	movs	r2, #4
 8000ffc:	9200      	str	r2, [sp, #0]
 8000ffe:	2203      	movs	r2, #3
 8001000:	2101      	movs	r1, #1
 8001002:	4854      	ldr	r0, [pc, #336]	@ (8001154 <ADC_Pin_Init+0x204>)
 8001004:	f001 fed0 	bl	8002da8 <GPIO_Pin_Init>
 8001008:	e7ab      	b.n	8000f62 <ADC_Pin_Init+0x12>
        GPIO_Pin_Init(GPIOA, 2, GPIO_Configuration.Mode.Analog,
 800100a:	2300      	movs	r3, #0
 800100c:	9302      	str	r3, [sp, #8]
 800100e:	2102      	movs	r1, #2
 8001010:	9101      	str	r1, [sp, #4]
 8001012:	2304      	movs	r3, #4
 8001014:	9300      	str	r3, [sp, #0]
 8001016:	460b      	mov	r3, r1
 8001018:	2203      	movs	r2, #3
 800101a:	484e      	ldr	r0, [pc, #312]	@ (8001154 <ADC_Pin_Init+0x204>)
 800101c:	f001 fec4 	bl	8002da8 <GPIO_Pin_Init>
 8001020:	e7a2      	b.n	8000f68 <ADC_Pin_Init+0x18>
        GPIO_Pin_Init(GPIOA, 3, GPIO_Configuration.Mode.Analog,
 8001022:	2300      	movs	r3, #0
 8001024:	9302      	str	r3, [sp, #8]
 8001026:	2302      	movs	r3, #2
 8001028:	9301      	str	r3, [sp, #4]
 800102a:	2204      	movs	r2, #4
 800102c:	9200      	str	r2, [sp, #0]
 800102e:	2203      	movs	r2, #3
 8001030:	4611      	mov	r1, r2
 8001032:	4848      	ldr	r0, [pc, #288]	@ (8001154 <ADC_Pin_Init+0x204>)
 8001034:	f001 feb8 	bl	8002da8 <GPIO_Pin_Init>
 8001038:	e799      	b.n	8000f6e <ADC_Pin_Init+0x1e>
        GPIO_Pin_Init(GPIOA, 4, GPIO_Configuration.Mode.Analog,
 800103a:	2300      	movs	r3, #0
 800103c:	9302      	str	r3, [sp, #8]
 800103e:	2302      	movs	r3, #2
 8001040:	9301      	str	r3, [sp, #4]
 8001042:	2104      	movs	r1, #4
 8001044:	9100      	str	r1, [sp, #0]
 8001046:	2203      	movs	r2, #3
 8001048:	4842      	ldr	r0, [pc, #264]	@ (8001154 <ADC_Pin_Init+0x204>)
 800104a:	f001 fead 	bl	8002da8 <GPIO_Pin_Init>
 800104e:	e791      	b.n	8000f74 <ADC_Pin_Init+0x24>
        GPIO_Pin_Init(GPIOA, 5, GPIO_Configuration.Mode.Analog,
 8001050:	2300      	movs	r3, #0
 8001052:	9302      	str	r3, [sp, #8]
 8001054:	2302      	movs	r3, #2
 8001056:	9301      	str	r3, [sp, #4]
 8001058:	2204      	movs	r2, #4
 800105a:	9200      	str	r2, [sp, #0]
 800105c:	2203      	movs	r2, #3
 800105e:	2105      	movs	r1, #5
 8001060:	483c      	ldr	r0, [pc, #240]	@ (8001154 <ADC_Pin_Init+0x204>)
 8001062:	f001 fea1 	bl	8002da8 <GPIO_Pin_Init>
 8001066:	e788      	b.n	8000f7a <ADC_Pin_Init+0x2a>
        GPIO_Pin_Init(GPIOA, 6, GPIO_Configuration.Mode.Analog,
 8001068:	2300      	movs	r3, #0
 800106a:	9302      	str	r3, [sp, #8]
 800106c:	2302      	movs	r3, #2
 800106e:	9301      	str	r3, [sp, #4]
 8001070:	2204      	movs	r2, #4
 8001072:	9200      	str	r2, [sp, #0]
 8001074:	2203      	movs	r2, #3
 8001076:	2106      	movs	r1, #6
 8001078:	4836      	ldr	r0, [pc, #216]	@ (8001154 <ADC_Pin_Init+0x204>)
 800107a:	f001 fe95 	bl	8002da8 <GPIO_Pin_Init>
 800107e:	e77f      	b.n	8000f80 <ADC_Pin_Init+0x30>
        GPIO_Pin_Init(GPIOA, 7, GPIO_Configuration.Mode.Analog,
 8001080:	2300      	movs	r3, #0
 8001082:	9302      	str	r3, [sp, #8]
 8001084:	2302      	movs	r3, #2
 8001086:	9301      	str	r3, [sp, #4]
 8001088:	2204      	movs	r2, #4
 800108a:	9200      	str	r2, [sp, #0]
 800108c:	2203      	movs	r2, #3
 800108e:	2107      	movs	r1, #7
 8001090:	4830      	ldr	r0, [pc, #192]	@ (8001154 <ADC_Pin_Init+0x204>)
 8001092:	f001 fe89 	bl	8002da8 <GPIO_Pin_Init>
 8001096:	e776      	b.n	8000f86 <ADC_Pin_Init+0x36>
        GPIO_Pin_Init(GPIOB, 0, GPIO_Configuration.Mode.Analog,
 8001098:	2100      	movs	r1, #0
 800109a:	9102      	str	r1, [sp, #8]
 800109c:	2302      	movs	r3, #2
 800109e:	9301      	str	r3, [sp, #4]
 80010a0:	2204      	movs	r2, #4
 80010a2:	9200      	str	r2, [sp, #0]
 80010a4:	2203      	movs	r2, #3
 80010a6:	482c      	ldr	r0, [pc, #176]	@ (8001158 <ADC_Pin_Init+0x208>)
 80010a8:	f001 fe7e 	bl	8002da8 <GPIO_Pin_Init>
 80010ac:	e770      	b.n	8000f90 <ADC_Pin_Init+0x40>
        GPIO_Pin_Init(GPIOB, 1, GPIO_Configuration.Mode.Analog,
 80010ae:	2300      	movs	r3, #0
 80010b0:	9302      	str	r3, [sp, #8]
 80010b2:	2302      	movs	r3, #2
 80010b4:	9301      	str	r3, [sp, #4]
 80010b6:	2204      	movs	r2, #4
 80010b8:	9200      	str	r2, [sp, #0]
 80010ba:	2203      	movs	r2, #3
 80010bc:	2101      	movs	r1, #1
 80010be:	4826      	ldr	r0, [pc, #152]	@ (8001158 <ADC_Pin_Init+0x208>)
 80010c0:	f001 fe72 	bl	8002da8 <GPIO_Pin_Init>
 80010c4:	e769      	b.n	8000f9a <ADC_Pin_Init+0x4a>
        GPIO_Pin_Init(GPIOC, 0, GPIO_Configuration.Mode.Analog,
 80010c6:	2100      	movs	r1, #0
 80010c8:	9102      	str	r1, [sp, #8]
 80010ca:	2302      	movs	r3, #2
 80010cc:	9301      	str	r3, [sp, #4]
 80010ce:	2204      	movs	r2, #4
 80010d0:	9200      	str	r2, [sp, #0]
 80010d2:	2203      	movs	r2, #3
 80010d4:	4821      	ldr	r0, [pc, #132]	@ (800115c <ADC_Pin_Init+0x20c>)
 80010d6:	f001 fe67 	bl	8002da8 <GPIO_Pin_Init>
 80010da:	e763      	b.n	8000fa4 <ADC_Pin_Init+0x54>
        GPIO_Pin_Init(GPIOC, 1, GPIO_Configuration.Mode.Analog,
 80010dc:	2300      	movs	r3, #0
 80010de:	9302      	str	r3, [sp, #8]
 80010e0:	2302      	movs	r3, #2
 80010e2:	9301      	str	r3, [sp, #4]
 80010e4:	2204      	movs	r2, #4
 80010e6:	9200      	str	r2, [sp, #0]
 80010e8:	2203      	movs	r2, #3
 80010ea:	2101      	movs	r1, #1
 80010ec:	481b      	ldr	r0, [pc, #108]	@ (800115c <ADC_Pin_Init+0x20c>)
 80010ee:	f001 fe5b 	bl	8002da8 <GPIO_Pin_Init>
 80010f2:	e75c      	b.n	8000fae <ADC_Pin_Init+0x5e>
        GPIO_Pin_Init(GPIOC, 2, GPIO_Configuration.Mode.Analog,
 80010f4:	2300      	movs	r3, #0
 80010f6:	9302      	str	r3, [sp, #8]
 80010f8:	2102      	movs	r1, #2
 80010fa:	9101      	str	r1, [sp, #4]
 80010fc:	2304      	movs	r3, #4
 80010fe:	9300      	str	r3, [sp, #0]
 8001100:	460b      	mov	r3, r1
 8001102:	2203      	movs	r2, #3
 8001104:	4815      	ldr	r0, [pc, #84]	@ (800115c <ADC_Pin_Init+0x20c>)
 8001106:	f001 fe4f 	bl	8002da8 <GPIO_Pin_Init>
 800110a:	e755      	b.n	8000fb8 <ADC_Pin_Init+0x68>
        GPIO_Pin_Init(GPIOC, 3, GPIO_Configuration.Mode.Analog,
 800110c:	2300      	movs	r3, #0
 800110e:	9302      	str	r3, [sp, #8]
 8001110:	2302      	movs	r3, #2
 8001112:	9301      	str	r3, [sp, #4]
 8001114:	2204      	movs	r2, #4
 8001116:	9200      	str	r2, [sp, #0]
 8001118:	2203      	movs	r2, #3
 800111a:	4611      	mov	r1, r2
 800111c:	480f      	ldr	r0, [pc, #60]	@ (800115c <ADC_Pin_Init+0x20c>)
 800111e:	f001 fe43 	bl	8002da8 <GPIO_Pin_Init>
 8001122:	e74e      	b.n	8000fc2 <ADC_Pin_Init+0x72>
        GPIO_Pin_Init(GPIOC, 4, GPIO_Configuration.Mode.Analog,
 8001124:	2300      	movs	r3, #0
 8001126:	9302      	str	r3, [sp, #8]
 8001128:	2302      	movs	r3, #2
 800112a:	9301      	str	r3, [sp, #4]
 800112c:	2104      	movs	r1, #4
 800112e:	9100      	str	r1, [sp, #0]
 8001130:	2203      	movs	r2, #3
 8001132:	480a      	ldr	r0, [pc, #40]	@ (800115c <ADC_Pin_Init+0x20c>)
 8001134:	f001 fe38 	bl	8002da8 <GPIO_Pin_Init>
 8001138:	e748      	b.n	8000fcc <ADC_Pin_Init+0x7c>
        GPIO_Pin_Init(GPIOC, 5, GPIO_Configuration.Mode.Analog,
 800113a:	2300      	movs	r3, #0
 800113c:	9302      	str	r3, [sp, #8]
 800113e:	2302      	movs	r3, #2
 8001140:	9301      	str	r3, [sp, #4]
 8001142:	2204      	movs	r2, #4
 8001144:	9200      	str	r2, [sp, #0]
 8001146:	2203      	movs	r2, #3
 8001148:	2105      	movs	r1, #5
 800114a:	4804      	ldr	r0, [pc, #16]	@ (800115c <ADC_Pin_Init+0x20c>)
 800114c:	f001 fe2c 	bl	8002da8 <GPIO_Pin_Init>
 8001150:	e741      	b.n	8000fd6 <ADC_Pin_Init+0x86>
 8001152:	bf00      	nop
 8001154:	40020000 	.word	0x40020000
 8001158:	40020400 	.word	0x40020400
 800115c:	40020800 	.word	0x40020800

08001160 <Timer_CalcPrescalerAndReload>:
{
 8001160:	ee05 1a10 	vmov	s10, r1
 8001164:	ee05 2a90 	vmov	s11, r2
    TimerSettings_t best = {0, 0, 0, 100.0f};
 8001168:	2100      	movs	r1, #0
 800116a:	8001      	strh	r1, [r0, #0]
 800116c:	8041      	strh	r1, [r0, #2]
 800116e:	2300      	movs	r3, #0
 8001170:	6043      	str	r3, [r0, #4]
 8001172:	4b2b      	ldr	r3, [pc, #172]	@ (8001220 <Timer_CalcPrescalerAndReload+0xc0>)
 8001174:	6083      	str	r3, [r0, #8]
    float bestError = 1e6f;
 8001176:	eddf 4a2b 	vldr	s9, [pc, #172]	@ 8001224 <Timer_CalcPrescalerAndReload+0xc4>
    for (uint32_t psc = 0; psc < 0x10000; ++psc) {
 800117a:	e000      	b.n	800117e <Timer_CalcPrescalerAndReload+0x1e>
            bestError = error;
 800117c:	4611      	mov	r1, r2
    for (uint32_t psc = 0; psc < 0x10000; ++psc) {
 800117e:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8001182:	d24b      	bcs.n	800121c <Timer_CalcPrescalerAndReload+0xbc>
        float arrf = ((float)timerClkHz / ((psc + 1) * (float)targetFreqHz)) - 1.0f;
 8001184:	eeb8 6a45 	vcvt.f32.u32	s12, s10
 8001188:	1c4a      	adds	r2, r1, #1
 800118a:	eef8 6a65 	vcvt.f32.u32	s13, s11
 800118e:	ee07 2a90 	vmov	s15, r2
 8001192:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001196:	ee27 7a26 	vmul.f32	s14, s14, s13
 800119a:	eec6 7a07 	vdiv.f32	s15, s12, s14
 800119e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80011a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
        if (arrf < 0 || arrf > 0xFFFF) continue;
 80011a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ae:	d4e5      	bmi.n	800117c <Timer_CalcPrescalerAndReload+0x1c>
 80011b0:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001228 <Timer_CalcPrescalerAndReload+0xc8>
 80011b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011bc:	dcde      	bgt.n	800117c <Timer_CalcPrescalerAndReload+0x1c>
        uint32_t arr = (uint32_t)(arrf + 0.5f); // round to nearest
 80011be:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80011c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011ca:	ee17 3a90 	vmov	r3, s15
        float actualFreq = (float)timerClkHz / ((psc + 1) * (arr + 1));
 80011ce:	fb03 2c02 	mla	ip, r3, r2, r2
 80011d2:	ee07 ca90 	vmov	s15, ip
 80011d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011da:	ee86 7a27 	vdiv.f32	s14, s12, s15
        float error = fabsf((actualFreq - targetFreqHz) / targetFreqHz) * 100.0f;
 80011de:	ee37 6a66 	vsub.f32	s12, s14, s13
 80011e2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80011e6:	eef0 7ae7 	vabs.f32	s15, s15
 80011ea:	eddf 6a10 	vldr	s13, [pc, #64]	@ 800122c <Timer_CalcPrescalerAndReload+0xcc>
 80011ee:	ee67 7aa6 	vmul.f32	s15, s15, s13
        if (error < bestError) {
 80011f2:	eef4 4ae7 	vcmpe.f32	s9, s15
 80011f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011fa:	ddbf      	ble.n	800117c <Timer_CalcPrescalerAndReload+0x1c>
            best.PSC = (uint16_t)psc;
 80011fc:	8001      	strh	r1, [r0, #0]
            best.ARR = (uint16_t)arr;
 80011fe:	8043      	strh	r3, [r0, #2]
            best.actualFreq = actualFreq;
 8001200:	ed80 7a01 	vstr	s14, [r0, #4]
            best.errorPercent = error;
 8001204:	edc0 7a02 	vstr	s15, [r0, #8]
            if (error < 0.0001f) break;
 8001208:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8001230 <Timer_CalcPrescalerAndReload+0xd0>
 800120c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001214:	d402      	bmi.n	800121c <Timer_CalcPrescalerAndReload+0xbc>
            bestError = error;
 8001216:	eef0 4a67 	vmov.f32	s9, s15
 800121a:	e7af      	b.n	800117c <Timer_CalcPrescalerAndReload+0x1c>
}
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	42c80000 	.word	0x42c80000
 8001224:	49742400 	.word	0x49742400
 8001228:	477fff00 	.word	0x477fff00
 800122c:	42c80000 	.word	0x42c80000
 8001230:	38d1b717 	.word	0x38d1b717

08001234 <ADC_Timer_External_Trigger_Init>:
{
 8001234:	b510      	push	{r4, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	4604      	mov	r4, r0
	TimerSettings_t ts = Timer_CalcPrescalerAndReload(168000000, config->External_Trigger.Sampling_Frequency);
 800123a:	7a42      	ldrb	r2, [r0, #9]
 800123c:	4994      	ldr	r1, [pc, #592]	@ (8001490 <ADC_Timer_External_Trigger_Init+0x25c>)
 800123e:	a801      	add	r0, sp, #4
 8001240:	f7ff ff8e 	bl	8001160 <Timer_CalcPrescalerAndReload>
	if(config->External_Trigger.Trigger_Event == ADC_Configuration.Regular_External_Trigger_Event.Timer_1_CC1)
 8001244:	7a23      	ldrb	r3, [r4, #8]
 8001246:	2b07      	cmp	r3, #7
 8001248:	d839      	bhi.n	80012be <ADC_Timer_External_Trigger_Init+0x8a>
 800124a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800124e:	0008      	.short	0x0008
 8001250:	006b003a 	.word	0x006b003a
 8001254:	00b60084 	.word	0x00b60084
 8001258:	00ea00d0 	.word	0x00ea00d0
 800125c:	0108      	.short	0x0108
		RCC -> APB2ENR |= RCC_APB2ENR_TIM1EN;
 800125e:	4a8d      	ldr	r2, [pc, #564]	@ (8001494 <ADC_Timer_External_Trigger_Init+0x260>)
 8001260:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 8001262:	f043 0301 	orr.w	r3, r3, #1
 8001266:	6453      	str	r3, [r2, #68]	@ 0x44
		TIM1->CR2 &= ~TIM_CR2_MMS;
 8001268:	4b8b      	ldr	r3, [pc, #556]	@ (8001498 <ADC_Timer_External_Trigger_Init+0x264>)
 800126a:	685a      	ldr	r2, [r3, #4]
 800126c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001270:	605a      	str	r2, [r3, #4]
		TIM1->CR2 |=  (TIM_CR2_MMS_0 | TIM_CR2_MMS_1);
 8001272:	685a      	ldr	r2, [r3, #4]
 8001274:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 8001278:	605a      	str	r2, [r3, #4]
		TIM1->CCMR1 &= ~TIM_CCMR1_CC1S;          // CC2 as output
 800127a:	699a      	ldr	r2, [r3, #24]
 800127c:	f022 0203 	bic.w	r2, r2, #3
 8001280:	619a      	str	r2, [r3, #24]
		TIM1->CCMR1 &= ~TIM_CCMR1_OC1M;
 8001282:	699a      	ldr	r2, [r3, #24]
 8001284:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001288:	619a      	str	r2, [r3, #24]
		TIM1->CCMR1 |=  TIM_CCMR1_OC1M_1        // OC2M = 110: PWM Mode 1 (OC2REF toggles high when CNT==CCR2)
 800128a:	699a      	ldr	r2, [r3, #24]
 800128c:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8001290:	619a      	str	r2, [r3, #24]
		TIM1->CCMR1 |=  TIM_CCMR1_OC1PE;         // preload enable
 8001292:	699a      	ldr	r2, [r3, #24]
 8001294:	f042 0208 	orr.w	r2, r2, #8
 8001298:	619a      	str	r2, [r3, #24]
		TIM1->CCR2 = (config->External_Trigger.Sampling_Frequency)/2 -1;
 800129a:	7a62      	ldrb	r2, [r4, #9]
 800129c:	0852      	lsrs	r2, r2, #1
 800129e:	3a01      	subs	r2, #1
 80012a0:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM1->CCER |= TIM_CCER_CC1E;
 80012a2:	6a1a      	ldr	r2, [r3, #32]
 80012a4:	f042 0201 	orr.w	r2, r2, #1
 80012a8:	621a      	str	r2, [r3, #32]
		TIM1->PSC = ts.PSC;
 80012aa:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80012ae:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM1->ARR = ts.ARR;     // period = 2000 ticks
 80012b0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80012b4:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM1->CR1 |= TIM_CR1_CEN;
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	f042 0201 	orr.w	r2, r2, #1
 80012bc:	601a      	str	r2, [r3, #0]
}
 80012be:	b004      	add	sp, #16
 80012c0:	bd10      	pop	{r4, pc}
		RCC -> APB2ENR |= RCC_APB2ENR_TIM1EN;
 80012c2:	4a74      	ldr	r2, [pc, #464]	@ (8001494 <ADC_Timer_External_Trigger_Init+0x260>)
 80012c4:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 80012c6:	f043 0301 	orr.w	r3, r3, #1
 80012ca:	6453      	str	r3, [r2, #68]	@ 0x44
		TIM1->CR2 &= ~TIM_CR2_MMS;
 80012cc:	4b72      	ldr	r3, [pc, #456]	@ (8001498 <ADC_Timer_External_Trigger_Init+0x264>)
 80012ce:	685a      	ldr	r2, [r3, #4]
 80012d0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80012d4:	605a      	str	r2, [r3, #4]
		TIM1->CR2 |=  (TIM_CR2_MMS_0 | TIM_CR2_MMS_1);
 80012d6:	685a      	ldr	r2, [r3, #4]
 80012d8:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 80012dc:	605a      	str	r2, [r3, #4]
		TIM1->CCMR1 &= ~TIM_CCMR1_CC2S;          // CC2 as output
 80012de:	699a      	ldr	r2, [r3, #24]
 80012e0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80012e4:	619a      	str	r2, [r3, #24]
		TIM1->CCMR1 &= ~TIM_CCMR1_OC2M;
 80012e6:	699a      	ldr	r2, [r3, #24]
 80012e8:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 80012ec:	619a      	str	r2, [r3, #24]
		TIM1->CCMR1 |=  TIM_CCMR1_OC2M_1        // OC2M = 110: PWM Mode 1 (OC2REF toggles high when CNT==CCR2)
 80012ee:	699a      	ldr	r2, [r3, #24]
 80012f0:	f442 42c0 	orr.w	r2, r2, #24576	@ 0x6000
 80012f4:	619a      	str	r2, [r3, #24]
		TIM1->CCMR1 |=  TIM_CCMR1_OC2PE;         // preload enable
 80012f6:	699a      	ldr	r2, [r3, #24]
 80012f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80012fc:	619a      	str	r2, [r3, #24]
		TIM1->CCR2 = (config->External_Trigger.Sampling_Frequency)/2 -1;
 80012fe:	7a62      	ldrb	r2, [r4, #9]
 8001300:	0852      	lsrs	r2, r2, #1
 8001302:	3a01      	subs	r2, #1
 8001304:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM1->CCER |= TIM_CCER_CC2E;
 8001306:	6a1a      	ldr	r2, [r3, #32]
 8001308:	f042 0210 	orr.w	r2, r2, #16
 800130c:	621a      	str	r2, [r3, #32]
		TIM1->PSC = ts.PSC;
 800130e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8001312:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM1->ARR = ts.ARR;     // period = 2000 ticks
 8001314:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8001318:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM1->CR1 |= TIM_CR1_CEN;
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	f042 0201 	orr.w	r2, r2, #1
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	e7cc      	b.n	80012be <ADC_Timer_External_Trigger_Init+0x8a>
		RCC -> APB2ENR |= RCC_APB2ENR_TIM1EN;
 8001324:	4a5b      	ldr	r2, [pc, #364]	@ (8001494 <ADC_Timer_External_Trigger_Init+0x260>)
 8001326:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	6453      	str	r3, [r2, #68]	@ 0x44
		TIM1 -> EGR |= TIM_EGR_CC3G;
 800132e:	4b5a      	ldr	r3, [pc, #360]	@ (8001498 <ADC_Timer_External_Trigger_Init+0x264>)
 8001330:	695a      	ldr	r2, [r3, #20]
 8001332:	f042 0208 	orr.w	r2, r2, #8
 8001336:	615a      	str	r2, [r3, #20]
		TIM1->DIER |=  TIM_DIER_CC3IE;
 8001338:	68da      	ldr	r2, [r3, #12]
 800133a:	f042 0208 	orr.w	r2, r2, #8
 800133e:	60da      	str	r2, [r3, #12]
		TIM1->PSC = 10000-1;
 8001340:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001344:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM1->ARR = 8400-1;
 8001346:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 800134a:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM1->CR1 |= TIM_CR1_CEN;
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	f042 0201 	orr.w	r2, r2, #1
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	e7b3      	b.n	80012be <ADC_Timer_External_Trigger_Init+0x8a>
		RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 8001356:	4a4f      	ldr	r2, [pc, #316]	@ (8001494 <ADC_Timer_External_Trigger_Init+0x260>)
 8001358:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800135a:	f043 0301 	orr.w	r3, r3, #1
 800135e:	6413      	str	r3, [r2, #64]	@ 0x40
		TIM2->CR2 &= ~TIM_CR2_MMS;
 8001360:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001364:	685a      	ldr	r2, [r3, #4]
 8001366:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800136a:	605a      	str	r2, [r3, #4]
		TIM2->CR2 |=  (TIM_CR2_MMS_0 | TIM_CR2_MMS_1);
 800136c:	685a      	ldr	r2, [r3, #4]
 800136e:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 8001372:	605a      	str	r2, [r3, #4]
		TIM2->CCMR1 &= ~TIM_CCMR1_CC2S;          // CC2 as output
 8001374:	699a      	ldr	r2, [r3, #24]
 8001376:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800137a:	619a      	str	r2, [r3, #24]
		TIM2->CCMR1 &= ~TIM_CCMR1_OC2M;
 800137c:	699a      	ldr	r2, [r3, #24]
 800137e:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8001382:	619a      	str	r2, [r3, #24]
		TIM2->CCMR1 |=  TIM_CCMR1_OC2M_1        // OC2M = 110: PWM Mode 1 (OC2REF toggles high when CNT==CCR2)
 8001384:	699a      	ldr	r2, [r3, #24]
 8001386:	f442 42c0 	orr.w	r2, r2, #24576	@ 0x6000
 800138a:	619a      	str	r2, [r3, #24]
		TIM2->CCMR1 |=  TIM_CCMR1_OC2PE;         // preload enable
 800138c:	699a      	ldr	r2, [r3, #24]
 800138e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001392:	619a      	str	r2, [r3, #24]
		TIM2->CCR2 = (config->External_Trigger.Sampling_Frequency)/2 -1;
 8001394:	7a62      	ldrb	r2, [r4, #9]
 8001396:	0852      	lsrs	r2, r2, #1
 8001398:	3a01      	subs	r2, #1
 800139a:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM2->CCER |= TIM_CCER_CC2E;
 800139c:	6a1a      	ldr	r2, [r3, #32]
 800139e:	f042 0210 	orr.w	r2, r2, #16
 80013a2:	621a      	str	r2, [r3, #32]
		TIM2->PSC = ts.PSC;
 80013a4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80013a8:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM2->ARR = ts.ARR;     // period = 2000 ticks
 80013aa:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80013ae:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM2->CR1 |= TIM_CR1_CEN;
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	f042 0201 	orr.w	r2, r2, #1
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	e781      	b.n	80012be <ADC_Timer_External_Trigger_Init+0x8a>
		RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 80013ba:	4a36      	ldr	r2, [pc, #216]	@ (8001494 <ADC_Timer_External_Trigger_Init+0x260>)
 80013bc:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80013be:	f043 0301 	orr.w	r3, r3, #1
 80013c2:	6413      	str	r3, [r2, #64]	@ 0x40
		TIM2 -> EGR |= TIM_EGR_CC3G;
 80013c4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013c8:	695a      	ldr	r2, [r3, #20]
 80013ca:	f042 0208 	orr.w	r2, r2, #8
 80013ce:	615a      	str	r2, [r3, #20]
		TIM2->DIER |=  TIM_DIER_CC3IE;
 80013d0:	68da      	ldr	r2, [r3, #12]
 80013d2:	f042 0208 	orr.w	r2, r2, #8
 80013d6:	60da      	str	r2, [r3, #12]
		TIM2->PSC = 10000-1;
 80013d8:	f242 720f 	movw	r2, #9999	@ 0x270f
 80013dc:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM2->ARR = 8400-1;
 80013de:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80013e2:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM2->CR1 |= TIM_CR1_CEN;
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	f042 0201 	orr.w	r2, r2, #1
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	e767      	b.n	80012be <ADC_Timer_External_Trigger_Init+0x8a>
		RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 80013ee:	4a29      	ldr	r2, [pc, #164]	@ (8001494 <ADC_Timer_External_Trigger_Init+0x260>)
 80013f0:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80013f2:	f043 0301 	orr.w	r3, r3, #1
 80013f6:	6413      	str	r3, [r2, #64]	@ 0x40
		TIM2 -> EGR |= TIM_EGR_CC3G;
 80013f8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013fc:	695a      	ldr	r2, [r3, #20]
 80013fe:	f042 0208 	orr.w	r2, r2, #8
 8001402:	615a      	str	r2, [r3, #20]
		TIM2->DIER |=  TIM_DIER_CC3IE;
 8001404:	68da      	ldr	r2, [r3, #12]
 8001406:	f042 0208 	orr.w	r2, r2, #8
 800140a:	60da      	str	r2, [r3, #12]
		TIM2->PSC = 10000-1;
 800140c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001410:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM2->ARR = 8400-1;
 8001412:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001416:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM2->CR1 |= TIM_CR1_CEN;
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	f042 0201 	orr.w	r2, r2, #1
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	e74d      	b.n	80012be <ADC_Timer_External_Trigger_Init+0x8a>
		RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 8001422:	4a1c      	ldr	r2, [pc, #112]	@ (8001494 <ADC_Timer_External_Trigger_Init+0x260>)
 8001424:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8001426:	f043 0301 	orr.w	r3, r3, #1
 800142a:	6413      	str	r3, [r2, #64]	@ 0x40
		TIM2->DIER |=  TIM_DIER_UIE;
 800142c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001430:	68da      	ldr	r2, [r3, #12]
 8001432:	f042 0201 	orr.w	r2, r2, #1
 8001436:	60da      	str	r2, [r3, #12]
		TIM2 -> CR2 |=  TIM_CR2_MMS_1;
 8001438:	685a      	ldr	r2, [r3, #4]
 800143a:	f042 0220 	orr.w	r2, r2, #32
 800143e:	605a      	str	r2, [r3, #4]
		TIM2->PSC = 1000-1;
 8001440:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001444:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM2->ARR = 16800-1;
 8001446:	f244 129f 	movw	r2, #16799	@ 0x419f
 800144a:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM2->CR1 |= TIM_CR1_CEN;
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	f042 0201 	orr.w	r2, r2, #1
 8001452:	601a      	str	r2, [r3, #0]
		TIM2 -> EGR |= TIM_EGR_UG;
 8001454:	695a      	ldr	r2, [r3, #20]
 8001456:	f042 0201 	orr.w	r2, r2, #1
 800145a:	615a      	str	r2, [r3, #20]
 800145c:	e72f      	b.n	80012be <ADC_Timer_External_Trigger_Init+0x8a>
		RCC -> APB1ENR |= RCC_APB1ENR_TIM3EN;
 800145e:	4a0d      	ldr	r2, [pc, #52]	@ (8001494 <ADC_Timer_External_Trigger_Init+0x260>)
 8001460:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8001462:	f043 0302 	orr.w	r3, r3, #2
 8001466:	6413      	str	r3, [r2, #64]	@ 0x40
		TIM3 -> EGR |= TIM_EGR_CC1G;
 8001468:	4b0c      	ldr	r3, [pc, #48]	@ (800149c <ADC_Timer_External_Trigger_Init+0x268>)
 800146a:	695a      	ldr	r2, [r3, #20]
 800146c:	f042 0202 	orr.w	r2, r2, #2
 8001470:	615a      	str	r2, [r3, #20]
		TIM3->DIER |=  TIM_DIER_CC1IE;
 8001472:	68da      	ldr	r2, [r3, #12]
 8001474:	f042 0202 	orr.w	r2, r2, #2
 8001478:	60da      	str	r2, [r3, #12]
		TIM3->PSC = 10000-1;
 800147a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800147e:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM3->ARR = 8400-1;
 8001480:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001484:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM3->CR1 |= TIM_CR1_CEN;
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	f042 0201 	orr.w	r2, r2, #1
 800148c:	601a      	str	r2, [r3, #0]
}
 800148e:	e716      	b.n	80012be <ADC_Timer_External_Trigger_Init+0x8a>
 8001490:	0a037a00 	.word	0x0a037a00
 8001494:	40023800 	.word	0x40023800
 8001498:	40010000 	.word	0x40010000
 800149c:	40000400 	.word	0x40000400

080014a0 <ADC_Init>:
 * @param[in] config Pointer to the ADC configuration structure.
 *
 * @return int8_t Returns 1 on successful initialization, or -1 if an error occurs.
 */
int8_t ADC_Init(ADC_Config *config)
{
 80014a0:	b510      	push	{r4, lr}
 80014a2:	4604      	mov	r4, r0
    // Enable the clock for the selected ADC port
    if (config->Port == ADC_Configuration.Port._ADC1_)
 80014a4:	6803      	ldr	r3, [r0, #0]
 80014a6:	4a62      	ldr	r2, [pc, #392]	@ (8001630 <ADC_Init+0x190>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d008      	beq.n	80014be <ADC_Init+0x1e>
        RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
    else if (config->Port == ADC_Configuration.Port._ADC2_)
 80014ac:	4a61      	ldr	r2, [pc, #388]	@ (8001634 <ADC_Init+0x194>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d026      	beq.n	8001500 <ADC_Init+0x60>
        RCC->APB2ENR |= RCC_APB2ENR_ADC2EN;
    else if (config->Port == ADC_Configuration.Port._ADC3_)
 80014b2:	4a61      	ldr	r2, [pc, #388]	@ (8001638 <ADC_Init+0x198>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d029      	beq.n	800150c <ADC_Init+0x6c>
        RCC->APB2ENR |= RCC_APB2ENR_ADC3EN;
    else
        return -1;
 80014b8:	f04f 30ff 	mov.w	r0, #4294967295
    xADC.peripheral_pointer_increment = DMA_Configuration.Peripheral_Pointer_Increment.Disable;
    DMA_Init(&xADC);

    // Return success
    return 1;
}
 80014bc:	bd10      	pop	{r4, pc}
        RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 80014be:	f502 328c 	add.w	r2, r2, #71680	@ 0x11800
 80014c2:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 80014c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014c8:	6453      	str	r3, [r2, #68]	@ 0x44
    config->Port->CR1 |= ADC_CR1_SCAN;
 80014ca:	6822      	ldr	r2, [r4, #0]
 80014cc:	6853      	ldr	r3, [r2, #4]
 80014ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014d2:	6053      	str	r3, [r2, #4]
    if (config->Resolution == ADC_Configuration.Resolution.Bit_12)
 80014d4:	f894 303a 	ldrb.w	r3, [r4, #58]	@ 0x3a
 80014d8:	2b00      	cmp	r3, #0
 80014da:	f040 80a0 	bne.w	800161e <ADC_Init+0x17e>
        config->Port->CR1 &= ~ADC_CR1_RES;
 80014de:	6822      	ldr	r2, [r4, #0]
 80014e0:	6853      	ldr	r3, [r2, #4]
 80014e2:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 80014e6:	6053      	str	r3, [r2, #4]
    if (config->Conversion_Mode == ADC_Configuration.Conversion_Mode.Single) {
 80014e8:	7963      	ldrb	r3, [r4, #5]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d015      	beq.n	800151a <ADC_Init+0x7a>
    } else if (config->Conversion_Mode == ADC_Configuration.Conversion_Mode.Continuous) {
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	f040 8098 	bne.w	8001624 <ADC_Init+0x184>
        config->Port->CR2 |= ADC_CR2_CONT;
 80014f4:	6822      	ldr	r2, [r4, #0]
 80014f6:	6893      	ldr	r3, [r2, #8]
 80014f8:	f043 0302 	orr.w	r3, r3, #2
 80014fc:	6093      	str	r3, [r2, #8]
 80014fe:	e011      	b.n	8001524 <ADC_Init+0x84>
        RCC->APB2ENR |= RCC_APB2ENR_ADC2EN;
 8001500:	4a4e      	ldr	r2, [pc, #312]	@ (800163c <ADC_Init+0x19c>)
 8001502:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 8001504:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001508:	6453      	str	r3, [r2, #68]	@ 0x44
 800150a:	e7de      	b.n	80014ca <ADC_Init+0x2a>
        RCC->APB2ENR |= RCC_APB2ENR_ADC3EN;
 800150c:	f502 328b 	add.w	r2, r2, #71168	@ 0x11600
 8001510:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 8001512:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001516:	6453      	str	r3, [r2, #68]	@ 0x44
 8001518:	e7d7      	b.n	80014ca <ADC_Init+0x2a>
        config->Port->CR2 &= ~ADC_CR2_CONT;
 800151a:	6822      	ldr	r2, [r4, #0]
 800151c:	6893      	ldr	r3, [r2, #8]
 800151e:	f023 0302 	bic.w	r3, r3, #2
 8001522:	6093      	str	r3, [r2, #8]
    config->Port->CR2 |= ADC_CR2_EOCS;
 8001524:	6822      	ldr	r2, [r4, #0]
 8001526:	6893      	ldr	r3, [r2, #8]
 8001528:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800152c:	6093      	str	r3, [r2, #8]
    if (config->Data_Alignment == ADC_Configuration.Data_Alignment.Right_Justified) {
 800152e:	7923      	ldrb	r3, [r4, #4]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d144      	bne.n	80015be <ADC_Init+0x11e>
        config->Port->CR2 &= ~ADC_CR2_ALIGN;
 8001534:	6822      	ldr	r2, [r4, #0]
 8001536:	6893      	ldr	r3, [r2, #8]
 8001538:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800153c:	6093      	str	r3, [r2, #8]
    pin_temp = ADC_Sampling_Config(config);
 800153e:	4620      	mov	r0, r4
 8001540:	f7ff fbbb 	bl	8000cba <ADC_Sampling_Config>
 8001544:	4b3e      	ldr	r3, [pc, #248]	@ (8001640 <ADC_Init+0x1a0>)
 8001546:	7018      	strb	r0, [r3, #0]
    config->Port->SQR1 |= (pin_temp - 1) << ADC_SQR1_L_Pos;
 8001548:	6822      	ldr	r2, [r4, #0]
 800154a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800154c:	3801      	subs	r0, #1
 800154e:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
 8001552:	62d3      	str	r3, [r2, #44]	@ 0x2c
    ADC_Pin_Init(config);
 8001554:	4620      	mov	r0, r4
 8001556:	f7ff fcfb 	bl	8000f50 <ADC_Pin_Init>
    if (config->Channel_Type == ADC_Configuration.Channel_Type.Regular) {
 800155a:	79a3      	ldrb	r3, [r4, #6]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d144      	bne.n	80015ea <ADC_Init+0x14a>
        config->Port->CR2 &= ~ADC_CR2_EXTSEL;
 8001560:	6822      	ldr	r2, [r4, #0]
 8001562:	6893      	ldr	r3, [r2, #8]
 8001564:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8001568:	6093      	str	r3, [r2, #8]
        if (config->External_Trigger.Enable == ENABLE) {
 800156a:	79e3      	ldrb	r3, [r4, #7]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d12e      	bne.n	80015ce <ADC_Init+0x12e>
    config->Port->CR2 |= ADC_CR2_DMA;
 8001570:	6822      	ldr	r2, [r4, #0]
 8001572:	6893      	ldr	r3, [r2, #8]
 8001574:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001578:	6093      	str	r3, [r2, #8]
    config->Port->CR2 |= ADC_CR2_DDS;
 800157a:	6822      	ldr	r2, [r4, #0]
 800157c:	6893      	ldr	r3, [r2, #8]
 800157e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001582:	6093      	str	r3, [r2, #8]
    ADC_Sequence_Config(config);
 8001584:	4620      	mov	r0, r4
 8001586:	f7ff fc53 	bl	8000e30 <ADC_Sequence_Config>
    xADC.Request = DMA_Configuration.Request._ADC1;
 800158a:	4b2e      	ldr	r3, [pc, #184]	@ (8001644 <ADC_Init+0x1a4>)
 800158c:	4a2e      	ldr	r2, [pc, #184]	@ (8001648 <ADC_Init+0x1a8>)
 800158e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001590:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    xADC.transfer_direction = DMA_Configuration.Transfer_Direction.Peripheral_to_memory;
 8001594:	2200      	movs	r2, #0
 8001596:	611a      	str	r2, [r3, #16]
    xADC.circular_mode = DMA_Configuration.Circular_Mode.Enable;
 8001598:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800159c:	6199      	str	r1, [r3, #24]
    xADC.flow_control = DMA_Configuration.Flow_Control.DMA_Control;
 800159e:	60da      	str	r2, [r3, #12]
    xADC.memory_data_size = DMA_Configuration.Memory_Data_Size.half_word;
 80015a0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015a4:	6299      	str	r1, [r3, #40]	@ 0x28
    xADC.peripheral_data_size = DMA_Configuration.Peripheral_Data_Size.half_word;
 80015a6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80015aa:	6259      	str	r1, [r3, #36]	@ 0x24
    xADC.memory_pointer_increment = DMA_Configuration.Memory_Pointer_Increment.Enable;
 80015ac:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80015b0:	8419      	strh	r1, [r3, #32]
    xADC.peripheral_pointer_increment = DMA_Configuration.Peripheral_Pointer_Increment.Disable;
 80015b2:	845a      	strh	r2, [r3, #34]	@ 0x22
    DMA_Init(&xADC);
 80015b4:	4618      	mov	r0, r3
 80015b6:	f001 f905 	bl	80027c4 <DMA_Init>
    return 1;
 80015ba:	2001      	movs	r0, #1
 80015bc:	e77e      	b.n	80014bc <ADC_Init+0x1c>
    } else if (config->Data_Alignment == ADC_Configuration.Data_Alignment.Left_Justified) {
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d133      	bne.n	800162a <ADC_Init+0x18a>
        config->Port->CR2 |= ADC_CR2_ALIGN;
 80015c2:	6822      	ldr	r2, [r4, #0]
 80015c4:	6893      	ldr	r3, [r2, #8]
 80015c6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80015ca:	6093      	str	r3, [r2, #8]
 80015cc:	e7b7      	b.n	800153e <ADC_Init+0x9e>
            config->Port->CR2 |= ADC_CR2_EXTSEL_0 | ADC_CR2_EXTSEL_1;
 80015ce:	6822      	ldr	r2, [r4, #0]
 80015d0:	6893      	ldr	r3, [r2, #8]
 80015d2:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
 80015d6:	6093      	str	r3, [r2, #8]
            config->Port->CR2 |= ADC_CR2_EXTEN_0;
 80015d8:	6822      	ldr	r2, [r4, #0]
 80015da:	6893      	ldr	r3, [r2, #8]
 80015dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015e0:	6093      	str	r3, [r2, #8]
            ADC_Timer_External_Trigger_Init(config);
 80015e2:	4620      	mov	r0, r4
 80015e4:	f7ff fe26 	bl	8001234 <ADC_Timer_External_Trigger_Init>
 80015e8:	e7c2      	b.n	8001570 <ADC_Init+0xd0>
    } else if (config->Channel_Type == ADC_Configuration.Channel_Type.Injected) {
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d002      	beq.n	80015f4 <ADC_Init+0x154>
        return -1;
 80015ee:	f04f 30ff 	mov.w	r0, #4294967295
 80015f2:	e763      	b.n	80014bc <ADC_Init+0x1c>
        config->Port->CR2 &= ~ADC_CR2_JEXTSEL;
 80015f4:	6822      	ldr	r2, [r4, #0]
 80015f6:	6893      	ldr	r3, [r2, #8]
 80015f8:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 80015fc:	6093      	str	r3, [r2, #8]
        config->Port->CR2 |= config->External_Trigger.Enable << ADC_CR2_JEXTEN_Pos;
 80015fe:	6822      	ldr	r2, [r4, #0]
 8001600:	6893      	ldr	r3, [r2, #8]
 8001602:	79e1      	ldrb	r1, [r4, #7]
 8001604:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 8001608:	6093      	str	r3, [r2, #8]
        config->Port->CR2 |= config->External_Trigger.Trigger_Event << ADC_CR2_JEXTSEL_Pos;
 800160a:	6822      	ldr	r2, [r4, #0]
 800160c:	6893      	ldr	r3, [r2, #8]
 800160e:	7a21      	ldrb	r1, [r4, #8]
 8001610:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001614:	6093      	str	r3, [r2, #8]
        ADC_Timer_External_Trigger_Init(config);
 8001616:	4620      	mov	r0, r4
 8001618:	f7ff fe0c 	bl	8001234 <ADC_Timer_External_Trigger_Init>
 800161c:	e7a8      	b.n	8001570 <ADC_Init+0xd0>
        return -1;
 800161e:	f04f 30ff 	mov.w	r0, #4294967295
 8001622:	e74b      	b.n	80014bc <ADC_Init+0x1c>
        return -1;
 8001624:	f04f 30ff 	mov.w	r0, #4294967295
 8001628:	e748      	b.n	80014bc <ADC_Init+0x1c>
        return -1;
 800162a:	f04f 30ff 	mov.w	r0, #4294967295
 800162e:	e745      	b.n	80014bc <ADC_Init+0x1c>
 8001630:	40012000 	.word	0x40012000
 8001634:	40012100 	.word	0x40012100
 8001638:	40012200 	.word	0x40012200
 800163c:	40023800 	.word	0x40023800
 8001640:	200001e8 	.word	0x200001e8
 8001644:	200001ec 	.word	0x200001ec
 8001648:	0800781c 	.word	0x0800781c

0800164c <ADC_Enable>:
 * @param[in] config Pointer to the ADC configuration structure.
 *
 * @return int8_t Returns 1 on successful enabling of the ADC.
 */
int8_t ADC_Enable(ADC_Config *config)
{
 800164c:	b508      	push	{r3, lr}
    // Enable the ADC by setting the ADON bit
    config->Port->CR2 |= ADC_CR2_ADON;
 800164e:	6802      	ldr	r2, [r0, #0]
 8001650:	6893      	ldr	r3, [r2, #8]
 8001652:	f043 0301 	orr.w	r3, r3, #1
 8001656:	6093      	str	r3, [r2, #8]

    // Introduce a delay for ADC stabilization
    Delay_milli(1000);
 8001658:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 8001664 <ADC_Enable+0x18>
 800165c:	f7ff fb14 	bl	8000c88 <Delay_milli>

    // Return success
    return 1;
}
 8001660:	2001      	movs	r0, #1
 8001662:	bd08      	pop	{r3, pc}
 8001664:	447a0000 	.word	0x447a0000

08001668 <ADC_Start_Capture>:
 * @param[out] buffer Pointer to the buffer where ADC data will be stored.
 *
 * @return int8_t Returns 1 on successful start of ADC capture.
 */
int8_t ADC_Start_Capture(ADC_Config *config, uint16_t *buffer)
{
 8001668:	b538      	push	{r3, r4, r5, lr}
 800166a:	4604      	mov	r4, r0
	config -> Port -> CR2 |= ADC_CR2_CONT;
 800166c:	6802      	ldr	r2, [r0, #0]
 800166e:	6893      	ldr	r3, [r2, #8]
 8001670:	f043 0302 	orr.w	r3, r3, #2
 8001674:	6093      	str	r3, [r2, #8]

    // Configure DMA settings for the ADC capture
    xADC.buffer_length = pin_temp;
 8001676:	4d0e      	ldr	r5, [pc, #56]	@ (80016b0 <ADC_Start_Capture+0x48>)
 8001678:	4b0e      	ldr	r3, [pc, #56]	@ (80016b4 <ADC_Start_Capture+0x4c>)
 800167a:	f993 3000 	ldrsb.w	r3, [r3]
 800167e:	86ab      	strh	r3, [r5, #52]	@ 0x34
    xADC.peripheral_address = (uint32_t)&(config->Port->DR);
 8001680:	6803      	ldr	r3, [r0, #0]
 8001682:	334c      	adds	r3, #76	@ 0x4c
 8001684:	62eb      	str	r3, [r5, #44]	@ 0x2c
    xADC.memory_address = (uint32_t)buffer;
 8001686:	6329      	str	r1, [r5, #48]	@ 0x30

    // Initialize DMA with the target settings
    DMA_Set_Target(&xADC);
 8001688:	4628      	mov	r0, r5
 800168a:	f001 fa0b 	bl	8002aa4 <DMA_Set_Target>
    DMA_Set_Trigger(&xADC);
 800168e:	4628      	mov	r0, r5
 8001690:	f001 fa3c 	bl	8002b0c <DMA_Set_Trigger>

    // Clear the ADC status register
    config->Port->SR = 0;
 8001694:	6823      	ldr	r3, [r4, #0]
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]

    // Start the ADC conversion
    ADC_Enable(config);
 800169a:	4620      	mov	r0, r4
 800169c:	f7ff ffd6 	bl	800164c <ADC_Enable>

    config -> Port -> CR2 |=  ADC_CR2_SWSTART;
 80016a0:	6822      	ldr	r2, [r4, #0]
 80016a2:	6893      	ldr	r3, [r2, #8]
 80016a4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80016a8:	6093      	str	r3, [r2, #8]
    // Return success
    return 1;
}
 80016aa:	2001      	movs	r0, #1
 80016ac:	bd38      	pop	{r3, r4, r5, pc}
 80016ae:	bf00      	nop
 80016b0:	200001ec 	.word	0x200001ec
 80016b4:	200001e8 	.word	0x200001e8

080016b8 <Console_IRQ>:
//        rx_flag = 1; // Set the flag indicating data reception is complete
//    }
//}

void Console_IRQ(void){
    if (rx_get_flag == 1) { // Check if reception is active
 80016b8:	4b13      	ldr	r3, [pc, #76]	@ (8001708 <Console_IRQ+0x50>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d000      	beq.n	80016c2 <Console_IRQ+0xa>

        __enable_irq(); // Re-enable interrupts

        rx_flag = 1; // Set the flag indicating data reception is complete
    }
}
 80016c0:	4770      	bx	lr
        (void)UART4->SR; // Read the status register to clear flags
 80016c2:	4b12      	ldr	r3, [pc, #72]	@ (800170c <Console_IRQ+0x54>)
 80016c4:	681a      	ldr	r2, [r3, #0]
        (void)UART4->DR; // Read the data register to clear flags
 80016c6:	685b      	ldr	r3, [r3, #4]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016c8:	b672      	cpsid	i
        serial.USART_DMA_Instance_RX.Request.Stream->CR &= ~DMA_SxCR_EN;
 80016ca:	4a11      	ldr	r2, [pc, #68]	@ (8001710 <Console_IRQ+0x58>)
 80016cc:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 80016ce:	680b      	ldr	r3, [r1, #0]
 80016d0:	f023 0301 	bic.w	r3, r3, #1
 80016d4:	600b      	str	r3, [r1, #0]
        RX_Length = RX_Buffer_Length - serial.USART_DMA_Instance_RX.Request.Stream->NDTR;
 80016d6:	6f12      	ldr	r2, [r2, #112]	@ 0x70
 80016d8:	6853      	ldr	r3, [r2, #4]
 80016da:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 80016de:	490d      	ldr	r1, [pc, #52]	@ (8001714 <Console_IRQ+0x5c>)
 80016e0:	600b      	str	r3, [r1, #0]
        if (RX_Length > RX_Buffer_Length) {
 80016e2:	680b      	ldr	r3, [r1, #0]
 80016e4:	2bc8      	cmp	r3, #200	@ 0xc8
 80016e6:	dd02      	ble.n	80016ee <Console_IRQ+0x36>
            RX_Length = RX_Buffer_Length;
 80016e8:	460b      	mov	r3, r1
 80016ea:	21c8      	movs	r1, #200	@ 0xc8
 80016ec:	6019      	str	r1, [r3, #0]
        serial.USART_DMA_Instance_RX.Request.Stream->NDTR = RX_Buffer_Length;
 80016ee:	23c8      	movs	r3, #200	@ 0xc8
 80016f0:	6053      	str	r3, [r2, #4]
        serial.USART_DMA_Instance_RX.Request.Stream->CR |= DMA_SxCR_EN;
 80016f2:	4b07      	ldr	r3, [pc, #28]	@ (8001710 <Console_IRQ+0x58>)
 80016f4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80016f6:	6813      	ldr	r3, [r2, #0]
 80016f8:	f043 0301 	orr.w	r3, r3, #1
 80016fc:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80016fe:	b662      	cpsie	i
        rx_flag = 1; // Set the flag indicating data reception is complete
 8001700:	4b05      	ldr	r3, [pc, #20]	@ (8001718 <Console_IRQ+0x60>)
 8001702:	2201      	movs	r2, #1
 8001704:	601a      	str	r2, [r3, #0]
}
 8001706:	e7db      	b.n	80016c0 <Console_IRQ+0x8>
 8001708:	200003f8 	.word	0x200003f8
 800170c:	40004c00 	.word	0x40004c00
 8001710:	20000244 	.word	0x20000244
 8001714:	200003f0 	.word	0x200003f0
 8001718:	200003f4 	.word	0x200003f4

0800171c <Console_Init>:
 * This function configures UART4 for communication, sets up DMA for
 * data handling, and prepares the GPIO pins for UART communication.
 *
 * @param baudrate Desired baud rate for UART communication.
 */
void Console_Init(int32_t baudrate) {
 800171c:	b538      	push	{r3, r4, r5, lr}
 800171e:	4605      	mov	r5, r0
    // Reset USART configuration to default values
    USART_Config_Reset(&serial);
 8001720:	4c0c      	ldr	r4, [pc, #48]	@ (8001754 <Console_Init+0x38>)
 8001722:	4620      	mov	r0, r4
 8001724:	f002 f894 	bl	8003850 <USART_Config_Reset>

    // Configure USART parameters
    serial.Port = UART4; // Use UART4 for console communication
 8001728:	4b0b      	ldr	r3, [pc, #44]	@ (8001758 <Console_Init+0x3c>)
 800172a:	6023      	str	r3, [r4, #0]
    serial.baudrate = baudrate; // Set the baud rate
 800172c:	6065      	str	r5, [r4, #4]
    serial.mode = USART_Configuration.Mode.Asynchronous; // Asynchronous mode
 800172e:	2301      	movs	r3, #1
 8001730:	7223      	strb	r3, [r4, #8]
    serial.stop_bits = USART_Configuration.Stop_Bits.Bit_1; // 1 stop bit
 8001732:	2300      	movs	r3, #0
 8001734:	7423      	strb	r3, [r4, #16]
    serial.TX_Pin = UART4_TX_Pin.PC10; // TX pin is PC10
 8001736:	230a      	movs	r3, #10
 8001738:	7263      	strb	r3, [r4, #9]
    serial.RX_Pin = UART4_RX_Pin.PC11; // RX pin is PC11
 800173a:	230b      	movs	r3, #11
 800173c:	72a3      	strb	r3, [r4, #10]
    serial.interrupt = USART_Configuration.Interrupt_Type.IDLE_Enable; // Enable IDLE interrupt
 800173e:	2310      	movs	r3, #16
 8001740:	73a3      	strb	r3, [r4, #14]
    serial.dma_enable = USART_Configuration.DMA_Enable.TX_Enable | USART_Configuration.DMA_Enable.RX_Enable; // Enable DMA for TX and RX
 8001742:	2303      	movs	r3, #3
 8001744:	7463      	strb	r3, [r4, #17]
    serial.ISR_Routines.Idle_Line_ISR = Console_IRQ;
 8001746:	4b05      	ldr	r3, [pc, #20]	@ (800175c <Console_Init+0x40>)
 8001748:	f8c4 30d4 	str.w	r3, [r4, #212]	@ 0xd4
    // Initialize USART
    if (USART_Init(&serial) != true) {
 800174c:	4620      	mov	r0, r4
 800174e:	f002 f8db 	bl	8003908 <USART_Init>
        // Handle USART initialization failure (e.g., log error or halt execution)
    }
}
 8001752:	bd38      	pop	{r3, r4, r5, pc}
 8001754:	20000244 	.word	0x20000244
 8001758:	40004c00 	.word	0x40004c00
 800175c:	080016b9 	.word	0x080016b9

08001760 <printConsole>:
  * using DMA. It supports formatted strings with variable arguments.
  *
  * @param msg Format string for the message to send.
  * @param ... Variable arguments for the format string.
  */
 void printConsole(char *msg, ...) {
 8001760:	b40f      	push	{r0, r1, r2, r3}
 8001762:	b510      	push	{r4, lr}
 8001764:	b082      	sub	sp, #8
 8001766:	ab04      	add	r3, sp, #16
 8001768:	f853 2b04 	ldr.w	r2, [r3], #4
     va_list args;
     va_start(args, msg);
 800176c:	9301      	str	r3, [sp, #4]

     // Format the message and store it in the transmission buffer
//     vsprintf((char *)TRX_Buffer, msg, args);

     vsnprintf((char *)TRX_Buffer, RX_Buffer_Length, msg, args);
 800176e:	4c09      	ldr	r4, [pc, #36]	@ (8001794 <printConsole+0x34>)
 8001770:	21c8      	movs	r1, #200	@ 0xc8
 8001772:	4620      	mov	r0, r4
 8001774:	f003 fc10 	bl	8004f98 <vsniprintf>

     // Get the length of the formatted string
     uint16_t len = strlen((char *)TRX_Buffer);
 8001778:	4620      	mov	r0, r4
 800177a:	f7fe fd79 	bl	8000270 <strlen>

     // Transmit the buffer using DMA
     USART_TX_Buffer(&serial, (uint8_t *)&TRX_Buffer[0], len);
 800177e:	b282      	uxth	r2, r0
 8001780:	4621      	mov	r1, r4
 8001782:	4805      	ldr	r0, [pc, #20]	@ (8001798 <printConsole+0x38>)
 8001784:	f002 fb5e 	bl	8003e44 <USART_TX_Buffer>

     va_end(args);
 }
 8001788:	b002      	add	sp, #8
 800178a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800178e:	b004      	add	sp, #16
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	20000328 	.word	0x20000328
 8001798:	20000244 	.word	0x20000244

0800179c <DMA1_Stream0_IRQHandler>:
volatile uint32_t DMA_LISR = 0;
volatile uint32_t DMA_HISR = 0;


void DMA1_Stream0_IRQHandler(void)
{
 800179c:	b508      	push	{r3, lr}
	DMA_LISR = DMA1 -> LISR;
 800179e:	4b42      	ldr	r3, [pc, #264]	@ (80018a8 <DMA1_Stream0_IRQHandler+0x10c>)
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	4b42      	ldr	r3, [pc, #264]	@ (80018ac <DMA1_Stream0_IRQHandler+0x110>)
 80017a4:	601a      	str	r2, [r3, #0]

	if(DMA_LISR & DMA_LISR_FEIF0)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f013 0f01 	tst.w	r3, #1
 80017ac:	d00d      	beq.n	80017ca <DMA1_Stream0_IRQHandler+0x2e>
	{

		if(__DMA1_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 80017ae:	4b40      	ldr	r3, [pc, #256]	@ (80018b0 <DMA1_Stream0_IRQHandler+0x114>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	69da      	ldr	r2, [r3, #28]
 80017b4:	f012 0f80 	tst.w	r2, #128	@ 0x80
 80017b8:	d007      	beq.n	80017ca <DMA1_Stream0_IRQHandler+0x2e>
		{
			if (__DMA1_Stream0_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80017ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017bc:	b12b      	cbz	r3, 80017ca <DMA1_Stream0_IRQHandler+0x2e>
			{
				__DMA1_Stream0_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80017be:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CFEIF0;
 80017c0:	4a39      	ldr	r2, [pc, #228]	@ (80018a8 <DMA1_Stream0_IRQHandler+0x10c>)
 80017c2:	6893      	ldr	r3, [r2, #8]
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF0)
 80017ca:	4b38      	ldr	r3, [pc, #224]	@ (80018ac <DMA1_Stream0_IRQHandler+0x110>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f013 0f04 	tst.w	r3, #4
 80017d2:	d00d      	beq.n	80017f0 <DMA1_Stream0_IRQHandler+0x54>
	{
		if(__DMA1_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 80017d4:	4b36      	ldr	r3, [pc, #216]	@ (80018b0 <DMA1_Stream0_IRQHandler+0x114>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	69da      	ldr	r2, [r3, #28]
 80017da:	f012 0f02 	tst.w	r2, #2
 80017de:	d007      	beq.n	80017f0 <DMA1_Stream0_IRQHandler+0x54>
		{
			if (__DMA1_Stream0_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 80017e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e2:	b12b      	cbz	r3, 80017f0 <DMA1_Stream0_IRQHandler+0x54>
			{
				__DMA1_Stream0_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 80017e4:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF0;
 80017e6:	4a30      	ldr	r2, [pc, #192]	@ (80018a8 <DMA1_Stream0_IRQHandler+0x10c>)
 80017e8:	6893      	ldr	r3, [r2, #8]
 80017ea:	f043 0304 	orr.w	r3, r3, #4
 80017ee:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF0)
 80017f0:	4b2e      	ldr	r3, [pc, #184]	@ (80018ac <DMA1_Stream0_IRQHandler+0x110>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f013 0f08 	tst.w	r3, #8
 80017f8:	d00d      	beq.n	8001816 <DMA1_Stream0_IRQHandler+0x7a>
	{
		if(__DMA1_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 80017fa:	4b2d      	ldr	r3, [pc, #180]	@ (80018b0 <DMA1_Stream0_IRQHandler+0x114>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	69da      	ldr	r2, [r3, #28]
 8001800:	f012 0f04 	tst.w	r2, #4
 8001804:	d007      	beq.n	8001816 <DMA1_Stream0_IRQHandler+0x7a>
		{
			if (__DMA1_Stream0_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001806:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001808:	b12b      	cbz	r3, 8001816 <DMA1_Stream0_IRQHandler+0x7a>
			{
				__DMA1_Stream0_Config__ ->ISR_Routines.Transfer_Error_ISR();
 800180a:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTEIF0;
 800180c:	4a26      	ldr	r2, [pc, #152]	@ (80018a8 <DMA1_Stream0_IRQHandler+0x10c>)
 800180e:	6893      	ldr	r3, [r2, #8]
 8001810:	f043 0308 	orr.w	r3, r3, #8
 8001814:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF0)
 8001816:	4b25      	ldr	r3, [pc, #148]	@ (80018ac <DMA1_Stream0_IRQHandler+0x110>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f013 0f10 	tst.w	r3, #16
 800181e:	d013      	beq.n	8001848 <DMA1_Stream0_IRQHandler+0xac>
	{
		if(__DMA1_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 8001820:	4b23      	ldr	r3, [pc, #140]	@ (80018b0 <DMA1_Stream0_IRQHandler+0x114>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	69da      	ldr	r2, [r3, #28]
 8001826:	f012 0f08 	tst.w	r2, #8
 800182a:	d00d      	beq.n	8001848 <DMA1_Stream0_IRQHandler+0xac>
		{
			if (__DMA1_Stream0_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 800182c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800182e:	b15b      	cbz	r3, 8001848 <DMA1_Stream0_IRQHandler+0xac>
			{
				__DMA1_Stream0_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001830:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CHTIF0;
 8001832:	4a1d      	ldr	r2, [pc, #116]	@ (80018a8 <DMA1_Stream0_IRQHandler+0x10c>)
 8001834:	6893      	ldr	r3, [r2, #8]
 8001836:	f043 0310 	orr.w	r3, r3, #16
 800183a:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream0_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800183c:	4b1c      	ldr	r3, [pc, #112]	@ (80018b0 <DMA1_Stream0_IRQHandler+0x114>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001842:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8001846:	d019      	beq.n	800187c <DMA1_Stream0_IRQHandler+0xe0>
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TCIF0)
 8001848:	4b18      	ldr	r3, [pc, #96]	@ (80018ac <DMA1_Stream0_IRQHandler+0x110>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f013 0f20 	tst.w	r3, #32
 8001850:	d013      	beq.n	800187a <DMA1_Stream0_IRQHandler+0xde>
	{
		if(__DMA1_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 8001852:	4b17      	ldr	r3, [pc, #92]	@ (80018b0 <DMA1_Stream0_IRQHandler+0x114>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	69da      	ldr	r2, [r3, #28]
 8001858:	f012 0f10 	tst.w	r2, #16
 800185c:	d00d      	beq.n	800187a <DMA1_Stream0_IRQHandler+0xde>
		{
			if (__DMA1_Stream0_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 800185e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001860:	b15b      	cbz	r3, 800187a <DMA1_Stream0_IRQHandler+0xde>
			{
				__DMA1_Stream0_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8001862:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTCIF0;
 8001864:	4a10      	ldr	r2, [pc, #64]	@ (80018a8 <DMA1_Stream0_IRQHandler+0x10c>)
 8001866:	6893      	ldr	r3, [r2, #8]
 8001868:	f043 0320 	orr.w	r3, r3, #32
 800186c:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream0_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800186e:	4b10      	ldr	r3, [pc, #64]	@ (80018b0 <DMA1_Stream0_IRQHandler+0x114>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001874:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8001878:	d00b      	beq.n	8001892 <DMA1_Stream0_IRQHandler+0xf6>
				}
			}
		}

	}
}
 800187a:	bd08      	pop	{r3, pc}
					if((__DMA1_Stream0_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800187c:	685a      	ldr	r2, [r3, #4]
 800187e:	6812      	ldr	r2, [r2, #0]
 8001880:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8001884:	d002      	beq.n	800188c <DMA1_Stream0_IRQHandler+0xf0>
						__DMA1_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001886:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001888:	4798      	blx	r3
 800188a:	e7dd      	b.n	8001848 <DMA1_Stream0_IRQHandler+0xac>
						__DMA1_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800188c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800188e:	4798      	blx	r3
 8001890:	e7da      	b.n	8001848 <DMA1_Stream0_IRQHandler+0xac>
					if((__DMA1_Stream0_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001892:	685a      	ldr	r2, [r3, #4]
 8001894:	6812      	ldr	r2, [r2, #0]
 8001896:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 800189a:	d002      	beq.n	80018a2 <DMA1_Stream0_IRQHandler+0x106>
						__DMA1_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800189c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800189e:	4798      	blx	r3
 80018a0:	e7eb      	b.n	800187a <DMA1_Stream0_IRQHandler+0xde>
						__DMA1_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80018a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018a4:	4798      	blx	r3
}
 80018a6:	e7e8      	b.n	800187a <DMA1_Stream0_IRQHandler+0xde>
 80018a8:	40026000 	.word	0x40026000
 80018ac:	20000400 	.word	0x20000400
 80018b0:	20000440 	.word	0x20000440

080018b4 <DMA1_Stream1_IRQHandler>:

void DMA1_Stream1_IRQHandler(void)
{
 80018b4:	b508      	push	{r3, lr}
	DMA_LISR = DMA1 -> LISR;
 80018b6:	4b42      	ldr	r3, [pc, #264]	@ (80019c0 <DMA1_Stream1_IRQHandler+0x10c>)
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	4b42      	ldr	r3, [pc, #264]	@ (80019c4 <DMA1_Stream1_IRQHandler+0x110>)
 80018bc:	601a      	str	r2, [r3, #0]

	if(DMA_LISR & DMA_LISR_FEIF1)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80018c4:	d00d      	beq.n	80018e2 <DMA1_Stream1_IRQHandler+0x2e>
	{
		if(__DMA1_Stream1_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 80018c6:	4b40      	ldr	r3, [pc, #256]	@ (80019c8 <DMA1_Stream1_IRQHandler+0x114>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	69da      	ldr	r2, [r3, #28]
 80018cc:	f012 0f80 	tst.w	r2, #128	@ 0x80
 80018d0:	d007      	beq.n	80018e2 <DMA1_Stream1_IRQHandler+0x2e>
		{
			if (__DMA1_Stream1_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80018d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018d4:	b12b      	cbz	r3, 80018e2 <DMA1_Stream1_IRQHandler+0x2e>
			{
				__DMA1_Stream1_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80018d6:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CFEIF1;
 80018d8:	4a39      	ldr	r2, [pc, #228]	@ (80019c0 <DMA1_Stream1_IRQHandler+0x10c>)
 80018da:	6893      	ldr	r3, [r2, #8]
 80018dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80018e0:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF1)
 80018e2:	4b38      	ldr	r3, [pc, #224]	@ (80019c4 <DMA1_Stream1_IRQHandler+0x110>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80018ea:	d00d      	beq.n	8001908 <DMA1_Stream1_IRQHandler+0x54>
	{
		if(__DMA1_Stream1_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 80018ec:	4b36      	ldr	r3, [pc, #216]	@ (80019c8 <DMA1_Stream1_IRQHandler+0x114>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	69da      	ldr	r2, [r3, #28]
 80018f2:	f012 0f02 	tst.w	r2, #2
 80018f6:	d007      	beq.n	8001908 <DMA1_Stream1_IRQHandler+0x54>
		{
			if (__DMA1_Stream1_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 80018f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fa:	b12b      	cbz	r3, 8001908 <DMA1_Stream1_IRQHandler+0x54>
			{
				__DMA1_Stream1_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 80018fc:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF1;
 80018fe:	4a30      	ldr	r2, [pc, #192]	@ (80019c0 <DMA1_Stream1_IRQHandler+0x10c>)
 8001900:	6893      	ldr	r3, [r2, #8]
 8001902:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001906:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF1)
 8001908:	4b2e      	ldr	r3, [pc, #184]	@ (80019c4 <DMA1_Stream1_IRQHandler+0x110>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8001910:	d00d      	beq.n	800192e <DMA1_Stream1_IRQHandler+0x7a>
	{
		if(__DMA1_Stream1_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 8001912:	4b2d      	ldr	r3, [pc, #180]	@ (80019c8 <DMA1_Stream1_IRQHandler+0x114>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	69da      	ldr	r2, [r3, #28]
 8001918:	f012 0f04 	tst.w	r2, #4
 800191c:	d007      	beq.n	800192e <DMA1_Stream1_IRQHandler+0x7a>
		{
			if (__DMA1_Stream1_Config__ -> ISR_Routines.Transfer_Error_ISR)
 800191e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001920:	b12b      	cbz	r3, 800192e <DMA1_Stream1_IRQHandler+0x7a>
			{
				__DMA1_Stream1_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001922:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTEIF1;
 8001924:	4a26      	ldr	r2, [pc, #152]	@ (80019c0 <DMA1_Stream1_IRQHandler+0x10c>)
 8001926:	6893      	ldr	r3, [r2, #8]
 8001928:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800192c:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF1)
 800192e:	4b25      	ldr	r3, [pc, #148]	@ (80019c4 <DMA1_Stream1_IRQHandler+0x110>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8001936:	d013      	beq.n	8001960 <DMA1_Stream1_IRQHandler+0xac>
	{
		if(__DMA1_Stream1_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 8001938:	4b23      	ldr	r3, [pc, #140]	@ (80019c8 <DMA1_Stream1_IRQHandler+0x114>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	69da      	ldr	r2, [r3, #28]
 800193e:	f012 0f08 	tst.w	r2, #8
 8001942:	d00d      	beq.n	8001960 <DMA1_Stream1_IRQHandler+0xac>
		{
			if (__DMA1_Stream1_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001944:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001946:	b15b      	cbz	r3, 8001960 <DMA1_Stream1_IRQHandler+0xac>
			{
				__DMA1_Stream1_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001948:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CHTIF1;
 800194a:	4a1d      	ldr	r2, [pc, #116]	@ (80019c0 <DMA1_Stream1_IRQHandler+0x10c>)
 800194c:	6893      	ldr	r3, [r2, #8]
 800194e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001952:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream1_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001954:	4b1c      	ldr	r3, [pc, #112]	@ (80019c8 <DMA1_Stream1_IRQHandler+0x114>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800195a:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 800195e:	d019      	beq.n	8001994 <DMA1_Stream1_IRQHandler+0xe0>
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TCIF1)
 8001960:	4b18      	ldr	r3, [pc, #96]	@ (80019c4 <DMA1_Stream1_IRQHandler+0x110>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8001968:	d013      	beq.n	8001992 <DMA1_Stream1_IRQHandler+0xde>
	{
		if(__DMA1_Stream1_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 800196a:	4b17      	ldr	r3, [pc, #92]	@ (80019c8 <DMA1_Stream1_IRQHandler+0x114>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	69da      	ldr	r2, [r3, #28]
 8001970:	f012 0f10 	tst.w	r2, #16
 8001974:	d00d      	beq.n	8001992 <DMA1_Stream1_IRQHandler+0xde>
		{
			if (__DMA1_Stream1_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001976:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001978:	b15b      	cbz	r3, 8001992 <DMA1_Stream1_IRQHandler+0xde>
			{
				__DMA1_Stream1_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 800197a:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTCIF1;
 800197c:	4a10      	ldr	r2, [pc, #64]	@ (80019c0 <DMA1_Stream1_IRQHandler+0x10c>)
 800197e:	6893      	ldr	r3, [r2, #8]
 8001980:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001984:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream1_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001986:	4b10      	ldr	r3, [pc, #64]	@ (80019c8 <DMA1_Stream1_IRQHandler+0x114>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800198c:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8001990:	d00b      	beq.n	80019aa <DMA1_Stream1_IRQHandler+0xf6>
					}
				}
			}
		}
	}
}
 8001992:	bd08      	pop	{r3, pc}
					if((__DMA1_Stream1_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001994:	685a      	ldr	r2, [r3, #4]
 8001996:	6812      	ldr	r2, [r2, #0]
 8001998:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 800199c:	d002      	beq.n	80019a4 <DMA1_Stream1_IRQHandler+0xf0>
						__DMA1_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800199e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80019a0:	4798      	blx	r3
 80019a2:	e7dd      	b.n	8001960 <DMA1_Stream1_IRQHandler+0xac>
						__DMA1_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80019a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019a6:	4798      	blx	r3
 80019a8:	e7da      	b.n	8001960 <DMA1_Stream1_IRQHandler+0xac>
					if((__DMA1_Stream1_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80019aa:	685a      	ldr	r2, [r3, #4]
 80019ac:	6812      	ldr	r2, [r2, #0]
 80019ae:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 80019b2:	d002      	beq.n	80019ba <DMA1_Stream1_IRQHandler+0x106>
						__DMA1_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80019b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80019b6:	4798      	blx	r3
 80019b8:	e7eb      	b.n	8001992 <DMA1_Stream1_IRQHandler+0xde>
						__DMA1_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80019ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019bc:	4798      	blx	r3
}
 80019be:	e7e8      	b.n	8001992 <DMA1_Stream1_IRQHandler+0xde>
 80019c0:	40026000 	.word	0x40026000
 80019c4:	20000400 	.word	0x20000400
 80019c8:	2000043c 	.word	0x2000043c

080019cc <DMA1_Stream2_IRQHandler>:


void DMA1_Stream2_IRQHandler(void)
{
 80019cc:	b508      	push	{r3, lr}
	DMA_LISR = DMA1 -> LISR;
 80019ce:	4b42      	ldr	r3, [pc, #264]	@ (8001ad8 <DMA1_Stream2_IRQHandler+0x10c>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	4b42      	ldr	r3, [pc, #264]	@ (8001adc <DMA1_Stream2_IRQHandler+0x110>)
 80019d4:	601a      	str	r2, [r3, #0]

	if(DMA_LISR & DMA_LISR_FEIF2)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80019dc:	d00d      	beq.n	80019fa <DMA1_Stream2_IRQHandler+0x2e>
	{
		if(__DMA1_Stream2_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 80019de:	4b40      	ldr	r3, [pc, #256]	@ (8001ae0 <DMA1_Stream2_IRQHandler+0x114>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	69da      	ldr	r2, [r3, #28]
 80019e4:	f012 0f80 	tst.w	r2, #128	@ 0x80
 80019e8:	d007      	beq.n	80019fa <DMA1_Stream2_IRQHandler+0x2e>
		{
			if (__DMA1_Stream2_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80019ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019ec:	b12b      	cbz	r3, 80019fa <DMA1_Stream2_IRQHandler+0x2e>
			{
				__DMA1_Stream2_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80019ee:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CFEIF2;
 80019f0:	4a39      	ldr	r2, [pc, #228]	@ (8001ad8 <DMA1_Stream2_IRQHandler+0x10c>)
 80019f2:	6893      	ldr	r3, [r2, #8]
 80019f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019f8:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF2)
 80019fa:	4b38      	ldr	r3, [pc, #224]	@ (8001adc <DMA1_Stream2_IRQHandler+0x110>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 8001a02:	d00d      	beq.n	8001a20 <DMA1_Stream2_IRQHandler+0x54>
	{
		if(__DMA1_Stream2_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 8001a04:	4b36      	ldr	r3, [pc, #216]	@ (8001ae0 <DMA1_Stream2_IRQHandler+0x114>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	69da      	ldr	r2, [r3, #28]
 8001a0a:	f012 0f02 	tst.w	r2, #2
 8001a0e:	d007      	beq.n	8001a20 <DMA1_Stream2_IRQHandler+0x54>
		{
			if (__DMA1_Stream2_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8001a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a12:	b12b      	cbz	r3, 8001a20 <DMA1_Stream2_IRQHandler+0x54>
			{
				__DMA1_Stream2_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001a14:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF2;
 8001a16:	4a30      	ldr	r2, [pc, #192]	@ (8001ad8 <DMA1_Stream2_IRQHandler+0x10c>)
 8001a18:	6893      	ldr	r3, [r2, #8]
 8001a1a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a1e:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF2)
 8001a20:	4b2e      	ldr	r3, [pc, #184]	@ (8001adc <DMA1_Stream2_IRQHandler+0x110>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8001a28:	d00d      	beq.n	8001a46 <DMA1_Stream2_IRQHandler+0x7a>
	{
		if(__DMA1_Stream2_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 8001a2a:	4b2d      	ldr	r3, [pc, #180]	@ (8001ae0 <DMA1_Stream2_IRQHandler+0x114>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	69da      	ldr	r2, [r3, #28]
 8001a30:	f012 0f04 	tst.w	r2, #4
 8001a34:	d007      	beq.n	8001a46 <DMA1_Stream2_IRQHandler+0x7a>
		{
			if(__DMA1_Stream2_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
			{
				if (__DMA1_Stream2_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001a36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a38:	b12b      	cbz	r3, 8001a46 <DMA1_Stream2_IRQHandler+0x7a>
				{
					__DMA1_Stream2_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001a3a:	4798      	blx	r3
					DMA1 -> LIFCR |= DMA_LIFCR_CTEIF2;
 8001a3c:	4a26      	ldr	r2, [pc, #152]	@ (8001ad8 <DMA1_Stream2_IRQHandler+0x10c>)
 8001a3e:	6893      	ldr	r3, [r2, #8]
 8001a40:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001a44:	6093      	str	r3, [r2, #8]
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF2)
 8001a46:	4b25      	ldr	r3, [pc, #148]	@ (8001adc <DMA1_Stream2_IRQHandler+0x110>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8001a4e:	d013      	beq.n	8001a78 <DMA1_Stream2_IRQHandler+0xac>
	{
		if(__DMA1_Stream2_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 8001a50:	4b23      	ldr	r3, [pc, #140]	@ (8001ae0 <DMA1_Stream2_IRQHandler+0x114>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	69da      	ldr	r2, [r3, #28]
 8001a56:	f012 0f08 	tst.w	r2, #8
 8001a5a:	d00d      	beq.n	8001a78 <DMA1_Stream2_IRQHandler+0xac>
		{
			if (__DMA1_Stream2_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001a5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a5e:	b15b      	cbz	r3, 8001a78 <DMA1_Stream2_IRQHandler+0xac>
			{
				__DMA1_Stream2_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001a60:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CHTIF2;
 8001a62:	4a1d      	ldr	r2, [pc, #116]	@ (8001ad8 <DMA1_Stream2_IRQHandler+0x10c>)
 8001a64:	6893      	ldr	r3, [r2, #8]
 8001a66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001a6a:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream2_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001a6c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ae0 <DMA1_Stream2_IRQHandler+0x114>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001a72:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8001a76:	d019      	beq.n	8001aac <DMA1_Stream2_IRQHandler+0xe0>
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TCIF2)
 8001a78:	4b18      	ldr	r3, [pc, #96]	@ (8001adc <DMA1_Stream2_IRQHandler+0x110>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 8001a80:	d013      	beq.n	8001aaa <DMA1_Stream2_IRQHandler+0xde>
	{
		if(__DMA1_Stream2_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 8001a82:	4b17      	ldr	r3, [pc, #92]	@ (8001ae0 <DMA1_Stream2_IRQHandler+0x114>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	69da      	ldr	r2, [r3, #28]
 8001a88:	f012 0f10 	tst.w	r2, #16
 8001a8c:	d00d      	beq.n	8001aaa <DMA1_Stream2_IRQHandler+0xde>
		{
			if (__DMA1_Stream2_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001a8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a90:	b15b      	cbz	r3, 8001aaa <DMA1_Stream2_IRQHandler+0xde>
			{
				__DMA1_Stream2_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8001a92:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTCIF2;
 8001a94:	4a10      	ldr	r2, [pc, #64]	@ (8001ad8 <DMA1_Stream2_IRQHandler+0x10c>)
 8001a96:	6893      	ldr	r3, [r2, #8]
 8001a98:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a9c:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream2_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001a9e:	4b10      	ldr	r3, [pc, #64]	@ (8001ae0 <DMA1_Stream2_IRQHandler+0x114>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001aa4:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8001aa8:	d00b      	beq.n	8001ac2 <DMA1_Stream2_IRQHandler+0xf6>
					}
				}
			}
		}
	}
}
 8001aaa:	bd08      	pop	{r3, pc}
					if((__DMA1_Stream2_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001aac:	685a      	ldr	r2, [r3, #4]
 8001aae:	6812      	ldr	r2, [r2, #0]
 8001ab0:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8001ab4:	d002      	beq.n	8001abc <DMA1_Stream2_IRQHandler+0xf0>
						__DMA1_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001ab6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ab8:	4798      	blx	r3
 8001aba:	e7dd      	b.n	8001a78 <DMA1_Stream2_IRQHandler+0xac>
						__DMA1_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001abc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001abe:	4798      	blx	r3
 8001ac0:	e7da      	b.n	8001a78 <DMA1_Stream2_IRQHandler+0xac>
					if((__DMA1_Stream2_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001ac2:	685a      	ldr	r2, [r3, #4]
 8001ac4:	6812      	ldr	r2, [r2, #0]
 8001ac6:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8001aca:	d002      	beq.n	8001ad2 <DMA1_Stream2_IRQHandler+0x106>
						__DMA1_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001acc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ace:	4798      	blx	r3
 8001ad0:	e7eb      	b.n	8001aaa <DMA1_Stream2_IRQHandler+0xde>
						__DMA1_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001ad2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ad4:	4798      	blx	r3
}
 8001ad6:	e7e8      	b.n	8001aaa <DMA1_Stream2_IRQHandler+0xde>
 8001ad8:	40026000 	.word	0x40026000
 8001adc:	20000400 	.word	0x20000400
 8001ae0:	20000438 	.word	0x20000438

08001ae4 <DMA1_Stream3_IRQHandler>:

void DMA1_Stream3_IRQHandler(void)
{
 8001ae4:	b508      	push	{r3, lr}
	DMA_LISR = DMA1 -> LISR;
 8001ae6:	4b42      	ldr	r3, [pc, #264]	@ (8001bf0 <DMA1_Stream3_IRQHandler+0x10c>)
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	4b42      	ldr	r3, [pc, #264]	@ (8001bf4 <DMA1_Stream3_IRQHandler+0x110>)
 8001aec:	601a      	str	r2, [r3, #0]

	if(DMA_LISR & DMA_LISR_FEIF3)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001af4:	d00d      	beq.n	8001b12 <DMA1_Stream3_IRQHandler+0x2e>
	{
		if(__DMA1_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 8001af6:	4b40      	ldr	r3, [pc, #256]	@ (8001bf8 <DMA1_Stream3_IRQHandler+0x114>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	69da      	ldr	r2, [r3, #28]
 8001afc:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8001b00:	d007      	beq.n	8001b12 <DMA1_Stream3_IRQHandler+0x2e>
		{
			if (__DMA1_Stream3_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001b02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b04:	b12b      	cbz	r3, 8001b12 <DMA1_Stream3_IRQHandler+0x2e>
			{
				__DMA1_Stream3_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001b06:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CFEIF3;
 8001b08:	4a39      	ldr	r2, [pc, #228]	@ (8001bf0 <DMA1_Stream3_IRQHandler+0x10c>)
 8001b0a:	6893      	ldr	r3, [r2, #8]
 8001b0c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001b10:	6093      	str	r3, [r2, #8]
			}
		}

	}

	if(DMA_LISR & DMA_LISR_DMEIF3)
 8001b12:	4b38      	ldr	r3, [pc, #224]	@ (8001bf4 <DMA1_Stream3_IRQHandler+0x110>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8001b1a:	d00d      	beq.n	8001b38 <DMA1_Stream3_IRQHandler+0x54>
	{
		if(__DMA1_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 8001b1c:	4b36      	ldr	r3, [pc, #216]	@ (8001bf8 <DMA1_Stream3_IRQHandler+0x114>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	69da      	ldr	r2, [r3, #28]
 8001b22:	f012 0f02 	tst.w	r2, #2
 8001b26:	d007      	beq.n	8001b38 <DMA1_Stream3_IRQHandler+0x54>
		{
			if (__DMA1_Stream3_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8001b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2a:	b12b      	cbz	r3, 8001b38 <DMA1_Stream3_IRQHandler+0x54>
			{
				__DMA1_Stream3_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001b2c:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF3;
 8001b2e:	4a30      	ldr	r2, [pc, #192]	@ (8001bf0 <DMA1_Stream3_IRQHandler+0x10c>)
 8001b30:	6893      	ldr	r3, [r2, #8]
 8001b32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b36:	6093      	str	r3, [r2, #8]
			}
		}

	}

	if(DMA_LISR & DMA_LISR_TEIF3)
 8001b38:	4b2e      	ldr	r3, [pc, #184]	@ (8001bf4 <DMA1_Stream3_IRQHandler+0x110>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001b40:	d00d      	beq.n	8001b5e <DMA1_Stream3_IRQHandler+0x7a>
	{
		if(__DMA1_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 8001b42:	4b2d      	ldr	r3, [pc, #180]	@ (8001bf8 <DMA1_Stream3_IRQHandler+0x114>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	69da      	ldr	r2, [r3, #28]
 8001b48:	f012 0f04 	tst.w	r2, #4
 8001b4c:	d007      	beq.n	8001b5e <DMA1_Stream3_IRQHandler+0x7a>
		{
			if (__DMA1_Stream3_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001b4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b50:	b12b      	cbz	r3, 8001b5e <DMA1_Stream3_IRQHandler+0x7a>
			{
				__DMA1_Stream3_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001b52:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTEIF3;
 8001b54:	4a26      	ldr	r2, [pc, #152]	@ (8001bf0 <DMA1_Stream3_IRQHandler+0x10c>)
 8001b56:	6893      	ldr	r3, [r2, #8]
 8001b58:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001b5c:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF3)
 8001b5e:	4b25      	ldr	r3, [pc, #148]	@ (8001bf4 <DMA1_Stream3_IRQHandler+0x110>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f013 6f80 	tst.w	r3, #67108864	@ 0x4000000
 8001b66:	d013      	beq.n	8001b90 <DMA1_Stream3_IRQHandler+0xac>
	{
		if(__DMA1_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 8001b68:	4b23      	ldr	r3, [pc, #140]	@ (8001bf8 <DMA1_Stream3_IRQHandler+0x114>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	69da      	ldr	r2, [r3, #28]
 8001b6e:	f012 0f08 	tst.w	r2, #8
 8001b72:	d00d      	beq.n	8001b90 <DMA1_Stream3_IRQHandler+0xac>
		{
			if (__DMA1_Stream3_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001b74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b76:	b15b      	cbz	r3, 8001b90 <DMA1_Stream3_IRQHandler+0xac>
			{
				__DMA1_Stream3_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001b78:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CHTIF3;
 8001b7a:	4a1d      	ldr	r2, [pc, #116]	@ (8001bf0 <DMA1_Stream3_IRQHandler+0x10c>)
 8001b7c:	6893      	ldr	r3, [r2, #8]
 8001b7e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001b82:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream3_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001b84:	4b1c      	ldr	r3, [pc, #112]	@ (8001bf8 <DMA1_Stream3_IRQHandler+0x114>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001b8a:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8001b8e:	d019      	beq.n	8001bc4 <DMA1_Stream3_IRQHandler+0xe0>
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TCIF3)
 8001b90:	4b18      	ldr	r3, [pc, #96]	@ (8001bf4 <DMA1_Stream3_IRQHandler+0x110>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8001b98:	d013      	beq.n	8001bc2 <DMA1_Stream3_IRQHandler+0xde>
	{
		if(__DMA1_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 8001b9a:	4b17      	ldr	r3, [pc, #92]	@ (8001bf8 <DMA1_Stream3_IRQHandler+0x114>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	69da      	ldr	r2, [r3, #28]
 8001ba0:	f012 0f10 	tst.w	r2, #16
 8001ba4:	d00d      	beq.n	8001bc2 <DMA1_Stream3_IRQHandler+0xde>
		{
			if (__DMA1_Stream3_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001ba6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ba8:	b15b      	cbz	r3, 8001bc2 <DMA1_Stream3_IRQHandler+0xde>
			{
				__DMA1_Stream3_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8001baa:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTCIF3;
 8001bac:	4a10      	ldr	r2, [pc, #64]	@ (8001bf0 <DMA1_Stream3_IRQHandler+0x10c>)
 8001bae:	6893      	ldr	r3, [r2, #8]
 8001bb0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001bb4:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream3_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001bb6:	4b10      	ldr	r3, [pc, #64]	@ (8001bf8 <DMA1_Stream3_IRQHandler+0x114>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001bbc:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8001bc0:	d00b      	beq.n	8001bda <DMA1_Stream3_IRQHandler+0xf6>
					}
				}
			}
		}
	}
}
 8001bc2:	bd08      	pop	{r3, pc}
					if((__DMA1_Stream3_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001bc4:	685a      	ldr	r2, [r3, #4]
 8001bc6:	6812      	ldr	r2, [r2, #0]
 8001bc8:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8001bcc:	d002      	beq.n	8001bd4 <DMA1_Stream3_IRQHandler+0xf0>
						__DMA1_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001bce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bd0:	4798      	blx	r3
 8001bd2:	e7dd      	b.n	8001b90 <DMA1_Stream3_IRQHandler+0xac>
						__DMA1_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001bd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bd6:	4798      	blx	r3
 8001bd8:	e7da      	b.n	8001b90 <DMA1_Stream3_IRQHandler+0xac>
					if((__DMA1_Stream3_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001bda:	685a      	ldr	r2, [r3, #4]
 8001bdc:	6812      	ldr	r2, [r2, #0]
 8001bde:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8001be2:	d002      	beq.n	8001bea <DMA1_Stream3_IRQHandler+0x106>
						__DMA1_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001be4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001be6:	4798      	blx	r3
 8001be8:	e7eb      	b.n	8001bc2 <DMA1_Stream3_IRQHandler+0xde>
						__DMA1_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001bea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bec:	4798      	blx	r3
}
 8001bee:	e7e8      	b.n	8001bc2 <DMA1_Stream3_IRQHandler+0xde>
 8001bf0:	40026000 	.word	0x40026000
 8001bf4:	20000400 	.word	0x20000400
 8001bf8:	20000434 	.word	0x20000434

08001bfc <DMA1_Stream4_IRQHandler>:

void DMA1_Stream4_IRQHandler(void)
{
 8001bfc:	b508      	push	{r3, lr}
	DMA_HISR = DMA1 -> HISR;
 8001bfe:	4b38      	ldr	r3, [pc, #224]	@ (8001ce0 <DMA1_Stream4_IRQHandler+0xe4>)
 8001c00:	685a      	ldr	r2, [r3, #4]
 8001c02:	4b38      	ldr	r3, [pc, #224]	@ (8001ce4 <DMA1_Stream4_IRQHandler+0xe8>)
 8001c04:	601a      	str	r2, [r3, #0]

	if(DMA_HISR & DMA_HISR_FEIF4)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f013 0f01 	tst.w	r3, #1
 8001c0c:	d009      	beq.n	8001c22 <DMA1_Stream4_IRQHandler+0x26>
	{
		if (__DMA1_Stream4_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001c0e:	4b36      	ldr	r3, [pc, #216]	@ (8001ce8 <DMA1_Stream4_IRQHandler+0xec>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c14:	b12b      	cbz	r3, 8001c22 <DMA1_Stream4_IRQHandler+0x26>
		{
			__DMA1_Stream4_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001c16:	4798      	blx	r3
			DMA1 -> LIFCR |= DMA_HIFCR_CFEIF5;
 8001c18:	4a31      	ldr	r2, [pc, #196]	@ (8001ce0 <DMA1_Stream4_IRQHandler+0xe4>)
 8001c1a:	6893      	ldr	r3, [r2, #8]
 8001c1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c20:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF4)
 8001c22:	4b30      	ldr	r3, [pc, #192]	@ (8001ce4 <DMA1_Stream4_IRQHandler+0xe8>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f013 0f04 	tst.w	r3, #4
 8001c2a:	d009      	beq.n	8001c40 <DMA1_Stream4_IRQHandler+0x44>
	{
		if (__DMA1_Stream4_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8001c2c:	4b2e      	ldr	r3, [pc, #184]	@ (8001ce8 <DMA1_Stream4_IRQHandler+0xec>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c32:	b12b      	cbz	r3, 8001c40 <DMA1_Stream4_IRQHandler+0x44>
		{
			__DMA1_Stream4_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001c34:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF4;
 8001c36:	4a2a      	ldr	r2, [pc, #168]	@ (8001ce0 <DMA1_Stream4_IRQHandler+0xe4>)
 8001c38:	68d3      	ldr	r3, [r2, #12]
 8001c3a:	f043 0304 	orr.w	r3, r3, #4
 8001c3e:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF4)
 8001c40:	4b28      	ldr	r3, [pc, #160]	@ (8001ce4 <DMA1_Stream4_IRQHandler+0xe8>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f013 0f08 	tst.w	r3, #8
 8001c48:	d009      	beq.n	8001c5e <DMA1_Stream4_IRQHandler+0x62>
	{
		if (__DMA1_Stream4_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001c4a:	4b27      	ldr	r3, [pc, #156]	@ (8001ce8 <DMA1_Stream4_IRQHandler+0xec>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c50:	b12b      	cbz	r3, 8001c5e <DMA1_Stream4_IRQHandler+0x62>
		{
			__DMA1_Stream4_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001c52:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTEIF4;
 8001c54:	4a22      	ldr	r2, [pc, #136]	@ (8001ce0 <DMA1_Stream4_IRQHandler+0xe4>)
 8001c56:	68d3      	ldr	r3, [r2, #12]
 8001c58:	f043 0308 	orr.w	r3, r3, #8
 8001c5c:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF4)
 8001c5e:	4b21      	ldr	r3, [pc, #132]	@ (8001ce4 <DMA1_Stream4_IRQHandler+0xe8>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f013 0f10 	tst.w	r3, #16
 8001c66:	d00f      	beq.n	8001c88 <DMA1_Stream4_IRQHandler+0x8c>
	{
		if (__DMA1_Stream4_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001c68:	4b1f      	ldr	r3, [pc, #124]	@ (8001ce8 <DMA1_Stream4_IRQHandler+0xec>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c6e:	b15b      	cbz	r3, 8001c88 <DMA1_Stream4_IRQHandler+0x8c>
		{
			__DMA1_Stream4_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001c70:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CHTIF4;
 8001c72:	4a1b      	ldr	r2, [pc, #108]	@ (8001ce0 <DMA1_Stream4_IRQHandler+0xe4>)
 8001c74:	68d3      	ldr	r3, [r2, #12]
 8001c76:	f043 0310 	orr.w	r3, r3, #16
 8001c7a:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream4_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001c7c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ce8 <DMA1_Stream4_IRQHandler+0xec>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001c82:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8001c86:	d015      	beq.n	8001cb4 <DMA1_Stream4_IRQHandler+0xb8>
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF4)
 8001c88:	4b16      	ldr	r3, [pc, #88]	@ (8001ce4 <DMA1_Stream4_IRQHandler+0xe8>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f013 0f20 	tst.w	r3, #32
 8001c90:	d00f      	beq.n	8001cb2 <DMA1_Stream4_IRQHandler+0xb6>
	{
		if (__DMA1_Stream4_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001c92:	4b15      	ldr	r3, [pc, #84]	@ (8001ce8 <DMA1_Stream4_IRQHandler+0xec>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c98:	b15b      	cbz	r3, 8001cb2 <DMA1_Stream4_IRQHandler+0xb6>
		{
			__DMA1_Stream4_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8001c9a:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTCIF4;
 8001c9c:	4a10      	ldr	r2, [pc, #64]	@ (8001ce0 <DMA1_Stream4_IRQHandler+0xe4>)
 8001c9e:	68d3      	ldr	r3, [r2, #12]
 8001ca0:	f043 0320 	orr.w	r3, r3, #32
 8001ca4:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream4_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001ca6:	4b10      	ldr	r3, [pc, #64]	@ (8001ce8 <DMA1_Stream4_IRQHandler+0xec>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001cac:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8001cb0:	d00b      	beq.n	8001cca <DMA1_Stream4_IRQHandler+0xce>
					__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 8001cb2:	bd08      	pop	{r3, pc}
				if((__DMA1_Stream4_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001cb4:	685a      	ldr	r2, [r3, #4]
 8001cb6:	6812      	ldr	r2, [r2, #0]
 8001cb8:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8001cbc:	d002      	beq.n	8001cc4 <DMA1_Stream4_IRQHandler+0xc8>
					__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001cbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cc0:	4798      	blx	r3
 8001cc2:	e7e1      	b.n	8001c88 <DMA1_Stream4_IRQHandler+0x8c>
					__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001cc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cc6:	4798      	blx	r3
 8001cc8:	e7de      	b.n	8001c88 <DMA1_Stream4_IRQHandler+0x8c>
				if((__DMA1_Stream4_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001cca:	685a      	ldr	r2, [r3, #4]
 8001ccc:	6812      	ldr	r2, [r2, #0]
 8001cce:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8001cd2:	d002      	beq.n	8001cda <DMA1_Stream4_IRQHandler+0xde>
					__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001cd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cd6:	4798      	blx	r3
 8001cd8:	e7eb      	b.n	8001cb2 <DMA1_Stream4_IRQHandler+0xb6>
					__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001cda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cdc:	4798      	blx	r3
}
 8001cde:	e7e8      	b.n	8001cb2 <DMA1_Stream4_IRQHandler+0xb6>
 8001ce0:	40026000 	.word	0x40026000
 8001ce4:	200003fc 	.word	0x200003fc
 8001ce8:	20000430 	.word	0x20000430

08001cec <DMA1_Stream5_IRQHandler>:




void DMA1_Stream5_IRQHandler(void)
{
 8001cec:	b508      	push	{r3, lr}
	DMA_HISR = DMA1 -> HISR;
 8001cee:	4b38      	ldr	r3, [pc, #224]	@ (8001dd0 <DMA1_Stream5_IRQHandler+0xe4>)
 8001cf0:	685a      	ldr	r2, [r3, #4]
 8001cf2:	4b38      	ldr	r3, [pc, #224]	@ (8001dd4 <DMA1_Stream5_IRQHandler+0xe8>)
 8001cf4:	601a      	str	r2, [r3, #0]

	if(DMA_HISR & DMA_HISR_FEIF5)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8001cfc:	d009      	beq.n	8001d12 <DMA1_Stream5_IRQHandler+0x26>
	{
		if (__DMA1_Stream5_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001cfe:	4b36      	ldr	r3, [pc, #216]	@ (8001dd8 <DMA1_Stream5_IRQHandler+0xec>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d04:	b12b      	cbz	r3, 8001d12 <DMA1_Stream5_IRQHandler+0x26>
		{
			__DMA1_Stream5_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001d06:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CFEIF5;
 8001d08:	4a31      	ldr	r2, [pc, #196]	@ (8001dd0 <DMA1_Stream5_IRQHandler+0xe4>)
 8001d0a:	68d3      	ldr	r3, [r2, #12]
 8001d0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d10:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF5)
 8001d12:	4b30      	ldr	r3, [pc, #192]	@ (8001dd4 <DMA1_Stream5_IRQHandler+0xe8>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001d1a:	d009      	beq.n	8001d30 <DMA1_Stream5_IRQHandler+0x44>
	{
		if (__DMA1_Stream5_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8001d1c:	4b2e      	ldr	r3, [pc, #184]	@ (8001dd8 <DMA1_Stream5_IRQHandler+0xec>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d22:	b12b      	cbz	r3, 8001d30 <DMA1_Stream5_IRQHandler+0x44>
		{
			__DMA1_Stream5_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001d24:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF5;
 8001d26:	4a2a      	ldr	r2, [pc, #168]	@ (8001dd0 <DMA1_Stream5_IRQHandler+0xe4>)
 8001d28:	68d3      	ldr	r3, [r2, #12]
 8001d2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d2e:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF5)
 8001d30:	4b28      	ldr	r3, [pc, #160]	@ (8001dd4 <DMA1_Stream5_IRQHandler+0xe8>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8001d38:	d009      	beq.n	8001d4e <DMA1_Stream5_IRQHandler+0x62>
	{
		if (__DMA1_Stream5_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001d3a:	4b27      	ldr	r3, [pc, #156]	@ (8001dd8 <DMA1_Stream5_IRQHandler+0xec>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d40:	b12b      	cbz	r3, 8001d4e <DMA1_Stream5_IRQHandler+0x62>
		{
			__DMA1_Stream5_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001d42:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTEIF5;
 8001d44:	4a22      	ldr	r2, [pc, #136]	@ (8001dd0 <DMA1_Stream5_IRQHandler+0xe4>)
 8001d46:	68d3      	ldr	r3, [r2, #12]
 8001d48:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d4c:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF5)
 8001d4e:	4b21      	ldr	r3, [pc, #132]	@ (8001dd4 <DMA1_Stream5_IRQHandler+0xe8>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8001d56:	d00f      	beq.n	8001d78 <DMA1_Stream5_IRQHandler+0x8c>
	{
		if (__DMA1_Stream5_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001d58:	4b1f      	ldr	r3, [pc, #124]	@ (8001dd8 <DMA1_Stream5_IRQHandler+0xec>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d5e:	b15b      	cbz	r3, 8001d78 <DMA1_Stream5_IRQHandler+0x8c>
		{
			__DMA1_Stream5_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001d60:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CHTIF5;
 8001d62:	4a1b      	ldr	r2, [pc, #108]	@ (8001dd0 <DMA1_Stream5_IRQHandler+0xe4>)
 8001d64:	68d3      	ldr	r3, [r2, #12]
 8001d66:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d6a:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream5_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001d6c:	4b1a      	ldr	r3, [pc, #104]	@ (8001dd8 <DMA1_Stream5_IRQHandler+0xec>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001d72:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8001d76:	d015      	beq.n	8001da4 <DMA1_Stream5_IRQHandler+0xb8>
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF5)
 8001d78:	4b16      	ldr	r3, [pc, #88]	@ (8001dd4 <DMA1_Stream5_IRQHandler+0xe8>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8001d80:	d00f      	beq.n	8001da2 <DMA1_Stream5_IRQHandler+0xb6>
	{
		if (__DMA1_Stream5_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001d82:	4b15      	ldr	r3, [pc, #84]	@ (8001dd8 <DMA1_Stream5_IRQHandler+0xec>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d88:	b15b      	cbz	r3, 8001da2 <DMA1_Stream5_IRQHandler+0xb6>
		{
			__DMA1_Stream5_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8001d8a:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTCIF5;
 8001d8c:	4a10      	ldr	r2, [pc, #64]	@ (8001dd0 <DMA1_Stream5_IRQHandler+0xe4>)
 8001d8e:	68d3      	ldr	r3, [r2, #12]
 8001d90:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001d94:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream5_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001d96:	4b10      	ldr	r3, [pc, #64]	@ (8001dd8 <DMA1_Stream5_IRQHandler+0xec>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001d9c:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8001da0:	d00b      	beq.n	8001dba <DMA1_Stream5_IRQHandler+0xce>
					__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 8001da2:	bd08      	pop	{r3, pc}
				if((__DMA1_Stream5_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001da4:	685a      	ldr	r2, [r3, #4]
 8001da6:	6812      	ldr	r2, [r2, #0]
 8001da8:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8001dac:	d002      	beq.n	8001db4 <DMA1_Stream5_IRQHandler+0xc8>
					__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001dae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001db0:	4798      	blx	r3
 8001db2:	e7e1      	b.n	8001d78 <DMA1_Stream5_IRQHandler+0x8c>
					__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001db4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001db6:	4798      	blx	r3
 8001db8:	e7de      	b.n	8001d78 <DMA1_Stream5_IRQHandler+0x8c>
				if((__DMA1_Stream5_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001dba:	685a      	ldr	r2, [r3, #4]
 8001dbc:	6812      	ldr	r2, [r2, #0]
 8001dbe:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8001dc2:	d002      	beq.n	8001dca <DMA1_Stream5_IRQHandler+0xde>
					__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001dc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001dc6:	4798      	blx	r3
 8001dc8:	e7eb      	b.n	8001da2 <DMA1_Stream5_IRQHandler+0xb6>
					__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001dca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dcc:	4798      	blx	r3
}
 8001dce:	e7e8      	b.n	8001da2 <DMA1_Stream5_IRQHandler+0xb6>
 8001dd0:	40026000 	.word	0x40026000
 8001dd4:	200003fc 	.word	0x200003fc
 8001dd8:	2000042c 	.word	0x2000042c

08001ddc <DMA1_Stream6_IRQHandler>:



void DMA1_Stream6_IRQHandler(void)
{
 8001ddc:	b508      	push	{r3, lr}
	DMA_HISR = DMA1 -> HISR;
 8001dde:	4b38      	ldr	r3, [pc, #224]	@ (8001ec0 <DMA1_Stream6_IRQHandler+0xe4>)
 8001de0:	685a      	ldr	r2, [r3, #4]
 8001de2:	4b38      	ldr	r3, [pc, #224]	@ (8001ec4 <DMA1_Stream6_IRQHandler+0xe8>)
 8001de4:	601a      	str	r2, [r3, #0]

	if(DMA_HISR & DMA_HISR_FEIF6)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8001dec:	d009      	beq.n	8001e02 <DMA1_Stream6_IRQHandler+0x26>
	{
		if (__DMA1_Stream6_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001dee:	4b36      	ldr	r3, [pc, #216]	@ (8001ec8 <DMA1_Stream6_IRQHandler+0xec>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001df4:	b12b      	cbz	r3, 8001e02 <DMA1_Stream6_IRQHandler+0x26>
		{
			__DMA1_Stream6_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001df6:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CFEIF6;
 8001df8:	4a31      	ldr	r2, [pc, #196]	@ (8001ec0 <DMA1_Stream6_IRQHandler+0xe4>)
 8001dfa:	68d3      	ldr	r3, [r2, #12]
 8001dfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e00:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF6)
 8001e02:	4b30      	ldr	r3, [pc, #192]	@ (8001ec4 <DMA1_Stream6_IRQHandler+0xe8>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 8001e0a:	d009      	beq.n	8001e20 <DMA1_Stream6_IRQHandler+0x44>
	{
		if (__DMA1_Stream6_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8001e0c:	4b2e      	ldr	r3, [pc, #184]	@ (8001ec8 <DMA1_Stream6_IRQHandler+0xec>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e12:	b12b      	cbz	r3, 8001e20 <DMA1_Stream6_IRQHandler+0x44>
		{
			__DMA1_Stream6_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001e14:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF6;
 8001e16:	4a2a      	ldr	r2, [pc, #168]	@ (8001ec0 <DMA1_Stream6_IRQHandler+0xe4>)
 8001e18:	68d3      	ldr	r3, [r2, #12]
 8001e1a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e1e:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF6)
 8001e20:	4b28      	ldr	r3, [pc, #160]	@ (8001ec4 <DMA1_Stream6_IRQHandler+0xe8>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8001e28:	d009      	beq.n	8001e3e <DMA1_Stream6_IRQHandler+0x62>
	{
		if (__DMA1_Stream6_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001e2a:	4b27      	ldr	r3, [pc, #156]	@ (8001ec8 <DMA1_Stream6_IRQHandler+0xec>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e30:	b12b      	cbz	r3, 8001e3e <DMA1_Stream6_IRQHandler+0x62>
		{
			__DMA1_Stream6_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001e32:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTEIF6;
 8001e34:	4a22      	ldr	r2, [pc, #136]	@ (8001ec0 <DMA1_Stream6_IRQHandler+0xe4>)
 8001e36:	68d3      	ldr	r3, [r2, #12]
 8001e38:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001e3c:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF6)
 8001e3e:	4b21      	ldr	r3, [pc, #132]	@ (8001ec4 <DMA1_Stream6_IRQHandler+0xe8>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8001e46:	d00f      	beq.n	8001e68 <DMA1_Stream6_IRQHandler+0x8c>
	{
		if (__DMA1_Stream6_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001e48:	4b1f      	ldr	r3, [pc, #124]	@ (8001ec8 <DMA1_Stream6_IRQHandler+0xec>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e4e:	b15b      	cbz	r3, 8001e68 <DMA1_Stream6_IRQHandler+0x8c>
		{
			__DMA1_Stream6_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001e50:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CHTIF6;
 8001e52:	4a1b      	ldr	r2, [pc, #108]	@ (8001ec0 <DMA1_Stream6_IRQHandler+0xe4>)
 8001e54:	68d3      	ldr	r3, [r2, #12]
 8001e56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001e5a:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream6_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001e5c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ec8 <DMA1_Stream6_IRQHandler+0xec>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001e62:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8001e66:	d015      	beq.n	8001e94 <DMA1_Stream6_IRQHandler+0xb8>
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF6)
 8001e68:	4b16      	ldr	r3, [pc, #88]	@ (8001ec4 <DMA1_Stream6_IRQHandler+0xe8>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 8001e70:	d00f      	beq.n	8001e92 <DMA1_Stream6_IRQHandler+0xb6>
	{
		if (__DMA1_Stream6_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001e72:	4b15      	ldr	r3, [pc, #84]	@ (8001ec8 <DMA1_Stream6_IRQHandler+0xec>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e78:	b15b      	cbz	r3, 8001e92 <DMA1_Stream6_IRQHandler+0xb6>
		{
			__DMA1_Stream6_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8001e7a:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTCIF6;
 8001e7c:	4a10      	ldr	r2, [pc, #64]	@ (8001ec0 <DMA1_Stream6_IRQHandler+0xe4>)
 8001e7e:	68d3      	ldr	r3, [r2, #12]
 8001e80:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e84:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream6_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001e86:	4b10      	ldr	r3, [pc, #64]	@ (8001ec8 <DMA1_Stream6_IRQHandler+0xec>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001e8c:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8001e90:	d00b      	beq.n	8001eaa <DMA1_Stream6_IRQHandler+0xce>
					__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 8001e92:	bd08      	pop	{r3, pc}
				if((__DMA1_Stream6_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001e94:	685a      	ldr	r2, [r3, #4]
 8001e96:	6812      	ldr	r2, [r2, #0]
 8001e98:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8001e9c:	d002      	beq.n	8001ea4 <DMA1_Stream6_IRQHandler+0xc8>
					__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001e9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ea0:	4798      	blx	r3
 8001ea2:	e7e1      	b.n	8001e68 <DMA1_Stream6_IRQHandler+0x8c>
					__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001ea4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ea6:	4798      	blx	r3
 8001ea8:	e7de      	b.n	8001e68 <DMA1_Stream6_IRQHandler+0x8c>
				if((__DMA1_Stream6_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001eaa:	685a      	ldr	r2, [r3, #4]
 8001eac:	6812      	ldr	r2, [r2, #0]
 8001eae:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8001eb2:	d002      	beq.n	8001eba <DMA1_Stream6_IRQHandler+0xde>
					__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001eb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001eb6:	4798      	blx	r3
 8001eb8:	e7eb      	b.n	8001e92 <DMA1_Stream6_IRQHandler+0xb6>
					__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001eba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ebc:	4798      	blx	r3
}
 8001ebe:	e7e8      	b.n	8001e92 <DMA1_Stream6_IRQHandler+0xb6>
 8001ec0:	40026000 	.word	0x40026000
 8001ec4:	200003fc 	.word	0x200003fc
 8001ec8:	20000428 	.word	0x20000428

08001ecc <DMA1_Stream7_IRQHandler>:


void DMA1_Stream7_IRQHandler(void)
{
 8001ecc:	b508      	push	{r3, lr}
	DMA_HISR = DMA1 -> HISR;
 8001ece:	4b38      	ldr	r3, [pc, #224]	@ (8001fb0 <DMA1_Stream7_IRQHandler+0xe4>)
 8001ed0:	685a      	ldr	r2, [r3, #4]
 8001ed2:	4b38      	ldr	r3, [pc, #224]	@ (8001fb4 <DMA1_Stream7_IRQHandler+0xe8>)
 8001ed4:	601a      	str	r2, [r3, #0]

	if(DMA_HISR & DMA_HISR_FEIF7)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001edc:	d009      	beq.n	8001ef2 <DMA1_Stream7_IRQHandler+0x26>
	{
		if (__DMA1_Stream7_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001ede:	4b36      	ldr	r3, [pc, #216]	@ (8001fb8 <DMA1_Stream7_IRQHandler+0xec>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ee4:	b12b      	cbz	r3, 8001ef2 <DMA1_Stream7_IRQHandler+0x26>
		{
			__DMA1_Stream7_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001ee6:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CFEIF7;
 8001ee8:	4a31      	ldr	r2, [pc, #196]	@ (8001fb0 <DMA1_Stream7_IRQHandler+0xe4>)
 8001eea:	68d3      	ldr	r3, [r2, #12]
 8001eec:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001ef0:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF7)
 8001ef2:	4b30      	ldr	r3, [pc, #192]	@ (8001fb4 <DMA1_Stream7_IRQHandler+0xe8>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8001efa:	d009      	beq.n	8001f10 <DMA1_Stream7_IRQHandler+0x44>
	{
		if (__DMA1_Stream7_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8001efc:	4b2e      	ldr	r3, [pc, #184]	@ (8001fb8 <DMA1_Stream7_IRQHandler+0xec>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f02:	b12b      	cbz	r3, 8001f10 <DMA1_Stream7_IRQHandler+0x44>
		{
			__DMA1_Stream7_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001f04:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF7;
 8001f06:	4a2a      	ldr	r2, [pc, #168]	@ (8001fb0 <DMA1_Stream7_IRQHandler+0xe4>)
 8001f08:	68d3      	ldr	r3, [r2, #12]
 8001f0a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f0e:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF7)
 8001f10:	4b28      	ldr	r3, [pc, #160]	@ (8001fb4 <DMA1_Stream7_IRQHandler+0xe8>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001f18:	d009      	beq.n	8001f2e <DMA1_Stream7_IRQHandler+0x62>
	{
		if (__DMA1_Stream7_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001f1a:	4b27      	ldr	r3, [pc, #156]	@ (8001fb8 <DMA1_Stream7_IRQHandler+0xec>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f20:	b12b      	cbz	r3, 8001f2e <DMA1_Stream7_IRQHandler+0x62>
		{
			__DMA1_Stream7_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001f22:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTEIF7;
 8001f24:	4a22      	ldr	r2, [pc, #136]	@ (8001fb0 <DMA1_Stream7_IRQHandler+0xe4>)
 8001f26:	68d3      	ldr	r3, [r2, #12]
 8001f28:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f2c:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF7)
 8001f2e:	4b21      	ldr	r3, [pc, #132]	@ (8001fb4 <DMA1_Stream7_IRQHandler+0xe8>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f013 6f80 	tst.w	r3, #67108864	@ 0x4000000
 8001f36:	d00f      	beq.n	8001f58 <DMA1_Stream7_IRQHandler+0x8c>
	{
		if (__DMA1_Stream7_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001f38:	4b1f      	ldr	r3, [pc, #124]	@ (8001fb8 <DMA1_Stream7_IRQHandler+0xec>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f3e:	b15b      	cbz	r3, 8001f58 <DMA1_Stream7_IRQHandler+0x8c>
		{
			__DMA1_Stream7_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001f40:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CHTIF7;
 8001f42:	4a1b      	ldr	r2, [pc, #108]	@ (8001fb0 <DMA1_Stream7_IRQHandler+0xe4>)
 8001f44:	68d3      	ldr	r3, [r2, #12]
 8001f46:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001f4a:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream7_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001f4c:	4b1a      	ldr	r3, [pc, #104]	@ (8001fb8 <DMA1_Stream7_IRQHandler+0xec>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001f52:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8001f56:	d015      	beq.n	8001f84 <DMA1_Stream7_IRQHandler+0xb8>
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF7)
 8001f58:	4b16      	ldr	r3, [pc, #88]	@ (8001fb4 <DMA1_Stream7_IRQHandler+0xe8>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8001f60:	d00f      	beq.n	8001f82 <DMA1_Stream7_IRQHandler+0xb6>
	{
		if (__DMA1_Stream7_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001f62:	4b15      	ldr	r3, [pc, #84]	@ (8001fb8 <DMA1_Stream7_IRQHandler+0xec>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f68:	b15b      	cbz	r3, 8001f82 <DMA1_Stream7_IRQHandler+0xb6>
		{
			__DMA1_Stream7_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8001f6a:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTCIF7;
 8001f6c:	4a10      	ldr	r2, [pc, #64]	@ (8001fb0 <DMA1_Stream7_IRQHandler+0xe4>)
 8001f6e:	68d3      	ldr	r3, [r2, #12]
 8001f70:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001f74:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream7_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001f76:	4b10      	ldr	r3, [pc, #64]	@ (8001fb8 <DMA1_Stream7_IRQHandler+0xec>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001f7c:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8001f80:	d00b      	beq.n	8001f9a <DMA1_Stream7_IRQHandler+0xce>
					__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 8001f82:	bd08      	pop	{r3, pc}
				if((__DMA1_Stream7_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001f84:	685a      	ldr	r2, [r3, #4]
 8001f86:	6812      	ldr	r2, [r2, #0]
 8001f88:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8001f8c:	d002      	beq.n	8001f94 <DMA1_Stream7_IRQHandler+0xc8>
					__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001f8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f90:	4798      	blx	r3
 8001f92:	e7e1      	b.n	8001f58 <DMA1_Stream7_IRQHandler+0x8c>
					__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001f94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f96:	4798      	blx	r3
 8001f98:	e7de      	b.n	8001f58 <DMA1_Stream7_IRQHandler+0x8c>
				if((__DMA1_Stream7_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001f9a:	685a      	ldr	r2, [r3, #4]
 8001f9c:	6812      	ldr	r2, [r2, #0]
 8001f9e:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8001fa2:	d002      	beq.n	8001faa <DMA1_Stream7_IRQHandler+0xde>
					__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001fa4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fa6:	4798      	blx	r3
 8001fa8:	e7eb      	b.n	8001f82 <DMA1_Stream7_IRQHandler+0xb6>
					__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001faa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fac:	4798      	blx	r3
}
 8001fae:	e7e8      	b.n	8001f82 <DMA1_Stream7_IRQHandler+0xb6>
 8001fb0:	40026000 	.word	0x40026000
 8001fb4:	200003fc 	.word	0x200003fc
 8001fb8:	20000424 	.word	0x20000424

08001fbc <DMA2_Stream0_IRQHandler>:

void DMA2_Stream0_IRQHandler(void)
{
 8001fbc:	b508      	push	{r3, lr}
	DMA_LISR = DMA2 -> LISR;
 8001fbe:	4b42      	ldr	r3, [pc, #264]	@ (80020c8 <DMA2_Stream0_IRQHandler+0x10c>)
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	4b42      	ldr	r3, [pc, #264]	@ (80020cc <DMA2_Stream0_IRQHandler+0x110>)
 8001fc4:	601a      	str	r2, [r3, #0]

	if(DMA_LISR & DMA_LISR_FEIF0)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f013 0f01 	tst.w	r3, #1
 8001fcc:	d00d      	beq.n	8001fea <DMA2_Stream0_IRQHandler+0x2e>
	{
		if(__DMA2_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 8001fce:	4b40      	ldr	r3, [pc, #256]	@ (80020d0 <DMA2_Stream0_IRQHandler+0x114>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	69da      	ldr	r2, [r3, #28]
 8001fd4:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8001fd8:	d007      	beq.n	8001fea <DMA2_Stream0_IRQHandler+0x2e>
		{
			if (__DMA2_Stream0_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001fda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fdc:	b12b      	cbz	r3, 8001fea <DMA2_Stream0_IRQHandler+0x2e>
			{
				__DMA2_Stream0_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001fde:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CFEIF0;
 8001fe0:	4a39      	ldr	r2, [pc, #228]	@ (80020c8 <DMA2_Stream0_IRQHandler+0x10c>)
 8001fe2:	6893      	ldr	r3, [r2, #8]
 8001fe4:	f043 0301 	orr.w	r3, r3, #1
 8001fe8:	6093      	str	r3, [r2, #8]
			}
		}

	}

	if(DMA_LISR & DMA_LISR_DMEIF0)
 8001fea:	4b38      	ldr	r3, [pc, #224]	@ (80020cc <DMA2_Stream0_IRQHandler+0x110>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f013 0f04 	tst.w	r3, #4
 8001ff2:	d00d      	beq.n	8002010 <DMA2_Stream0_IRQHandler+0x54>
	{
		if(__DMA2_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 8001ff4:	4b36      	ldr	r3, [pc, #216]	@ (80020d0 <DMA2_Stream0_IRQHandler+0x114>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	69da      	ldr	r2, [r3, #28]
 8001ffa:	f012 0f02 	tst.w	r2, #2
 8001ffe:	d007      	beq.n	8002010 <DMA2_Stream0_IRQHandler+0x54>
		{
			if (__DMA2_Stream0_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8002000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002002:	b12b      	cbz	r3, 8002010 <DMA2_Stream0_IRQHandler+0x54>
			{
				__DMA2_Stream0_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8002004:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF0;
 8002006:	4a30      	ldr	r2, [pc, #192]	@ (80020c8 <DMA2_Stream0_IRQHandler+0x10c>)
 8002008:	6893      	ldr	r3, [r2, #8]
 800200a:	f043 0304 	orr.w	r3, r3, #4
 800200e:	6093      	str	r3, [r2, #8]
			}
		}

	}

	if(DMA_LISR & DMA_LISR_TEIF0)
 8002010:	4b2e      	ldr	r3, [pc, #184]	@ (80020cc <DMA2_Stream0_IRQHandler+0x110>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f013 0f08 	tst.w	r3, #8
 8002018:	d00d      	beq.n	8002036 <DMA2_Stream0_IRQHandler+0x7a>
	{
		if(__DMA2_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 800201a:	4b2d      	ldr	r3, [pc, #180]	@ (80020d0 <DMA2_Stream0_IRQHandler+0x114>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	69da      	ldr	r2, [r3, #28]
 8002020:	f012 0f04 	tst.w	r2, #4
 8002024:	d007      	beq.n	8002036 <DMA2_Stream0_IRQHandler+0x7a>
		{
			if (__DMA2_Stream0_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8002026:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002028:	b12b      	cbz	r3, 8002036 <DMA2_Stream0_IRQHandler+0x7a>
			{
				__DMA2_Stream0_Config__ ->ISR_Routines.Transfer_Error_ISR();
 800202a:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CTEIF0;
 800202c:	4a26      	ldr	r2, [pc, #152]	@ (80020c8 <DMA2_Stream0_IRQHandler+0x10c>)
 800202e:	6893      	ldr	r3, [r2, #8]
 8002030:	f043 0308 	orr.w	r3, r3, #8
 8002034:	6093      	str	r3, [r2, #8]
			}
		}

	}

	if(DMA_LISR & DMA_LISR_HTIF0)
 8002036:	4b25      	ldr	r3, [pc, #148]	@ (80020cc <DMA2_Stream0_IRQHandler+0x110>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f013 0f10 	tst.w	r3, #16
 800203e:	d013      	beq.n	8002068 <DMA2_Stream0_IRQHandler+0xac>
	{
		if(__DMA2_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 8002040:	4b23      	ldr	r3, [pc, #140]	@ (80020d0 <DMA2_Stream0_IRQHandler+0x114>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	69da      	ldr	r2, [r3, #28]
 8002046:	f012 0f08 	tst.w	r2, #8
 800204a:	d00d      	beq.n	8002068 <DMA2_Stream0_IRQHandler+0xac>
		{
			if (__DMA2_Stream0_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 800204c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800204e:	b15b      	cbz	r3, 8002068 <DMA2_Stream0_IRQHandler+0xac>
			{
				__DMA2_Stream0_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8002050:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CHTIF0;
 8002052:	4a1d      	ldr	r2, [pc, #116]	@ (80020c8 <DMA2_Stream0_IRQHandler+0x10c>)
 8002054:	6893      	ldr	r3, [r2, #8]
 8002056:	f043 0310 	orr.w	r3, r3, #16
 800205a:	6093      	str	r3, [r2, #8]

				if(__DMA2_Stream0_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800205c:	4b1c      	ldr	r3, [pc, #112]	@ (80020d0 <DMA2_Stream0_IRQHandler+0x114>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002062:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8002066:	d019      	beq.n	800209c <DMA2_Stream0_IRQHandler+0xe0>
			}
		}

	}

	if(DMA_LISR & DMA_LISR_TCIF0)
 8002068:	4b18      	ldr	r3, [pc, #96]	@ (80020cc <DMA2_Stream0_IRQHandler+0x110>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f013 0f20 	tst.w	r3, #32
 8002070:	d013      	beq.n	800209a <DMA2_Stream0_IRQHandler+0xde>
	{
		if(__DMA2_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 8002072:	4b17      	ldr	r3, [pc, #92]	@ (80020d0 <DMA2_Stream0_IRQHandler+0x114>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	69da      	ldr	r2, [r3, #28]
 8002078:	f012 0f10 	tst.w	r2, #16
 800207c:	d00d      	beq.n	800209a <DMA2_Stream0_IRQHandler+0xde>
		{
			if (__DMA2_Stream0_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 800207e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002080:	b15b      	cbz	r3, 800209a <DMA2_Stream0_IRQHandler+0xde>
			{
				__DMA2_Stream0_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8002082:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CTCIF0;
 8002084:	4a10      	ldr	r2, [pc, #64]	@ (80020c8 <DMA2_Stream0_IRQHandler+0x10c>)
 8002086:	6893      	ldr	r3, [r2, #8]
 8002088:	f043 0320 	orr.w	r3, r3, #32
 800208c:	6093      	str	r3, [r2, #8]

				if(__DMA2_Stream0_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800208e:	4b10      	ldr	r3, [pc, #64]	@ (80020d0 <DMA2_Stream0_IRQHandler+0x114>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002094:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8002098:	d00b      	beq.n	80020b2 <DMA2_Stream0_IRQHandler+0xf6>
				}
			}
		}

	}
}
 800209a:	bd08      	pop	{r3, pc}
					if((__DMA2_Stream0_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800209c:	685a      	ldr	r2, [r3, #4]
 800209e:	6812      	ldr	r2, [r2, #0]
 80020a0:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 80020a4:	d002      	beq.n	80020ac <DMA2_Stream0_IRQHandler+0xf0>
						__DMA2_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80020a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020a8:	4798      	blx	r3
 80020aa:	e7dd      	b.n	8002068 <DMA2_Stream0_IRQHandler+0xac>
						__DMA2_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80020ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020ae:	4798      	blx	r3
 80020b0:	e7da      	b.n	8002068 <DMA2_Stream0_IRQHandler+0xac>
					if((__DMA2_Stream0_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80020b2:	685a      	ldr	r2, [r3, #4]
 80020b4:	6812      	ldr	r2, [r2, #0]
 80020b6:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 80020ba:	d002      	beq.n	80020c2 <DMA2_Stream0_IRQHandler+0x106>
						__DMA2_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80020bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020be:	4798      	blx	r3
 80020c0:	e7eb      	b.n	800209a <DMA2_Stream0_IRQHandler+0xde>
						__DMA2_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80020c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020c4:	4798      	blx	r3
}
 80020c6:	e7e8      	b.n	800209a <DMA2_Stream0_IRQHandler+0xde>
 80020c8:	40026400 	.word	0x40026400
 80020cc:	20000400 	.word	0x20000400
 80020d0:	20000420 	.word	0x20000420

080020d4 <DMA2_Stream1_IRQHandler>:

void DMA2_Stream1_IRQHandler(void)
{
 80020d4:	b508      	push	{r3, lr}
	DMA_LISR = DMA2 -> LISR;
 80020d6:	4b38      	ldr	r3, [pc, #224]	@ (80021b8 <DMA2_Stream1_IRQHandler+0xe4>)
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	4b38      	ldr	r3, [pc, #224]	@ (80021bc <DMA2_Stream1_IRQHandler+0xe8>)
 80020dc:	601a      	str	r2, [r3, #0]

	if(DMA_LISR & DMA_LISR_FEIF1)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80020e4:	d009      	beq.n	80020fa <DMA2_Stream1_IRQHandler+0x26>
	{
		if (__DMA2_Stream1_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80020e6:	4b36      	ldr	r3, [pc, #216]	@ (80021c0 <DMA2_Stream1_IRQHandler+0xec>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020ec:	b12b      	cbz	r3, 80020fa <DMA2_Stream1_IRQHandler+0x26>
		{
			__DMA2_Stream1_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80020ee:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CFEIF1;
 80020f0:	4a31      	ldr	r2, [pc, #196]	@ (80021b8 <DMA2_Stream1_IRQHandler+0xe4>)
 80020f2:	6893      	ldr	r3, [r2, #8]
 80020f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80020f8:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF1)
 80020fa:	4b30      	ldr	r3, [pc, #192]	@ (80021bc <DMA2_Stream1_IRQHandler+0xe8>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002102:	d009      	beq.n	8002118 <DMA2_Stream1_IRQHandler+0x44>
	{
		if (__DMA2_Stream1_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8002104:	4b2e      	ldr	r3, [pc, #184]	@ (80021c0 <DMA2_Stream1_IRQHandler+0xec>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800210a:	b12b      	cbz	r3, 8002118 <DMA2_Stream1_IRQHandler+0x44>
		{
			__DMA2_Stream1_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 800210c:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF1;
 800210e:	4a2a      	ldr	r2, [pc, #168]	@ (80021b8 <DMA2_Stream1_IRQHandler+0xe4>)
 8002110:	6893      	ldr	r3, [r2, #8]
 8002112:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002116:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF1)
 8002118:	4b28      	ldr	r3, [pc, #160]	@ (80021bc <DMA2_Stream1_IRQHandler+0xe8>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8002120:	d009      	beq.n	8002136 <DMA2_Stream1_IRQHandler+0x62>
	{
		if (__DMA2_Stream1_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8002122:	4b27      	ldr	r3, [pc, #156]	@ (80021c0 <DMA2_Stream1_IRQHandler+0xec>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002128:	b12b      	cbz	r3, 8002136 <DMA2_Stream1_IRQHandler+0x62>
		{
			__DMA2_Stream1_Config__ ->ISR_Routines.Transfer_Error_ISR();
 800212a:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CTEIF1;
 800212c:	4a22      	ldr	r2, [pc, #136]	@ (80021b8 <DMA2_Stream1_IRQHandler+0xe4>)
 800212e:	6893      	ldr	r3, [r2, #8]
 8002130:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002134:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF1)
 8002136:	4b21      	ldr	r3, [pc, #132]	@ (80021bc <DMA2_Stream1_IRQHandler+0xe8>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800213e:	d00f      	beq.n	8002160 <DMA2_Stream1_IRQHandler+0x8c>
	{
		if (__DMA2_Stream1_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8002140:	4b1f      	ldr	r3, [pc, #124]	@ (80021c0 <DMA2_Stream1_IRQHandler+0xec>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002146:	b15b      	cbz	r3, 8002160 <DMA2_Stream1_IRQHandler+0x8c>
		{
			__DMA2_Stream1_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8002148:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CHTIF1;
 800214a:	4a1b      	ldr	r2, [pc, #108]	@ (80021b8 <DMA2_Stream1_IRQHandler+0xe4>)
 800214c:	6893      	ldr	r3, [r2, #8]
 800214e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002152:	6093      	str	r3, [r2, #8]

			if(__DMA2_Stream1_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8002154:	4b1a      	ldr	r3, [pc, #104]	@ (80021c0 <DMA2_Stream1_IRQHandler+0xec>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800215a:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 800215e:	d015      	beq.n	800218c <DMA2_Stream1_IRQHandler+0xb8>
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TCIF1)
 8002160:	4b16      	ldr	r3, [pc, #88]	@ (80021bc <DMA2_Stream1_IRQHandler+0xe8>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8002168:	d00f      	beq.n	800218a <DMA2_Stream1_IRQHandler+0xb6>
	{
		if (__DMA2_Stream1_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 800216a:	4b15      	ldr	r3, [pc, #84]	@ (80021c0 <DMA2_Stream1_IRQHandler+0xec>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002170:	b15b      	cbz	r3, 800218a <DMA2_Stream1_IRQHandler+0xb6>
		{
			__DMA2_Stream1_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8002172:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CTCIF1;
 8002174:	4a10      	ldr	r2, [pc, #64]	@ (80021b8 <DMA2_Stream1_IRQHandler+0xe4>)
 8002176:	6893      	ldr	r3, [r2, #8]
 8002178:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800217c:	6093      	str	r3, [r2, #8]

			if(__DMA2_Stream1_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800217e:	4b10      	ldr	r3, [pc, #64]	@ (80021c0 <DMA2_Stream1_IRQHandler+0xec>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002184:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8002188:	d00b      	beq.n	80021a2 <DMA2_Stream1_IRQHandler+0xce>
					__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 800218a:	bd08      	pop	{r3, pc}
				if((__DMA2_Stream1_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800218c:	685a      	ldr	r2, [r3, #4]
 800218e:	6812      	ldr	r2, [r2, #0]
 8002190:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8002194:	d002      	beq.n	800219c <DMA2_Stream1_IRQHandler+0xc8>
					__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8002196:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002198:	4798      	blx	r3
 800219a:	e7e1      	b.n	8002160 <DMA2_Stream1_IRQHandler+0x8c>
					__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800219c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800219e:	4798      	blx	r3
 80021a0:	e7de      	b.n	8002160 <DMA2_Stream1_IRQHandler+0x8c>
				if((__DMA2_Stream1_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80021a2:	685a      	ldr	r2, [r3, #4]
 80021a4:	6812      	ldr	r2, [r2, #0]
 80021a6:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 80021aa:	d002      	beq.n	80021b2 <DMA2_Stream1_IRQHandler+0xde>
					__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80021ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021ae:	4798      	blx	r3
 80021b0:	e7eb      	b.n	800218a <DMA2_Stream1_IRQHandler+0xb6>
					__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80021b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021b4:	4798      	blx	r3
}
 80021b6:	e7e8      	b.n	800218a <DMA2_Stream1_IRQHandler+0xb6>
 80021b8:	40026400 	.word	0x40026400
 80021bc:	20000400 	.word	0x20000400
 80021c0:	2000041c 	.word	0x2000041c

080021c4 <DMA2_Stream2_IRQHandler>:


void DMA2_Stream2_IRQHandler(void)
{
 80021c4:	b508      	push	{r3, lr}
	DMA_LISR = DMA2 -> LISR;
 80021c6:	4b38      	ldr	r3, [pc, #224]	@ (80022a8 <DMA2_Stream2_IRQHandler+0xe4>)
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	4b38      	ldr	r3, [pc, #224]	@ (80022ac <DMA2_Stream2_IRQHandler+0xe8>)
 80021cc:	601a      	str	r2, [r3, #0]

	if(DMA_LISR & DMA_LISR_FEIF2)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80021d4:	d009      	beq.n	80021ea <DMA2_Stream2_IRQHandler+0x26>
	{
		if (__DMA2_Stream2_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80021d6:	4b36      	ldr	r3, [pc, #216]	@ (80022b0 <DMA2_Stream2_IRQHandler+0xec>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021dc:	b12b      	cbz	r3, 80021ea <DMA2_Stream2_IRQHandler+0x26>
		{
			__DMA2_Stream2_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80021de:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CFEIF2;
 80021e0:	4a31      	ldr	r2, [pc, #196]	@ (80022a8 <DMA2_Stream2_IRQHandler+0xe4>)
 80021e2:	6893      	ldr	r3, [r2, #8]
 80021e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021e8:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF2)
 80021ea:	4b30      	ldr	r3, [pc, #192]	@ (80022ac <DMA2_Stream2_IRQHandler+0xe8>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 80021f2:	d009      	beq.n	8002208 <DMA2_Stream2_IRQHandler+0x44>
	{
		if (__DMA2_Stream2_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 80021f4:	4b2e      	ldr	r3, [pc, #184]	@ (80022b0 <DMA2_Stream2_IRQHandler+0xec>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021fa:	b12b      	cbz	r3, 8002208 <DMA2_Stream2_IRQHandler+0x44>
		{
			__DMA2_Stream2_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 80021fc:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF2;
 80021fe:	4a2a      	ldr	r2, [pc, #168]	@ (80022a8 <DMA2_Stream2_IRQHandler+0xe4>)
 8002200:	6893      	ldr	r3, [r2, #8]
 8002202:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002206:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF2)
 8002208:	4b28      	ldr	r3, [pc, #160]	@ (80022ac <DMA2_Stream2_IRQHandler+0xe8>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8002210:	d009      	beq.n	8002226 <DMA2_Stream2_IRQHandler+0x62>
	{
		if (__DMA2_Stream2_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8002212:	4b27      	ldr	r3, [pc, #156]	@ (80022b0 <DMA2_Stream2_IRQHandler+0xec>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002218:	b12b      	cbz	r3, 8002226 <DMA2_Stream2_IRQHandler+0x62>
		{
			__DMA2_Stream2_Config__ ->ISR_Routines.Transfer_Error_ISR();
 800221a:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CTEIF2;
 800221c:	4a22      	ldr	r2, [pc, #136]	@ (80022a8 <DMA2_Stream2_IRQHandler+0xe4>)
 800221e:	6893      	ldr	r3, [r2, #8]
 8002220:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002224:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF2)
 8002226:	4b21      	ldr	r3, [pc, #132]	@ (80022ac <DMA2_Stream2_IRQHandler+0xe8>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800222e:	d00f      	beq.n	8002250 <DMA2_Stream2_IRQHandler+0x8c>
	{
		if (__DMA2_Stream2_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8002230:	4b1f      	ldr	r3, [pc, #124]	@ (80022b0 <DMA2_Stream2_IRQHandler+0xec>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002236:	b15b      	cbz	r3, 8002250 <DMA2_Stream2_IRQHandler+0x8c>
		{
			__DMA2_Stream2_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8002238:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CHTIF2;
 800223a:	4a1b      	ldr	r2, [pc, #108]	@ (80022a8 <DMA2_Stream2_IRQHandler+0xe4>)
 800223c:	6893      	ldr	r3, [r2, #8]
 800223e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002242:	6093      	str	r3, [r2, #8]

			if(__DMA2_Stream2_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8002244:	4b1a      	ldr	r3, [pc, #104]	@ (80022b0 <DMA2_Stream2_IRQHandler+0xec>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800224a:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 800224e:	d015      	beq.n	800227c <DMA2_Stream2_IRQHandler+0xb8>
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TCIF2)
 8002250:	4b16      	ldr	r3, [pc, #88]	@ (80022ac <DMA2_Stream2_IRQHandler+0xe8>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 8002258:	d00f      	beq.n	800227a <DMA2_Stream2_IRQHandler+0xb6>
	{
		if (__DMA2_Stream2_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 800225a:	4b15      	ldr	r3, [pc, #84]	@ (80022b0 <DMA2_Stream2_IRQHandler+0xec>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002260:	b15b      	cbz	r3, 800227a <DMA2_Stream2_IRQHandler+0xb6>
		{
			__DMA2_Stream2_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8002262:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CTCIF2;
 8002264:	4a10      	ldr	r2, [pc, #64]	@ (80022a8 <DMA2_Stream2_IRQHandler+0xe4>)
 8002266:	6893      	ldr	r3, [r2, #8]
 8002268:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800226c:	6093      	str	r3, [r2, #8]

			if(__DMA2_Stream2_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800226e:	4b10      	ldr	r3, [pc, #64]	@ (80022b0 <DMA2_Stream2_IRQHandler+0xec>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002274:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8002278:	d00b      	beq.n	8002292 <DMA2_Stream2_IRQHandler+0xce>
					__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 800227a:	bd08      	pop	{r3, pc}
				if((__DMA2_Stream2_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800227c:	685a      	ldr	r2, [r3, #4]
 800227e:	6812      	ldr	r2, [r2, #0]
 8002280:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8002284:	d002      	beq.n	800228c <DMA2_Stream2_IRQHandler+0xc8>
					__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8002286:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002288:	4798      	blx	r3
 800228a:	e7e1      	b.n	8002250 <DMA2_Stream2_IRQHandler+0x8c>
					__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800228c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800228e:	4798      	blx	r3
 8002290:	e7de      	b.n	8002250 <DMA2_Stream2_IRQHandler+0x8c>
				if((__DMA2_Stream2_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8002292:	685a      	ldr	r2, [r3, #4]
 8002294:	6812      	ldr	r2, [r2, #0]
 8002296:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 800229a:	d002      	beq.n	80022a2 <DMA2_Stream2_IRQHandler+0xde>
					__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800229c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800229e:	4798      	blx	r3
 80022a0:	e7eb      	b.n	800227a <DMA2_Stream2_IRQHandler+0xb6>
					__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80022a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022a4:	4798      	blx	r3
}
 80022a6:	e7e8      	b.n	800227a <DMA2_Stream2_IRQHandler+0xb6>
 80022a8:	40026400 	.word	0x40026400
 80022ac:	20000400 	.word	0x20000400
 80022b0:	20000418 	.word	0x20000418

080022b4 <DMA2_Stream3_IRQHandler>:

void DMA2_Stream3_IRQHandler(void)
{
 80022b4:	b508      	push	{r3, lr}
	DMA_LISR = DMA2 -> LISR;
 80022b6:	4b42      	ldr	r3, [pc, #264]	@ (80023c0 <DMA2_Stream3_IRQHandler+0x10c>)
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	4b42      	ldr	r3, [pc, #264]	@ (80023c4 <DMA2_Stream3_IRQHandler+0x110>)
 80022bc:	601a      	str	r2, [r3, #0]

	if(DMA_LISR & DMA_LISR_FEIF3)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80022c4:	d00d      	beq.n	80022e2 <DMA2_Stream3_IRQHandler+0x2e>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 80022c6:	4b40      	ldr	r3, [pc, #256]	@ (80023c8 <DMA2_Stream3_IRQHandler+0x114>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	69da      	ldr	r2, [r3, #28]
 80022cc:	f012 0f80 	tst.w	r2, #128	@ 0x80
 80022d0:	d007      	beq.n	80022e2 <DMA2_Stream3_IRQHandler+0x2e>
		{
			if (__DMA2_Stream3_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80022d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022d4:	b12b      	cbz	r3, 80022e2 <DMA2_Stream3_IRQHandler+0x2e>
			{
				__DMA2_Stream3_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80022d6:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CFEIF3;
 80022d8:	4a39      	ldr	r2, [pc, #228]	@ (80023c0 <DMA2_Stream3_IRQHandler+0x10c>)
 80022da:	6893      	ldr	r3, [r2, #8]
 80022dc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80022e0:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF3)
 80022e2:	4b38      	ldr	r3, [pc, #224]	@ (80023c4 <DMA2_Stream3_IRQHandler+0x110>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 80022ea:	d00d      	beq.n	8002308 <DMA2_Stream3_IRQHandler+0x54>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 80022ec:	4b36      	ldr	r3, [pc, #216]	@ (80023c8 <DMA2_Stream3_IRQHandler+0x114>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	69da      	ldr	r2, [r3, #28]
 80022f2:	f012 0f02 	tst.w	r2, #2
 80022f6:	d007      	beq.n	8002308 <DMA2_Stream3_IRQHandler+0x54>
		{
			if (__DMA2_Stream3_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 80022f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fa:	b12b      	cbz	r3, 8002308 <DMA2_Stream3_IRQHandler+0x54>
			{
				__DMA2_Stream3_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 80022fc:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF3;
 80022fe:	4a30      	ldr	r2, [pc, #192]	@ (80023c0 <DMA2_Stream3_IRQHandler+0x10c>)
 8002300:	6893      	ldr	r3, [r2, #8]
 8002302:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002306:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF3)
 8002308:	4b2e      	ldr	r3, [pc, #184]	@ (80023c4 <DMA2_Stream3_IRQHandler+0x110>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002310:	d00d      	beq.n	800232e <DMA2_Stream3_IRQHandler+0x7a>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 8002312:	4b2d      	ldr	r3, [pc, #180]	@ (80023c8 <DMA2_Stream3_IRQHandler+0x114>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	69da      	ldr	r2, [r3, #28]
 8002318:	f012 0f04 	tst.w	r2, #4
 800231c:	d007      	beq.n	800232e <DMA2_Stream3_IRQHandler+0x7a>
		{
			if (__DMA2_Stream3_Config__ -> ISR_Routines.Transfer_Error_ISR)
 800231e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002320:	b12b      	cbz	r3, 800232e <DMA2_Stream3_IRQHandler+0x7a>
			{
				__DMA2_Stream3_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8002322:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CTEIF3;
 8002324:	4a26      	ldr	r2, [pc, #152]	@ (80023c0 <DMA2_Stream3_IRQHandler+0x10c>)
 8002326:	6893      	ldr	r3, [r2, #8]
 8002328:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800232c:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF3)
 800232e:	4b25      	ldr	r3, [pc, #148]	@ (80023c4 <DMA2_Stream3_IRQHandler+0x110>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f013 6f80 	tst.w	r3, #67108864	@ 0x4000000
 8002336:	d013      	beq.n	8002360 <DMA2_Stream3_IRQHandler+0xac>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 8002338:	4b23      	ldr	r3, [pc, #140]	@ (80023c8 <DMA2_Stream3_IRQHandler+0x114>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	69da      	ldr	r2, [r3, #28]
 800233e:	f012 0f08 	tst.w	r2, #8
 8002342:	d00d      	beq.n	8002360 <DMA2_Stream3_IRQHandler+0xac>
		{
			if (__DMA2_Stream3_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8002344:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002346:	b15b      	cbz	r3, 8002360 <DMA2_Stream3_IRQHandler+0xac>
			{
				__DMA2_Stream3_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8002348:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CHTIF3;
 800234a:	4a1d      	ldr	r2, [pc, #116]	@ (80023c0 <DMA2_Stream3_IRQHandler+0x10c>)
 800234c:	6893      	ldr	r3, [r2, #8]
 800234e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002352:	6093      	str	r3, [r2, #8]

				if(__DMA2_Stream3_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8002354:	4b1c      	ldr	r3, [pc, #112]	@ (80023c8 <DMA2_Stream3_IRQHandler+0x114>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800235a:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 800235e:	d019      	beq.n	8002394 <DMA2_Stream3_IRQHandler+0xe0>
			}
		}

	}

	if(DMA_LISR & DMA_LISR_TCIF3)
 8002360:	4b18      	ldr	r3, [pc, #96]	@ (80023c4 <DMA2_Stream3_IRQHandler+0x110>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8002368:	d013      	beq.n	8002392 <DMA2_Stream3_IRQHandler+0xde>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 800236a:	4b17      	ldr	r3, [pc, #92]	@ (80023c8 <DMA2_Stream3_IRQHandler+0x114>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	69da      	ldr	r2, [r3, #28]
 8002370:	f012 0f10 	tst.w	r2, #16
 8002374:	d00d      	beq.n	8002392 <DMA2_Stream3_IRQHandler+0xde>
		{
			if (__DMA2_Stream3_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8002376:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002378:	b15b      	cbz	r3, 8002392 <DMA2_Stream3_IRQHandler+0xde>
			{
				__DMA2_Stream3_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 800237a:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CTCIF3;
 800237c:	4a10      	ldr	r2, [pc, #64]	@ (80023c0 <DMA2_Stream3_IRQHandler+0x10c>)
 800237e:	6893      	ldr	r3, [r2, #8]
 8002380:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002384:	6093      	str	r3, [r2, #8]

				if(__DMA2_Stream3_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8002386:	4b10      	ldr	r3, [pc, #64]	@ (80023c8 <DMA2_Stream3_IRQHandler+0x114>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800238c:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8002390:	d00b      	beq.n	80023aa <DMA2_Stream3_IRQHandler+0xf6>
					}
				}
			}
		}
	}
}
 8002392:	bd08      	pop	{r3, pc}
					if((__DMA2_Stream3_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8002394:	685a      	ldr	r2, [r3, #4]
 8002396:	6812      	ldr	r2, [r2, #0]
 8002398:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 800239c:	d002      	beq.n	80023a4 <DMA2_Stream3_IRQHandler+0xf0>
						__DMA2_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800239e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023a0:	4798      	blx	r3
 80023a2:	e7dd      	b.n	8002360 <DMA2_Stream3_IRQHandler+0xac>
						__DMA2_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80023a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023a6:	4798      	blx	r3
 80023a8:	e7da      	b.n	8002360 <DMA2_Stream3_IRQHandler+0xac>
					if((__DMA2_Stream3_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80023aa:	685a      	ldr	r2, [r3, #4]
 80023ac:	6812      	ldr	r2, [r2, #0]
 80023ae:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 80023b2:	d002      	beq.n	80023ba <DMA2_Stream3_IRQHandler+0x106>
						__DMA2_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80023b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023b6:	4798      	blx	r3
 80023b8:	e7eb      	b.n	8002392 <DMA2_Stream3_IRQHandler+0xde>
						__DMA2_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80023ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023bc:	4798      	blx	r3
}
 80023be:	e7e8      	b.n	8002392 <DMA2_Stream3_IRQHandler+0xde>
 80023c0:	40026400 	.word	0x40026400
 80023c4:	20000400 	.word	0x20000400
 80023c8:	20000414 	.word	0x20000414

080023cc <DMA2_Stream4_IRQHandler>:

void DMA2_Stream4_IRQHandler(void)
{
 80023cc:	b508      	push	{r3, lr}
	DMA_HISR = DMA2 -> HISR;
 80023ce:	4b38      	ldr	r3, [pc, #224]	@ (80024b0 <DMA2_Stream4_IRQHandler+0xe4>)
 80023d0:	685a      	ldr	r2, [r3, #4]
 80023d2:	4b38      	ldr	r3, [pc, #224]	@ (80024b4 <DMA2_Stream4_IRQHandler+0xe8>)
 80023d4:	601a      	str	r2, [r3, #0]

	if(DMA_HISR & DMA_HISR_FEIF4)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f013 0f01 	tst.w	r3, #1
 80023dc:	d009      	beq.n	80023f2 <DMA2_Stream4_IRQHandler+0x26>
	{
		if (__DMA2_Stream4_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80023de:	4b36      	ldr	r3, [pc, #216]	@ (80024b8 <DMA2_Stream4_IRQHandler+0xec>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023e4:	b12b      	cbz	r3, 80023f2 <DMA2_Stream4_IRQHandler+0x26>
		{
			__DMA2_Stream4_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80023e6:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_HIFCR_CFEIF5;
 80023e8:	4a31      	ldr	r2, [pc, #196]	@ (80024b0 <DMA2_Stream4_IRQHandler+0xe4>)
 80023ea:	6893      	ldr	r3, [r2, #8]
 80023ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80023f0:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF4)
 80023f2:	4b30      	ldr	r3, [pc, #192]	@ (80024b4 <DMA2_Stream4_IRQHandler+0xe8>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f013 0f04 	tst.w	r3, #4
 80023fa:	d009      	beq.n	8002410 <DMA2_Stream4_IRQHandler+0x44>
	{
		if (__DMA2_Stream4_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 80023fc:	4b2e      	ldr	r3, [pc, #184]	@ (80024b8 <DMA2_Stream4_IRQHandler+0xec>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002402:	b12b      	cbz	r3, 8002410 <DMA2_Stream4_IRQHandler+0x44>
		{
			__DMA2_Stream4_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8002404:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF4;
 8002406:	4a2a      	ldr	r2, [pc, #168]	@ (80024b0 <DMA2_Stream4_IRQHandler+0xe4>)
 8002408:	68d3      	ldr	r3, [r2, #12]
 800240a:	f043 0304 	orr.w	r3, r3, #4
 800240e:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF4)
 8002410:	4b28      	ldr	r3, [pc, #160]	@ (80024b4 <DMA2_Stream4_IRQHandler+0xe8>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f013 0f08 	tst.w	r3, #8
 8002418:	d009      	beq.n	800242e <DMA2_Stream4_IRQHandler+0x62>
	{
		if (__DMA2_Stream4_Config__ -> ISR_Routines.Transfer_Error_ISR)
 800241a:	4b27      	ldr	r3, [pc, #156]	@ (80024b8 <DMA2_Stream4_IRQHandler+0xec>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002420:	b12b      	cbz	r3, 800242e <DMA2_Stream4_IRQHandler+0x62>
		{
			__DMA2_Stream4_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8002422:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTEIF4;
 8002424:	4a22      	ldr	r2, [pc, #136]	@ (80024b0 <DMA2_Stream4_IRQHandler+0xe4>)
 8002426:	68d3      	ldr	r3, [r2, #12]
 8002428:	f043 0308 	orr.w	r3, r3, #8
 800242c:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF4)
 800242e:	4b21      	ldr	r3, [pc, #132]	@ (80024b4 <DMA2_Stream4_IRQHandler+0xe8>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f013 0f10 	tst.w	r3, #16
 8002436:	d00f      	beq.n	8002458 <DMA2_Stream4_IRQHandler+0x8c>
	{
		if (__DMA2_Stream4_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8002438:	4b1f      	ldr	r3, [pc, #124]	@ (80024b8 <DMA2_Stream4_IRQHandler+0xec>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800243e:	b15b      	cbz	r3, 8002458 <DMA2_Stream4_IRQHandler+0x8c>
		{
			__DMA2_Stream4_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8002440:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CHTIF4;
 8002442:	4a1b      	ldr	r2, [pc, #108]	@ (80024b0 <DMA2_Stream4_IRQHandler+0xe4>)
 8002444:	68d3      	ldr	r3, [r2, #12]
 8002446:	f043 0310 	orr.w	r3, r3, #16
 800244a:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream4_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800244c:	4b1a      	ldr	r3, [pc, #104]	@ (80024b8 <DMA2_Stream4_IRQHandler+0xec>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002452:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8002456:	d015      	beq.n	8002484 <DMA2_Stream4_IRQHandler+0xb8>
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF4)
 8002458:	4b16      	ldr	r3, [pc, #88]	@ (80024b4 <DMA2_Stream4_IRQHandler+0xe8>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f013 0f20 	tst.w	r3, #32
 8002460:	d00f      	beq.n	8002482 <DMA2_Stream4_IRQHandler+0xb6>
	{
		if (__DMA2_Stream4_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8002462:	4b15      	ldr	r3, [pc, #84]	@ (80024b8 <DMA2_Stream4_IRQHandler+0xec>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002468:	b15b      	cbz	r3, 8002482 <DMA2_Stream4_IRQHandler+0xb6>
		{
			__DMA2_Stream4_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 800246a:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTCIF4;
 800246c:	4a10      	ldr	r2, [pc, #64]	@ (80024b0 <DMA2_Stream4_IRQHandler+0xe4>)
 800246e:	68d3      	ldr	r3, [r2, #12]
 8002470:	f043 0320 	orr.w	r3, r3, #32
 8002474:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream4_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8002476:	4b10      	ldr	r3, [pc, #64]	@ (80024b8 <DMA2_Stream4_IRQHandler+0xec>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800247c:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8002480:	d00b      	beq.n	800249a <DMA2_Stream4_IRQHandler+0xce>
					__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 8002482:	bd08      	pop	{r3, pc}
				if((__DMA2_Stream4_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8002484:	685a      	ldr	r2, [r3, #4]
 8002486:	6812      	ldr	r2, [r2, #0]
 8002488:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 800248c:	d002      	beq.n	8002494 <DMA2_Stream4_IRQHandler+0xc8>
					__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800248e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002490:	4798      	blx	r3
 8002492:	e7e1      	b.n	8002458 <DMA2_Stream4_IRQHandler+0x8c>
					__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8002494:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002496:	4798      	blx	r3
 8002498:	e7de      	b.n	8002458 <DMA2_Stream4_IRQHandler+0x8c>
				if((__DMA2_Stream4_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800249a:	685a      	ldr	r2, [r3, #4]
 800249c:	6812      	ldr	r2, [r2, #0]
 800249e:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 80024a2:	d002      	beq.n	80024aa <DMA2_Stream4_IRQHandler+0xde>
					__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80024a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024a6:	4798      	blx	r3
 80024a8:	e7eb      	b.n	8002482 <DMA2_Stream4_IRQHandler+0xb6>
					__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80024aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024ac:	4798      	blx	r3
}
 80024ae:	e7e8      	b.n	8002482 <DMA2_Stream4_IRQHandler+0xb6>
 80024b0:	40026400 	.word	0x40026400
 80024b4:	200003fc 	.word	0x200003fc
 80024b8:	20000410 	.word	0x20000410

080024bc <DMA2_Stream5_IRQHandler>:




void DMA2_Stream5_IRQHandler(void)
{
 80024bc:	b508      	push	{r3, lr}
	DMA_HISR = DMA2 -> HISR;
 80024be:	4b38      	ldr	r3, [pc, #224]	@ (80025a0 <DMA2_Stream5_IRQHandler+0xe4>)
 80024c0:	685a      	ldr	r2, [r3, #4]
 80024c2:	4b38      	ldr	r3, [pc, #224]	@ (80025a4 <DMA2_Stream5_IRQHandler+0xe8>)
 80024c4:	601a      	str	r2, [r3, #0]

	if(DMA_HISR & DMA_HISR_FEIF5)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80024cc:	d009      	beq.n	80024e2 <DMA2_Stream5_IRQHandler+0x26>
	{
		if (__DMA2_Stream5_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80024ce:	4b36      	ldr	r3, [pc, #216]	@ (80025a8 <DMA2_Stream5_IRQHandler+0xec>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024d4:	b12b      	cbz	r3, 80024e2 <DMA2_Stream5_IRQHandler+0x26>
		{
			__DMA2_Stream5_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80024d6:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CFEIF5;
 80024d8:	4a31      	ldr	r2, [pc, #196]	@ (80025a0 <DMA2_Stream5_IRQHandler+0xe4>)
 80024da:	68d3      	ldr	r3, [r2, #12]
 80024dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80024e0:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF5)
 80024e2:	4b30      	ldr	r3, [pc, #192]	@ (80025a4 <DMA2_Stream5_IRQHandler+0xe8>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80024ea:	d009      	beq.n	8002500 <DMA2_Stream5_IRQHandler+0x44>
	{
		if (__DMA2_Stream5_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 80024ec:	4b2e      	ldr	r3, [pc, #184]	@ (80025a8 <DMA2_Stream5_IRQHandler+0xec>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f2:	b12b      	cbz	r3, 8002500 <DMA2_Stream5_IRQHandler+0x44>
		{
			__DMA2_Stream5_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 80024f4:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF5;
 80024f6:	4a2a      	ldr	r2, [pc, #168]	@ (80025a0 <DMA2_Stream5_IRQHandler+0xe4>)
 80024f8:	68d3      	ldr	r3, [r2, #12]
 80024fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024fe:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF5)
 8002500:	4b28      	ldr	r3, [pc, #160]	@ (80025a4 <DMA2_Stream5_IRQHandler+0xe8>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8002508:	d009      	beq.n	800251e <DMA2_Stream5_IRQHandler+0x62>
	{
		if (__DMA2_Stream5_Config__ -> ISR_Routines.Transfer_Error_ISR)
 800250a:	4b27      	ldr	r3, [pc, #156]	@ (80025a8 <DMA2_Stream5_IRQHandler+0xec>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002510:	b12b      	cbz	r3, 800251e <DMA2_Stream5_IRQHandler+0x62>
		{
			__DMA2_Stream5_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8002512:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTEIF5;
 8002514:	4a22      	ldr	r2, [pc, #136]	@ (80025a0 <DMA2_Stream5_IRQHandler+0xe4>)
 8002516:	68d3      	ldr	r3, [r2, #12]
 8002518:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800251c:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF5)
 800251e:	4b21      	ldr	r3, [pc, #132]	@ (80025a4 <DMA2_Stream5_IRQHandler+0xe8>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8002526:	d00f      	beq.n	8002548 <DMA2_Stream5_IRQHandler+0x8c>
	{
		if (__DMA2_Stream5_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8002528:	4b1f      	ldr	r3, [pc, #124]	@ (80025a8 <DMA2_Stream5_IRQHandler+0xec>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800252e:	b15b      	cbz	r3, 8002548 <DMA2_Stream5_IRQHandler+0x8c>
		{
			__DMA2_Stream5_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8002530:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CHTIF5;
 8002532:	4a1b      	ldr	r2, [pc, #108]	@ (80025a0 <DMA2_Stream5_IRQHandler+0xe4>)
 8002534:	68d3      	ldr	r3, [r2, #12]
 8002536:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800253a:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream5_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800253c:	4b1a      	ldr	r3, [pc, #104]	@ (80025a8 <DMA2_Stream5_IRQHandler+0xec>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002542:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8002546:	d015      	beq.n	8002574 <DMA2_Stream5_IRQHandler+0xb8>
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF5)
 8002548:	4b16      	ldr	r3, [pc, #88]	@ (80025a4 <DMA2_Stream5_IRQHandler+0xe8>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8002550:	d00f      	beq.n	8002572 <DMA2_Stream5_IRQHandler+0xb6>
	{
		if (__DMA2_Stream5_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8002552:	4b15      	ldr	r3, [pc, #84]	@ (80025a8 <DMA2_Stream5_IRQHandler+0xec>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002558:	b15b      	cbz	r3, 8002572 <DMA2_Stream5_IRQHandler+0xb6>
		{
			__DMA2_Stream5_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 800255a:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTCIF5;
 800255c:	4a10      	ldr	r2, [pc, #64]	@ (80025a0 <DMA2_Stream5_IRQHandler+0xe4>)
 800255e:	68d3      	ldr	r3, [r2, #12]
 8002560:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002564:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream5_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8002566:	4b10      	ldr	r3, [pc, #64]	@ (80025a8 <DMA2_Stream5_IRQHandler+0xec>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800256c:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8002570:	d00b      	beq.n	800258a <DMA2_Stream5_IRQHandler+0xce>
					__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 8002572:	bd08      	pop	{r3, pc}
				if((__DMA2_Stream5_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8002574:	685a      	ldr	r2, [r3, #4]
 8002576:	6812      	ldr	r2, [r2, #0]
 8002578:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 800257c:	d002      	beq.n	8002584 <DMA2_Stream5_IRQHandler+0xc8>
					__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800257e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002580:	4798      	blx	r3
 8002582:	e7e1      	b.n	8002548 <DMA2_Stream5_IRQHandler+0x8c>
					__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8002584:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002586:	4798      	blx	r3
 8002588:	e7de      	b.n	8002548 <DMA2_Stream5_IRQHandler+0x8c>
				if((__DMA2_Stream5_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800258a:	685a      	ldr	r2, [r3, #4]
 800258c:	6812      	ldr	r2, [r2, #0]
 800258e:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8002592:	d002      	beq.n	800259a <DMA2_Stream5_IRQHandler+0xde>
					__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8002594:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002596:	4798      	blx	r3
 8002598:	e7eb      	b.n	8002572 <DMA2_Stream5_IRQHandler+0xb6>
					__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800259a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800259c:	4798      	blx	r3
}
 800259e:	e7e8      	b.n	8002572 <DMA2_Stream5_IRQHandler+0xb6>
 80025a0:	40026400 	.word	0x40026400
 80025a4:	200003fc 	.word	0x200003fc
 80025a8:	2000040c 	.word	0x2000040c

080025ac <DMA2_Stream6_IRQHandler>:



void DMA2_Stream6_IRQHandler(void)
{
 80025ac:	b508      	push	{r3, lr}
	DMA_HISR = DMA2 -> HISR;
 80025ae:	4b38      	ldr	r3, [pc, #224]	@ (8002690 <DMA2_Stream6_IRQHandler+0xe4>)
 80025b0:	685a      	ldr	r2, [r3, #4]
 80025b2:	4b38      	ldr	r3, [pc, #224]	@ (8002694 <DMA2_Stream6_IRQHandler+0xe8>)
 80025b4:	601a      	str	r2, [r3, #0]

	if(DMA_HISR & DMA_HISR_FEIF6)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80025bc:	d009      	beq.n	80025d2 <DMA2_Stream6_IRQHandler+0x26>
	{
		if (__DMA2_Stream6_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80025be:	4b36      	ldr	r3, [pc, #216]	@ (8002698 <DMA2_Stream6_IRQHandler+0xec>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025c4:	b12b      	cbz	r3, 80025d2 <DMA2_Stream6_IRQHandler+0x26>
		{
			__DMA2_Stream6_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80025c6:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CFEIF6;
 80025c8:	4a31      	ldr	r2, [pc, #196]	@ (8002690 <DMA2_Stream6_IRQHandler+0xe4>)
 80025ca:	68d3      	ldr	r3, [r2, #12]
 80025cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025d0:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF6)
 80025d2:	4b30      	ldr	r3, [pc, #192]	@ (8002694 <DMA2_Stream6_IRQHandler+0xe8>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 80025da:	d009      	beq.n	80025f0 <DMA2_Stream6_IRQHandler+0x44>
	{
		if (__DMA2_Stream6_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 80025dc:	4b2e      	ldr	r3, [pc, #184]	@ (8002698 <DMA2_Stream6_IRQHandler+0xec>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e2:	b12b      	cbz	r3, 80025f0 <DMA2_Stream6_IRQHandler+0x44>
		{
			__DMA2_Stream6_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 80025e4:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF6;
 80025e6:	4a2a      	ldr	r2, [pc, #168]	@ (8002690 <DMA2_Stream6_IRQHandler+0xe4>)
 80025e8:	68d3      	ldr	r3, [r2, #12]
 80025ea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025ee:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF6)
 80025f0:	4b28      	ldr	r3, [pc, #160]	@ (8002694 <DMA2_Stream6_IRQHandler+0xe8>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 80025f8:	d009      	beq.n	800260e <DMA2_Stream6_IRQHandler+0x62>
	{
		if (__DMA2_Stream6_Config__ -> ISR_Routines.Transfer_Error_ISR)
 80025fa:	4b27      	ldr	r3, [pc, #156]	@ (8002698 <DMA2_Stream6_IRQHandler+0xec>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002600:	b12b      	cbz	r3, 800260e <DMA2_Stream6_IRQHandler+0x62>
		{
			__DMA2_Stream6_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8002602:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTEIF6;
 8002604:	4a22      	ldr	r2, [pc, #136]	@ (8002690 <DMA2_Stream6_IRQHandler+0xe4>)
 8002606:	68d3      	ldr	r3, [r2, #12]
 8002608:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800260c:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF6)
 800260e:	4b21      	ldr	r3, [pc, #132]	@ (8002694 <DMA2_Stream6_IRQHandler+0xe8>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8002616:	d00f      	beq.n	8002638 <DMA2_Stream6_IRQHandler+0x8c>
	{
		if (__DMA2_Stream6_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8002618:	4b1f      	ldr	r3, [pc, #124]	@ (8002698 <DMA2_Stream6_IRQHandler+0xec>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800261e:	b15b      	cbz	r3, 8002638 <DMA2_Stream6_IRQHandler+0x8c>
		{
			__DMA2_Stream6_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8002620:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CHTIF6;
 8002622:	4a1b      	ldr	r2, [pc, #108]	@ (8002690 <DMA2_Stream6_IRQHandler+0xe4>)
 8002624:	68d3      	ldr	r3, [r2, #12]
 8002626:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800262a:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream6_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800262c:	4b1a      	ldr	r3, [pc, #104]	@ (8002698 <DMA2_Stream6_IRQHandler+0xec>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002632:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8002636:	d015      	beq.n	8002664 <DMA2_Stream6_IRQHandler+0xb8>
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF6)
 8002638:	4b16      	ldr	r3, [pc, #88]	@ (8002694 <DMA2_Stream6_IRQHandler+0xe8>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 8002640:	d00f      	beq.n	8002662 <DMA2_Stream6_IRQHandler+0xb6>
	{
		if (__DMA2_Stream6_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8002642:	4b15      	ldr	r3, [pc, #84]	@ (8002698 <DMA2_Stream6_IRQHandler+0xec>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002648:	b15b      	cbz	r3, 8002662 <DMA2_Stream6_IRQHandler+0xb6>
		{
			__DMA2_Stream6_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 800264a:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTCIF6;
 800264c:	4a10      	ldr	r2, [pc, #64]	@ (8002690 <DMA2_Stream6_IRQHandler+0xe4>)
 800264e:	68d3      	ldr	r3, [r2, #12]
 8002650:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002654:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream6_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8002656:	4b10      	ldr	r3, [pc, #64]	@ (8002698 <DMA2_Stream6_IRQHandler+0xec>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800265c:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8002660:	d00b      	beq.n	800267a <DMA2_Stream6_IRQHandler+0xce>
					__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 8002662:	bd08      	pop	{r3, pc}
				if((__DMA2_Stream6_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8002664:	685a      	ldr	r2, [r3, #4]
 8002666:	6812      	ldr	r2, [r2, #0]
 8002668:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 800266c:	d002      	beq.n	8002674 <DMA2_Stream6_IRQHandler+0xc8>
					__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800266e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002670:	4798      	blx	r3
 8002672:	e7e1      	b.n	8002638 <DMA2_Stream6_IRQHandler+0x8c>
					__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8002674:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002676:	4798      	blx	r3
 8002678:	e7de      	b.n	8002638 <DMA2_Stream6_IRQHandler+0x8c>
				if((__DMA2_Stream6_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800267a:	685a      	ldr	r2, [r3, #4]
 800267c:	6812      	ldr	r2, [r2, #0]
 800267e:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8002682:	d002      	beq.n	800268a <DMA2_Stream6_IRQHandler+0xde>
					__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8002684:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002686:	4798      	blx	r3
 8002688:	e7eb      	b.n	8002662 <DMA2_Stream6_IRQHandler+0xb6>
					__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800268a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800268c:	4798      	blx	r3
}
 800268e:	e7e8      	b.n	8002662 <DMA2_Stream6_IRQHandler+0xb6>
 8002690:	40026400 	.word	0x40026400
 8002694:	200003fc 	.word	0x200003fc
 8002698:	20000408 	.word	0x20000408

0800269c <DMA2_Stream7_IRQHandler>:


void DMA2_Stream7_IRQHandler(void)
{
 800269c:	b508      	push	{r3, lr}
	DMA_HISR = DMA2 -> HISR;
 800269e:	4b38      	ldr	r3, [pc, #224]	@ (8002780 <DMA2_Stream7_IRQHandler+0xe4>)
 80026a0:	685a      	ldr	r2, [r3, #4]
 80026a2:	4b38      	ldr	r3, [pc, #224]	@ (8002784 <DMA2_Stream7_IRQHandler+0xe8>)
 80026a4:	601a      	str	r2, [r3, #0]

	if(DMA_HISR & DMA_HISR_FEIF7)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80026ac:	d009      	beq.n	80026c2 <DMA2_Stream7_IRQHandler+0x26>
	{
		if (__DMA2_Stream7_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80026ae:	4b36      	ldr	r3, [pc, #216]	@ (8002788 <DMA2_Stream7_IRQHandler+0xec>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026b4:	b12b      	cbz	r3, 80026c2 <DMA2_Stream7_IRQHandler+0x26>
		{
			__DMA2_Stream7_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80026b6:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CFEIF7;
 80026b8:	4a31      	ldr	r2, [pc, #196]	@ (8002780 <DMA2_Stream7_IRQHandler+0xe4>)
 80026ba:	68d3      	ldr	r3, [r2, #12]
 80026bc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80026c0:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF7)
 80026c2:	4b30      	ldr	r3, [pc, #192]	@ (8002784 <DMA2_Stream7_IRQHandler+0xe8>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 80026ca:	d009      	beq.n	80026e0 <DMA2_Stream7_IRQHandler+0x44>
	{
		if (__DMA2_Stream7_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 80026cc:	4b2e      	ldr	r3, [pc, #184]	@ (8002788 <DMA2_Stream7_IRQHandler+0xec>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d2:	b12b      	cbz	r3, 80026e0 <DMA2_Stream7_IRQHandler+0x44>
		{
			__DMA2_Stream7_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 80026d4:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF7;
 80026d6:	4a2a      	ldr	r2, [pc, #168]	@ (8002780 <DMA2_Stream7_IRQHandler+0xe4>)
 80026d8:	68d3      	ldr	r3, [r2, #12]
 80026da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026de:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF7)
 80026e0:	4b28      	ldr	r3, [pc, #160]	@ (8002784 <DMA2_Stream7_IRQHandler+0xe8>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80026e8:	d009      	beq.n	80026fe <DMA2_Stream7_IRQHandler+0x62>
	{
		if (__DMA2_Stream7_Config__ -> ISR_Routines.Transfer_Error_ISR)
 80026ea:	4b27      	ldr	r3, [pc, #156]	@ (8002788 <DMA2_Stream7_IRQHandler+0xec>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026f0:	b12b      	cbz	r3, 80026fe <DMA2_Stream7_IRQHandler+0x62>
		{
			__DMA2_Stream7_Config__ ->ISR_Routines.Transfer_Error_ISR();
 80026f2:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTEIF7;
 80026f4:	4a22      	ldr	r2, [pc, #136]	@ (8002780 <DMA2_Stream7_IRQHandler+0xe4>)
 80026f6:	68d3      	ldr	r3, [r2, #12]
 80026f8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80026fc:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF7)
 80026fe:	4b21      	ldr	r3, [pc, #132]	@ (8002784 <DMA2_Stream7_IRQHandler+0xe8>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f013 6f80 	tst.w	r3, #67108864	@ 0x4000000
 8002706:	d00f      	beq.n	8002728 <DMA2_Stream7_IRQHandler+0x8c>
	{
		if (__DMA2_Stream7_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8002708:	4b1f      	ldr	r3, [pc, #124]	@ (8002788 <DMA2_Stream7_IRQHandler+0xec>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800270e:	b15b      	cbz	r3, 8002728 <DMA2_Stream7_IRQHandler+0x8c>
		{
			__DMA2_Stream7_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8002710:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CHTIF7;
 8002712:	4a1b      	ldr	r2, [pc, #108]	@ (8002780 <DMA2_Stream7_IRQHandler+0xe4>)
 8002714:	68d3      	ldr	r3, [r2, #12]
 8002716:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800271a:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream7_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800271c:	4b1a      	ldr	r3, [pc, #104]	@ (8002788 <DMA2_Stream7_IRQHandler+0xec>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002722:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8002726:	d015      	beq.n	8002754 <DMA2_Stream7_IRQHandler+0xb8>
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF7)
 8002728:	4b16      	ldr	r3, [pc, #88]	@ (8002784 <DMA2_Stream7_IRQHandler+0xe8>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8002730:	d00f      	beq.n	8002752 <DMA2_Stream7_IRQHandler+0xb6>
	{
		if (__DMA2_Stream7_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8002732:	4b15      	ldr	r3, [pc, #84]	@ (8002788 <DMA2_Stream7_IRQHandler+0xec>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002738:	b15b      	cbz	r3, 8002752 <DMA2_Stream7_IRQHandler+0xb6>
		{
			__DMA2_Stream7_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 800273a:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTCIF7;
 800273c:	4a10      	ldr	r2, [pc, #64]	@ (8002780 <DMA2_Stream7_IRQHandler+0xe4>)
 800273e:	68d3      	ldr	r3, [r2, #12]
 8002740:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002744:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream7_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8002746:	4b10      	ldr	r3, [pc, #64]	@ (8002788 <DMA2_Stream7_IRQHandler+0xec>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800274c:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8002750:	d00b      	beq.n	800276a <DMA2_Stream7_IRQHandler+0xce>
					__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 8002752:	bd08      	pop	{r3, pc}
				if((__DMA2_Stream7_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8002754:	685a      	ldr	r2, [r3, #4]
 8002756:	6812      	ldr	r2, [r2, #0]
 8002758:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 800275c:	d002      	beq.n	8002764 <DMA2_Stream7_IRQHandler+0xc8>
					__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800275e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002760:	4798      	blx	r3
 8002762:	e7e1      	b.n	8002728 <DMA2_Stream7_IRQHandler+0x8c>
					__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8002764:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002766:	4798      	blx	r3
 8002768:	e7de      	b.n	8002728 <DMA2_Stream7_IRQHandler+0x8c>
				if((__DMA2_Stream7_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800276a:	685a      	ldr	r2, [r3, #4]
 800276c:	6812      	ldr	r2, [r2, #0]
 800276e:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8002772:	d002      	beq.n	800277a <DMA2_Stream7_IRQHandler+0xde>
					__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8002774:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002776:	4798      	blx	r3
 8002778:	e7eb      	b.n	8002752 <DMA2_Stream7_IRQHandler+0xb6>
					__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800277a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800277c:	4798      	blx	r3
}
 800277e:	e7e8      	b.n	8002752 <DMA2_Stream7_IRQHandler+0xb6>
 8002780:	40026400 	.word	0x40026400
 8002784:	200003fc 	.word	0x200003fc
 8002788:	20000404 	.word	0x20000404

0800278c <DMA_Clock_Enable>:
 *
 * @param[in] config Pointer to the `DMA_Config` structure that contains the DMA controller configuration.
 */
void DMA_Clock_Enable(DMA_Config *config)
{
	if(config -> Request.Controller == DMA1){
 800278c:	6802      	ldr	r2, [r0, #0]
 800278e:	4b0a      	ldr	r3, [pc, #40]	@ (80027b8 <DMA_Clock_Enable+0x2c>)
 8002790:	429a      	cmp	r2, r3
 8002792:	d004      	beq.n	800279e <DMA_Clock_Enable+0x12>
		RCC -> AHB1ENR |= RCC_AHB1ENR_DMA1EN;
	}
	if(config -> Request.Controller == DMA2)
 8002794:	6802      	ldr	r2, [r0, #0]
 8002796:	4b09      	ldr	r3, [pc, #36]	@ (80027bc <DMA_Clock_Enable+0x30>)
 8002798:	429a      	cmp	r2, r3
 800279a:	d006      	beq.n	80027aa <DMA_Clock_Enable+0x1e>
	{
		RCC -> AHB1ENR |= RCC_AHB1ENR_DMA2EN;
	}
}
 800279c:	4770      	bx	lr
		RCC -> AHB1ENR |= RCC_AHB1ENR_DMA1EN;
 800279e:	4a08      	ldr	r2, [pc, #32]	@ (80027c0 <DMA_Clock_Enable+0x34>)
 80027a0:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80027a2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80027a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80027a8:	e7f4      	b.n	8002794 <DMA_Clock_Enable+0x8>
		RCC -> AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 80027aa:	4a05      	ldr	r2, [pc, #20]	@ (80027c0 <DMA_Clock_Enable+0x34>)
 80027ac:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80027ae:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80027b2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80027b4:	e7f2      	b.n	800279c <DMA_Clock_Enable+0x10>
 80027b6:	bf00      	nop
 80027b8:	40026000 	.word	0x40026000
 80027bc:	40026400 	.word	0x40026400
 80027c0:	40023800 	.word	0x40023800

080027c4 <DMA_Init>:
 * @param[in] config Pointer to the `DMA_Config` structure containing the configuration parameters.
 *
 * @return int8_t Returns 1 on successful initialization, or -1 if an error occurs.
 */
int8_t DMA_Init(DMA_Config *config)
{
 80027c4:	b510      	push	{r4, lr}
 80027c6:	4604      	mov	r4, r0
	//	DMA_Clock_Disable(config);
	DMA_Clock_Enable(config);  // Enable the clock for the specified DMA controller
 80027c8:	f7ff ffe0 	bl	800278c <DMA_Clock_Enable>

	if (config->Request.Stream->CR & DMA_SxCR_EN)
 80027cc:	6863      	ldr	r3, [r4, #4]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	f012 0f01 	tst.w	r2, #1
 80027d4:	d008      	beq.n	80027e8 <DMA_Init+0x24>
	{
		config->Request.Stream->CR &= ~DMA_SxCR_EN;
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	f022 0201 	bic.w	r2, r2, #1
 80027dc:	601a      	str	r2, [r3, #0]
		while (config->Request.Stream->CR & DMA_SxCR_EN);  // Wait until disabled
 80027de:	6863      	ldr	r3, [r4, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f013 0f01 	tst.w	r3, #1
 80027e6:	d1fa      	bne.n	80027de <DMA_Init+0x1a>
	}


	config->Request.Stream->CR |= config->Request.channel << DMA_SxCR_CHSEL_Pos;  // Set the DMA channel
 80027e8:	6862      	ldr	r2, [r4, #4]
 80027ea:	6813      	ldr	r3, [r2, #0]
 80027ec:	7a21      	ldrb	r1, [r4, #8]
 80027ee:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 80027f2:	6013      	str	r3, [r2, #0]
	config->Request.Stream->CR |= config->circular_mode;  // Configure circular mode
 80027f4:	6862      	ldr	r2, [r4, #4]
 80027f6:	6813      	ldr	r3, [r2, #0]
 80027f8:	69a1      	ldr	r1, [r4, #24]
 80027fa:	430b      	orrs	r3, r1
 80027fc:	6013      	str	r3, [r2, #0]
	config->Request.Stream->CR |= config->flow_control;  // Set flow control
 80027fe:	6862      	ldr	r2, [r4, #4]
 8002800:	6813      	ldr	r3, [r2, #0]
 8002802:	68e1      	ldr	r1, [r4, #12]
 8002804:	430b      	orrs	r3, r1
 8002806:	6013      	str	r3, [r2, #0]
	config->Request.Stream->CR |= config->priority_level;  // Set priority level
 8002808:	6862      	ldr	r2, [r4, #4]
 800280a:	6813      	ldr	r3, [r2, #0]
 800280c:	6961      	ldr	r1, [r4, #20]
 800280e:	430b      	orrs	r3, r1
 8002810:	6013      	str	r3, [r2, #0]
	config->Request.Stream->CR |= config->memory_data_size;  // Set memory data size
 8002812:	6862      	ldr	r2, [r4, #4]
 8002814:	6813      	ldr	r3, [r2, #0]
 8002816:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8002818:	430b      	orrs	r3, r1
 800281a:	6013      	str	r3, [r2, #0]
	config->Request.Stream->CR |= config->peripheral_data_size;  // Set peripheral data size
 800281c:	6862      	ldr	r2, [r4, #4]
 800281e:	6813      	ldr	r3, [r2, #0]
 8002820:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8002822:	430b      	orrs	r3, r1
 8002824:	6013      	str	r3, [r2, #0]
	config->Request.Stream->CR |= config->transfer_direction;  // Set transfer direction
 8002826:	6862      	ldr	r2, [r4, #4]
 8002828:	6813      	ldr	r3, [r2, #0]
 800282a:	6921      	ldr	r1, [r4, #16]
 800282c:	430b      	orrs	r3, r1
 800282e:	6013      	str	r3, [r2, #0]

	// Configure DMA interrupts if enabled


	if(config->interrupts != DMA_Configuration.DMA_Interrupts.Disable)
 8002830:	69e3      	ldr	r3, [r4, #28]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d031      	beq.n	800289a <DMA_Init+0xd6>
	{

		if(config->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 8002836:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800283a:	d003      	beq.n	8002844 <DMA_Init+0x80>
		{
			config->Request.Stream->FCR |= config->interrupts;
 800283c:	6862      	ldr	r2, [r4, #4]
 800283e:	6951      	ldr	r1, [r2, #20]
 8002840:	430b      	orrs	r3, r1
 8002842:	6153      	str	r3, [r2, #20]
		}

		if(config->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 8002844:	69e3      	ldr	r3, [r4, #28]
 8002846:	f013 0f10 	tst.w	r3, #16
 800284a:	d004      	beq.n	8002856 <DMA_Init+0x92>
		{
			config->Request.Stream->CR |= DMA_SxCR_TCIE;
 800284c:	6862      	ldr	r2, [r4, #4]
 800284e:	6813      	ldr	r3, [r2, #0]
 8002850:	f043 0310 	orr.w	r3, r3, #16
 8002854:	6013      	str	r3, [r2, #0]
		}

		if(config->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 8002856:	69e3      	ldr	r3, [r4, #28]
 8002858:	f013 0f08 	tst.w	r3, #8
 800285c:	d004      	beq.n	8002868 <DMA_Init+0xa4>
		{
			config->Request.Stream->CR |= DMA_SxCR_HTIE;
 800285e:	6862      	ldr	r2, [r4, #4]
 8002860:	6813      	ldr	r3, [r2, #0]
 8002862:	f043 0308 	orr.w	r3, r3, #8
 8002866:	6013      	str	r3, [r2, #0]
		}

		if(config->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 8002868:	69e3      	ldr	r3, [r4, #28]
 800286a:	f013 0f04 	tst.w	r3, #4
 800286e:	d004      	beq.n	800287a <DMA_Init+0xb6>
		{
			config->Request.Stream->CR |= DMA_SxCR_TEIE;
 8002870:	6862      	ldr	r2, [r4, #4]
 8002872:	6813      	ldr	r3, [r2, #0]
 8002874:	f043 0304 	orr.w	r3, r3, #4
 8002878:	6013      	str	r3, [r2, #0]
		}
		if(config->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 800287a:	69e3      	ldr	r3, [r4, #28]
 800287c:	f013 0f02 	tst.w	r3, #2
 8002880:	d004      	beq.n	800288c <DMA_Init+0xc8>
		{
			config->Request.Stream->CR |= DMA_SxCR_DMEIE;
 8002882:	6862      	ldr	r2, [r4, #4]
 8002884:	6813      	ldr	r3, [r2, #0]
 8002886:	f043 0302 	orr.w	r3, r3, #2
 800288a:	6013      	str	r3, [r2, #0]
		}

		// Enable the corresponding NVIC interrupt for the DMA stream
		if(config->Request.Controller == DMA1)
 800288c:	6823      	ldr	r3, [r4, #0]
 800288e:	4a64      	ldr	r2, [pc, #400]	@ (8002a20 <DMA_Init+0x25c>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d01b      	beq.n	80028cc <DMA_Init+0x108>
			else if(config->Request.Stream == DMA1_Stream7){
				__DMA1_Stream7_Config__ = config;
				NVIC_EnableIRQ(DMA1_Stream7_IRQn);
			}
		}
		else if(config->Request.Controller == DMA2)
 8002894:	4a63      	ldr	r2, [pc, #396]	@ (8002a24 <DMA_Init+0x260>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d069      	beq.n	800296e <DMA_Init+0x1aa>
			}
		}
	}

	// Configure memory and peripheral pointer increments
	config->Request.Stream->CR |= config->memory_pointer_increment;
 800289a:	6862      	ldr	r2, [r4, #4]
 800289c:	6813      	ldr	r3, [r2, #0]
 800289e:	8c21      	ldrh	r1, [r4, #32]
 80028a0:	430b      	orrs	r3, r1
 80028a2:	6013      	str	r3, [r2, #0]
	config->Request.Stream->CR |= config->peripheral_pointer_increment;
 80028a4:	6862      	ldr	r2, [r4, #4]
 80028a6:	6813      	ldr	r3, [r2, #0]
 80028a8:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
 80028aa:	430b      	orrs	r3, r1
 80028ac:	6013      	str	r3, [r2, #0]

	// Configure circular mode
	if(config->circular_mode == DMA_Configuration.Circular_Mode.Enable)
 80028ae:	69a3      	ldr	r3, [r4, #24]
 80028b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028b4:	f000 80aa 	beq.w	8002a0c <DMA_Init+0x248>
	{
		config->Request.Stream->CR |= DMA_SxCR_CIRC;
	}
	else if(config->circular_mode == DMA_Configuration.Circular_Mode.Disable)
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	f040 80ae 	bne.w	8002a1a <DMA_Init+0x256>
	{
		config->Request.Stream->CR &= ~DMA_SxCR_CIRC;
 80028be:	6862      	ldr	r2, [r4, #4]
 80028c0:	6813      	ldr	r3, [r2, #0]
 80028c2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80028c6:	6013      	str	r3, [r2, #0]
	else
	{
		return -1;  // Return -1 if circular mode configuration is invalid
	}

	return 1;  // Return 1 on successful initialization
 80028c8:	2001      	movs	r0, #1
}
 80028ca:	bd10      	pop	{r4, pc}
			if(config->Request.Stream == DMA1_Stream0){
 80028cc:	6863      	ldr	r3, [r4, #4]
 80028ce:	3210      	adds	r2, #16
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d01b      	beq.n	800290c <DMA_Init+0x148>
			else if(config->Request.Stream == DMA1_Stream1){
 80028d4:	4a54      	ldr	r2, [pc, #336]	@ (8002a28 <DMA_Init+0x264>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d01f      	beq.n	800291a <DMA_Init+0x156>
			else if(config->Request.Stream == DMA1_Stream2){
 80028da:	4a54      	ldr	r2, [pc, #336]	@ (8002a2c <DMA_Init+0x268>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d023      	beq.n	8002928 <DMA_Init+0x164>
			else if(config->Request.Stream == DMA1_Stream3){
 80028e0:	4a53      	ldr	r2, [pc, #332]	@ (8002a30 <DMA_Init+0x26c>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d027      	beq.n	8002936 <DMA_Init+0x172>
			else if(config->Request.Stream == DMA1_Stream4){
 80028e6:	4a53      	ldr	r2, [pc, #332]	@ (8002a34 <DMA_Init+0x270>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d02b      	beq.n	8002944 <DMA_Init+0x180>
			else if(config->Request.Stream == DMA1_Stream5){
 80028ec:	4a52      	ldr	r2, [pc, #328]	@ (8002a38 <DMA_Init+0x274>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d02f      	beq.n	8002952 <DMA_Init+0x18e>
			else if(config->Request.Stream == DMA1_Stream6) {
 80028f2:	4a52      	ldr	r2, [pc, #328]	@ (8002a3c <DMA_Init+0x278>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d033      	beq.n	8002960 <DMA_Init+0x19c>
			else if(config->Request.Stream == DMA1_Stream7){
 80028f8:	4a51      	ldr	r2, [pc, #324]	@ (8002a40 <DMA_Init+0x27c>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d1cd      	bne.n	800289a <DMA_Init+0xd6>
				__DMA1_Stream7_Config__ = config;
 80028fe:	4b51      	ldr	r3, [pc, #324]	@ (8002a44 <DMA_Init+0x280>)
 8002900:	601c      	str	r4, [r3, #0]
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002902:	4b51      	ldr	r3, [pc, #324]	@ (8002a48 <DMA_Init+0x284>)
 8002904:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002908:	605a      	str	r2, [r3, #4]
    __COMPILER_BARRIER();
 800290a:	e7c6      	b.n	800289a <DMA_Init+0xd6>
				__DMA1_Stream0_Config__ = config;
 800290c:	4b4f      	ldr	r3, [pc, #316]	@ (8002a4c <DMA_Init+0x288>)
 800290e:	601c      	str	r4, [r3, #0]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002910:	4b4d      	ldr	r3, [pc, #308]	@ (8002a48 <DMA_Init+0x284>)
 8002912:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002916:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
 8002918:	e7bf      	b.n	800289a <DMA_Init+0xd6>
				__DMA1_Stream1_Config__ = config;
 800291a:	4b4d      	ldr	r3, [pc, #308]	@ (8002a50 <DMA_Init+0x28c>)
 800291c:	601c      	str	r4, [r3, #0]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800291e:	4b4a      	ldr	r3, [pc, #296]	@ (8002a48 <DMA_Init+0x284>)
 8002920:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002924:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
 8002926:	e7b8      	b.n	800289a <DMA_Init+0xd6>
				__DMA1_Stream2_Config__ = config;
 8002928:	4b4a      	ldr	r3, [pc, #296]	@ (8002a54 <DMA_Init+0x290>)
 800292a:	601c      	str	r4, [r3, #0]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800292c:	4b46      	ldr	r3, [pc, #280]	@ (8002a48 <DMA_Init+0x284>)
 800292e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002932:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
 8002934:	e7b1      	b.n	800289a <DMA_Init+0xd6>
				__DMA1_Stream3_Config__ = config;
 8002936:	4b48      	ldr	r3, [pc, #288]	@ (8002a58 <DMA_Init+0x294>)
 8002938:	601c      	str	r4, [r3, #0]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800293a:	4b43      	ldr	r3, [pc, #268]	@ (8002a48 <DMA_Init+0x284>)
 800293c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002940:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
 8002942:	e7aa      	b.n	800289a <DMA_Init+0xd6>
				__DMA1_Stream4_Config__ = config;
 8002944:	4b45      	ldr	r3, [pc, #276]	@ (8002a5c <DMA_Init+0x298>)
 8002946:	601c      	str	r4, [r3, #0]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002948:	4b3f      	ldr	r3, [pc, #252]	@ (8002a48 <DMA_Init+0x284>)
 800294a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800294e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
 8002950:	e7a3      	b.n	800289a <DMA_Init+0xd6>
				__DMA1_Stream5_Config__ = config;
 8002952:	4b43      	ldr	r3, [pc, #268]	@ (8002a60 <DMA_Init+0x29c>)
 8002954:	601c      	str	r4, [r3, #0]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002956:	4b3c      	ldr	r3, [pc, #240]	@ (8002a48 <DMA_Init+0x284>)
 8002958:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800295c:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
 800295e:	e79c      	b.n	800289a <DMA_Init+0xd6>
				__DMA1_Stream6_Config__ = config;
 8002960:	4b40      	ldr	r3, [pc, #256]	@ (8002a64 <DMA_Init+0x2a0>)
 8002962:	601c      	str	r4, [r3, #0]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002964:	4b38      	ldr	r3, [pc, #224]	@ (8002a48 <DMA_Init+0x284>)
 8002966:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800296a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
 800296c:	e795      	b.n	800289a <DMA_Init+0xd6>
			if(config->Request.Stream == DMA2_Stream0){
 800296e:	6863      	ldr	r3, [r4, #4]
 8002970:	3210      	adds	r2, #16
 8002972:	4293      	cmp	r3, r2
 8002974:	d01b      	beq.n	80029ae <DMA_Init+0x1ea>
			else if(config->Request.Stream == DMA2_Stream1){
 8002976:	4a3c      	ldr	r2, [pc, #240]	@ (8002a68 <DMA_Init+0x2a4>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d01f      	beq.n	80029bc <DMA_Init+0x1f8>
			else if(config->Request.Stream == DMA2_Stream2){
 800297c:	4a3b      	ldr	r2, [pc, #236]	@ (8002a6c <DMA_Init+0x2a8>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d023      	beq.n	80029ca <DMA_Init+0x206>
			else if(config->Request.Stream == DMA2_Stream3){
 8002982:	4a3b      	ldr	r2, [pc, #236]	@ (8002a70 <DMA_Init+0x2ac>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d027      	beq.n	80029d8 <DMA_Init+0x214>
			else if(config->Request.Stream == DMA2_Stream4){
 8002988:	4a3a      	ldr	r2, [pc, #232]	@ (8002a74 <DMA_Init+0x2b0>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d02b      	beq.n	80029e6 <DMA_Init+0x222>
			else if(config->Request.Stream == DMA2_Stream5){
 800298e:	4a3a      	ldr	r2, [pc, #232]	@ (8002a78 <DMA_Init+0x2b4>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d02f      	beq.n	80029f4 <DMA_Init+0x230>
			else if(config->Request.Stream == DMA2_Stream6){
 8002994:	4a39      	ldr	r2, [pc, #228]	@ (8002a7c <DMA_Init+0x2b8>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d032      	beq.n	8002a00 <DMA_Init+0x23c>
			else if(config->Request.Stream == DMA2_Stream7){
 800299a:	4a39      	ldr	r2, [pc, #228]	@ (8002a80 <DMA_Init+0x2bc>)
 800299c:	4293      	cmp	r3, r2
 800299e:	f47f af7c 	bne.w	800289a <DMA_Init+0xd6>
				__DMA2_Stream7_Config__ = config;
 80029a2:	4b38      	ldr	r3, [pc, #224]	@ (8002a84 <DMA_Init+0x2c0>)
 80029a4:	601c      	str	r4, [r3, #0]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029a6:	4b28      	ldr	r3, [pc, #160]	@ (8002a48 <DMA_Init+0x284>)
 80029a8:	2240      	movs	r2, #64	@ 0x40
 80029aa:	609a      	str	r2, [r3, #8]
    __COMPILER_BARRIER();
 80029ac:	e775      	b.n	800289a <DMA_Init+0xd6>
				__DMA2_Stream0_Config__ = config;
 80029ae:	4b36      	ldr	r3, [pc, #216]	@ (8002a88 <DMA_Init+0x2c4>)
 80029b0:	601c      	str	r4, [r3, #0]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029b2:	4b25      	ldr	r3, [pc, #148]	@ (8002a48 <DMA_Init+0x284>)
 80029b4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80029b8:	605a      	str	r2, [r3, #4]
    __COMPILER_BARRIER();
 80029ba:	e76e      	b.n	800289a <DMA_Init+0xd6>
				__DMA2_Stream1_Config__ = config;
 80029bc:	4b33      	ldr	r3, [pc, #204]	@ (8002a8c <DMA_Init+0x2c8>)
 80029be:	601c      	str	r4, [r3, #0]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029c0:	4b21      	ldr	r3, [pc, #132]	@ (8002a48 <DMA_Init+0x284>)
 80029c2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80029c6:	605a      	str	r2, [r3, #4]
    __COMPILER_BARRIER();
 80029c8:	e767      	b.n	800289a <DMA_Init+0xd6>
				__DMA2_Stream2_Config__ = config;
 80029ca:	4b31      	ldr	r3, [pc, #196]	@ (8002a90 <DMA_Init+0x2cc>)
 80029cc:	601c      	str	r4, [r3, #0]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029ce:	4b1e      	ldr	r3, [pc, #120]	@ (8002a48 <DMA_Init+0x284>)
 80029d0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80029d4:	605a      	str	r2, [r3, #4]
    __COMPILER_BARRIER();
 80029d6:	e760      	b.n	800289a <DMA_Init+0xd6>
				__DMA2_Stream3_Config__ = config;
 80029d8:	4b2e      	ldr	r3, [pc, #184]	@ (8002a94 <DMA_Init+0x2d0>)
 80029da:	601c      	str	r4, [r3, #0]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029dc:	4b1a      	ldr	r3, [pc, #104]	@ (8002a48 <DMA_Init+0x284>)
 80029de:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80029e2:	605a      	str	r2, [r3, #4]
    __COMPILER_BARRIER();
 80029e4:	e759      	b.n	800289a <DMA_Init+0xd6>
				__DMA2_Stream4_Config__ = config;
 80029e6:	4b2c      	ldr	r3, [pc, #176]	@ (8002a98 <DMA_Init+0x2d4>)
 80029e8:	601c      	str	r4, [r3, #0]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029ea:	4b17      	ldr	r3, [pc, #92]	@ (8002a48 <DMA_Init+0x284>)
 80029ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80029f0:	605a      	str	r2, [r3, #4]
    __COMPILER_BARRIER();
 80029f2:	e752      	b.n	800289a <DMA_Init+0xd6>
				__DMA2_Stream5_Config__ = config;
 80029f4:	4b29      	ldr	r3, [pc, #164]	@ (8002a9c <DMA_Init+0x2d8>)
 80029f6:	601c      	str	r4, [r3, #0]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029f8:	4b13      	ldr	r3, [pc, #76]	@ (8002a48 <DMA_Init+0x284>)
 80029fa:	2210      	movs	r2, #16
 80029fc:	609a      	str	r2, [r3, #8]
    __COMPILER_BARRIER();
 80029fe:	e74c      	b.n	800289a <DMA_Init+0xd6>
				__DMA2_Stream6_Config__ = config;
 8002a00:	4b27      	ldr	r3, [pc, #156]	@ (8002aa0 <DMA_Init+0x2dc>)
 8002a02:	601c      	str	r4, [r3, #0]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a04:	4b10      	ldr	r3, [pc, #64]	@ (8002a48 <DMA_Init+0x284>)
 8002a06:	2220      	movs	r2, #32
 8002a08:	609a      	str	r2, [r3, #8]
    __COMPILER_BARRIER();
 8002a0a:	e746      	b.n	800289a <DMA_Init+0xd6>
		config->Request.Stream->CR |= DMA_SxCR_CIRC;
 8002a0c:	6862      	ldr	r2, [r4, #4]
 8002a0e:	6813      	ldr	r3, [r2, #0]
 8002a10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a14:	6013      	str	r3, [r2, #0]
	return 1;  // Return 1 on successful initialization
 8002a16:	2001      	movs	r0, #1
 8002a18:	e757      	b.n	80028ca <DMA_Init+0x106>
		return -1;  // Return -1 if circular mode configuration is invalid
 8002a1a:	f04f 30ff 	mov.w	r0, #4294967295
 8002a1e:	e754      	b.n	80028ca <DMA_Init+0x106>
 8002a20:	40026000 	.word	0x40026000
 8002a24:	40026400 	.word	0x40026400
 8002a28:	40026028 	.word	0x40026028
 8002a2c:	40026040 	.word	0x40026040
 8002a30:	40026058 	.word	0x40026058
 8002a34:	40026070 	.word	0x40026070
 8002a38:	40026088 	.word	0x40026088
 8002a3c:	400260a0 	.word	0x400260a0
 8002a40:	400260b8 	.word	0x400260b8
 8002a44:	20000424 	.word	0x20000424
 8002a48:	e000e100 	.word	0xe000e100
 8002a4c:	20000440 	.word	0x20000440
 8002a50:	2000043c 	.word	0x2000043c
 8002a54:	20000438 	.word	0x20000438
 8002a58:	20000434 	.word	0x20000434
 8002a5c:	20000430 	.word	0x20000430
 8002a60:	2000042c 	.word	0x2000042c
 8002a64:	20000428 	.word	0x20000428
 8002a68:	40026428 	.word	0x40026428
 8002a6c:	40026440 	.word	0x40026440
 8002a70:	40026458 	.word	0x40026458
 8002a74:	40026470 	.word	0x40026470
 8002a78:	40026488 	.word	0x40026488
 8002a7c:	400264a0 	.word	0x400264a0
 8002a80:	400264b8 	.word	0x400264b8
 8002a84:	20000404 	.word	0x20000404
 8002a88:	20000420 	.word	0x20000420
 8002a8c:	2000041c 	.word	0x2000041c
 8002a90:	20000418 	.word	0x20000418
 8002a94:	20000414 	.word	0x20000414
 8002a98:	20000410 	.word	0x20000410
 8002a9c:	2000040c 	.word	0x2000040c
 8002aa0:	20000408 	.word	0x20000408

08002aa4 <DMA_Set_Target>:
 *
 * @param[in] config Pointer to the `DMA_Config` structure containing the target configuration.
 */
void DMA_Set_Target(DMA_Config *config)
{
	config -> Request.Stream -> CR &= ~DMA_SxCR_EN;
 8002aa4:	6842      	ldr	r2, [r0, #4]
 8002aa6:	6813      	ldr	r3, [r2, #0]
 8002aa8:	f023 0301 	bic.w	r3, r3, #1
 8002aac:	6013      	str	r3, [r2, #0]



	if(config -> circular_mode == DMA_Configuration.Circular_Mode.Disable)
 8002aae:	6983      	ldr	r3, [r0, #24]
 8002ab0:	bb13      	cbnz	r3, 8002af8 <DMA_Set_Target+0x54>
	{
		config -> Request.Stream -> CR &= ~DMA_SxCR_CIRC;
 8002ab2:	6842      	ldr	r2, [r0, #4]
 8002ab4:	6813      	ldr	r3, [r2, #0]
 8002ab6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002aba:	6013      	str	r3, [r2, #0]
	{
		config -> Request.Stream -> CR |= DMA_SxCR_CIRC;
	}

	// Clear previous data size and memory increment settings
	config -> Request.Stream -> CR &= ~(DMA_SxCR_MSIZE | DMA_SxCR_PSIZE | DMA_SxCR_MINC);
 8002abc:	6842      	ldr	r2, [r0, #4]
 8002abe:	6813      	ldr	r3, [r2, #0]
 8002ac0:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8002ac4:	6013      	str	r3, [r2, #0]

	// Set the peripheral data size
	config -> Request.Stream -> CR |= config -> peripheral_data_size;
 8002ac6:	6842      	ldr	r2, [r0, #4]
 8002ac8:	6813      	ldr	r3, [r2, #0]
 8002aca:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8002acc:	430b      	orrs	r3, r1
 8002ace:	6013      	str	r3, [r2, #0]

	// Set the memory data size
	config -> Request.Stream -> CR |= config -> memory_data_size;
 8002ad0:	6842      	ldr	r2, [r0, #4]
 8002ad2:	6813      	ldr	r3, [r2, #0]
 8002ad4:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8002ad6:	430b      	orrs	r3, r1
 8002ad8:	6013      	str	r3, [r2, #0]

	// Set the number of data items to be transferred
	config -> Request.Stream -> NDTR = config -> buffer_length;
 8002ada:	6843      	ldr	r3, [r0, #4]
 8002adc:	8e82      	ldrh	r2, [r0, #52]	@ 0x34
 8002ade:	605a      	str	r2, [r3, #4]

	// Set memory pointer increment mode
	config -> Request.Stream -> CR |= DMA_SxCR_MINC;
 8002ae0:	6842      	ldr	r2, [r0, #4]
 8002ae2:	6813      	ldr	r3, [r2, #0]
 8002ae4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ae8:	6013      	str	r3, [r2, #0]

	// Set the memory address
	config -> Request.Stream -> M0AR = (uint32_t)config->memory_address;
 8002aea:	6843      	ldr	r3, [r0, #4]
 8002aec:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8002aee:	60da      	str	r2, [r3, #12]

	// Set the peripheral address
	config -> Request.Stream -> PAR = (uint32_t)config->peripheral_address;
 8002af0:	6843      	ldr	r3, [r0, #4]
 8002af2:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8002af4:	609a      	str	r2, [r3, #8]
}
 8002af6:	4770      	bx	lr
	else if(config -> circular_mode == DMA_Configuration.Circular_Mode.Enable)
 8002af8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002afc:	d1de      	bne.n	8002abc <DMA_Set_Target+0x18>
		config -> Request.Stream -> CR |= DMA_SxCR_CIRC;
 8002afe:	6842      	ldr	r2, [r0, #4]
 8002b00:	6813      	ldr	r3, [r2, #0]
 8002b02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b06:	6013      	str	r3, [r2, #0]
 8002b08:	e7d8      	b.n	8002abc <DMA_Set_Target+0x18>
	...

08002b0c <DMA_Set_Trigger>:
{
	// Bit shift values for streams 0 to 7
	static const uint8_t LIFCR_Shifts[4] = {0, 6, 16, 22};
	static const uint8_t HIFCR_Shifts[4] = {0, 6, 16, 22};

	DMA_TypeDef *controller = config->Request.Controller;
 8002b0c:	6803      	ldr	r3, [r0, #0]
	DMA_Stream_TypeDef *stream = config->Request.Stream;
 8002b0e:	6842      	ldr	r2, [r0, #4]
	uint32_t shift;

	if (controller == DMA1 || controller == DMA2)
 8002b10:	492d      	ldr	r1, [pc, #180]	@ (8002bc8 <DMA_Set_Trigger+0xbc>)
 8002b12:	428b      	cmp	r3, r1
 8002b14:	d003      	beq.n	8002b1e <DMA_Set_Trigger+0x12>
 8002b16:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8002b1a:	428b      	cmp	r3, r1
 8002b1c:	d116      	bne.n	8002b4c <DMA_Set_Trigger+0x40>
	{
		// Determine the correct shift value and clear the corresponding flags in LIFCR or HIFCR
		if (stream >= DMA1_Stream0 && stream <= DMA1_Stream3)
 8002b1e:	492b      	ldr	r1, [pc, #172]	@ (8002bcc <DMA_Set_Trigger+0xc0>)
 8002b20:	4411      	add	r1, r2
 8002b22:	2948      	cmp	r1, #72	@ 0x48
 8002b24:	d813      	bhi.n	8002b4e <DMA_Set_Trigger+0x42>
		{
			shift = LIFCR_Shifts[stream - DMA1_Stream0];
 8002b26:	4929      	ldr	r1, [pc, #164]	@ (8002bcc <DMA_Set_Trigger+0xc0>)
 8002b28:	4411      	add	r1, r2
 8002b2a:	10c9      	asrs	r1, r1, #3
 8002b2c:	4828      	ldr	r0, [pc, #160]	@ (8002bd0 <DMA_Set_Trigger+0xc4>)
 8002b2e:	fb00 f101 	mul.w	r1, r0, r1
 8002b32:	4828      	ldr	r0, [pc, #160]	@ (8002bd4 <DMA_Set_Trigger+0xc8>)
 8002b34:	f810 c001 	ldrb.w	ip, [r0, r1]
			controller->LIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
 8002b38:	6899      	ldr	r1, [r3, #8]
 8002b3a:	203f      	movs	r0, #63	@ 0x3f
 8002b3c:	fa00 f00c 	lsl.w	r0, r0, ip
 8002b40:	4301      	orrs	r1, r0
 8002b42:	6099      	str	r1, [r3, #8]
		{
			shift = HIFCR_Shifts[stream - DMA2_Stream4];
			controller->HIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
		}

		stream->CR |= DMA_SxCR_EN;  // Enable the DMA stream
 8002b44:	6813      	ldr	r3, [r2, #0]
 8002b46:	f043 0301 	orr.w	r3, r3, #1
 8002b4a:	6013      	str	r3, [r2, #0]
	}
}
 8002b4c:	4770      	bx	lr
		else if (stream >= DMA1_Stream4 && stream <= DMA1_Stream7)
 8002b4e:	4922      	ldr	r1, [pc, #136]	@ (8002bd8 <DMA_Set_Trigger+0xcc>)
 8002b50:	4411      	add	r1, r2
 8002b52:	2948      	cmp	r1, #72	@ 0x48
 8002b54:	d80f      	bhi.n	8002b76 <DMA_Set_Trigger+0x6a>
			shift = HIFCR_Shifts[stream - DMA1_Stream4];
 8002b56:	4920      	ldr	r1, [pc, #128]	@ (8002bd8 <DMA_Set_Trigger+0xcc>)
 8002b58:	4411      	add	r1, r2
 8002b5a:	10c9      	asrs	r1, r1, #3
 8002b5c:	481c      	ldr	r0, [pc, #112]	@ (8002bd0 <DMA_Set_Trigger+0xc4>)
 8002b5e:	fb00 f101 	mul.w	r1, r0, r1
 8002b62:	481e      	ldr	r0, [pc, #120]	@ (8002bdc <DMA_Set_Trigger+0xd0>)
 8002b64:	f810 c001 	ldrb.w	ip, [r0, r1]
			controller->HIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
 8002b68:	68d9      	ldr	r1, [r3, #12]
 8002b6a:	203f      	movs	r0, #63	@ 0x3f
 8002b6c:	fa00 f00c 	lsl.w	r0, r0, ip
 8002b70:	4301      	orrs	r1, r0
 8002b72:	60d9      	str	r1, [r3, #12]
 8002b74:	e7e6      	b.n	8002b44 <DMA_Set_Trigger+0x38>
		else if (stream >= DMA2_Stream0 && stream <= DMA2_Stream3)
 8002b76:	491a      	ldr	r1, [pc, #104]	@ (8002be0 <DMA_Set_Trigger+0xd4>)
 8002b78:	4411      	add	r1, r2
 8002b7a:	2948      	cmp	r1, #72	@ 0x48
 8002b7c:	d80f      	bhi.n	8002b9e <DMA_Set_Trigger+0x92>
			shift = LIFCR_Shifts[stream - DMA2_Stream0];
 8002b7e:	4918      	ldr	r1, [pc, #96]	@ (8002be0 <DMA_Set_Trigger+0xd4>)
 8002b80:	4411      	add	r1, r2
 8002b82:	10c9      	asrs	r1, r1, #3
 8002b84:	4812      	ldr	r0, [pc, #72]	@ (8002bd0 <DMA_Set_Trigger+0xc4>)
 8002b86:	fb00 f101 	mul.w	r1, r0, r1
 8002b8a:	4812      	ldr	r0, [pc, #72]	@ (8002bd4 <DMA_Set_Trigger+0xc8>)
 8002b8c:	f810 c001 	ldrb.w	ip, [r0, r1]
			controller->LIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
 8002b90:	6899      	ldr	r1, [r3, #8]
 8002b92:	203f      	movs	r0, #63	@ 0x3f
 8002b94:	fa00 f00c 	lsl.w	r0, r0, ip
 8002b98:	4301      	orrs	r1, r0
 8002b9a:	6099      	str	r1, [r3, #8]
 8002b9c:	e7d2      	b.n	8002b44 <DMA_Set_Trigger+0x38>
		else if (stream >= DMA2_Stream4 && stream <= DMA2_Stream7)
 8002b9e:	4911      	ldr	r1, [pc, #68]	@ (8002be4 <DMA_Set_Trigger+0xd8>)
 8002ba0:	4411      	add	r1, r2
 8002ba2:	2948      	cmp	r1, #72	@ 0x48
 8002ba4:	d8ce      	bhi.n	8002b44 <DMA_Set_Trigger+0x38>
			shift = HIFCR_Shifts[stream - DMA2_Stream4];
 8002ba6:	490f      	ldr	r1, [pc, #60]	@ (8002be4 <DMA_Set_Trigger+0xd8>)
 8002ba8:	4411      	add	r1, r2
 8002baa:	10c9      	asrs	r1, r1, #3
 8002bac:	4808      	ldr	r0, [pc, #32]	@ (8002bd0 <DMA_Set_Trigger+0xc4>)
 8002bae:	fb00 f101 	mul.w	r1, r0, r1
 8002bb2:	480a      	ldr	r0, [pc, #40]	@ (8002bdc <DMA_Set_Trigger+0xd0>)
 8002bb4:	f810 c001 	ldrb.w	ip, [r0, r1]
			controller->HIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
 8002bb8:	68d9      	ldr	r1, [r3, #12]
 8002bba:	203f      	movs	r0, #63	@ 0x3f
 8002bbc:	fa00 f00c 	lsl.w	r0, r0, ip
 8002bc0:	4301      	orrs	r1, r0
 8002bc2:	60d9      	str	r1, [r3, #12]
 8002bc4:	e7be      	b.n	8002b44 <DMA_Set_Trigger+0x38>
 8002bc6:	bf00      	nop
 8002bc8:	40026000 	.word	0x40026000
 8002bcc:	bffd9ff0 	.word	0xbffd9ff0
 8002bd0:	aaaaaaab 	.word	0xaaaaaaab
 8002bd4:	080078b8 	.word	0x080078b8
 8002bd8:	bffd9f90 	.word	0xbffd9f90
 8002bdc:	080078b4 	.word	0x080078b4
 8002be0:	bffd9bf0 	.word	0xbffd9bf0
 8002be4:	bffd9b90 	.word	0xbffd9b90

08002be8 <EXTI0_IRQHandler>:
 * @brief Interrupt handler for EXTI line 0.
 *
 * This ISR handles interrupts for pin 0, invoking the associated callback
 * function if one is registered.
 */
void EXTI0_IRQHandler(void) {
 8002be8:	b508      	push	{r3, lr}
    if (EXTI_ISR[0]) EXTI_ISR[0](); // Invoke registered callback
 8002bea:	4b05      	ldr	r3, [pc, #20]	@ (8002c00 <EXTI0_IRQHandler+0x18>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	b103      	cbz	r3, 8002bf2 <EXTI0_IRQHandler+0xa>
 8002bf0:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR0;        // Clear interrupt flag
 8002bf2:	4a04      	ldr	r2, [pc, #16]	@ (8002c04 <EXTI0_IRQHandler+0x1c>)
 8002bf4:	6953      	ldr	r3, [r2, #20]
 8002bf6:	f043 0301 	orr.w	r3, r3, #1
 8002bfa:	6153      	str	r3, [r2, #20]
}
 8002bfc:	bd08      	pop	{r3, pc}
 8002bfe:	bf00      	nop
 8002c00:	20000444 	.word	0x20000444
 8002c04:	40013c00 	.word	0x40013c00

08002c08 <EXTI1_IRQHandler>:

/**
 * @brief Interrupt handler for EXTI line 1.
 */
void EXTI1_IRQHandler(void) {
 8002c08:	b508      	push	{r3, lr}
    if (EXTI_ISR[1]) EXTI_ISR[1]();
 8002c0a:	4b05      	ldr	r3, [pc, #20]	@ (8002c20 <EXTI1_IRQHandler+0x18>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	b103      	cbz	r3, 8002c12 <EXTI1_IRQHandler+0xa>
 8002c10:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR1;
 8002c12:	4a04      	ldr	r2, [pc, #16]	@ (8002c24 <EXTI1_IRQHandler+0x1c>)
 8002c14:	6953      	ldr	r3, [r2, #20]
 8002c16:	f043 0302 	orr.w	r3, r3, #2
 8002c1a:	6153      	str	r3, [r2, #20]
}
 8002c1c:	bd08      	pop	{r3, pc}
 8002c1e:	bf00      	nop
 8002c20:	20000444 	.word	0x20000444
 8002c24:	40013c00 	.word	0x40013c00

08002c28 <EXTI2_IRQHandler>:

/**
 * @brief Interrupt handler for EXTI line 2.
 */
void EXTI2_IRQHandler(void) {
 8002c28:	b508      	push	{r3, lr}
    if (EXTI_ISR[2]) EXTI_ISR[2]();
 8002c2a:	4b05      	ldr	r3, [pc, #20]	@ (8002c40 <EXTI2_IRQHandler+0x18>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	b103      	cbz	r3, 8002c32 <EXTI2_IRQHandler+0xa>
 8002c30:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR2;
 8002c32:	4a04      	ldr	r2, [pc, #16]	@ (8002c44 <EXTI2_IRQHandler+0x1c>)
 8002c34:	6953      	ldr	r3, [r2, #20]
 8002c36:	f043 0304 	orr.w	r3, r3, #4
 8002c3a:	6153      	str	r3, [r2, #20]
}
 8002c3c:	bd08      	pop	{r3, pc}
 8002c3e:	bf00      	nop
 8002c40:	20000444 	.word	0x20000444
 8002c44:	40013c00 	.word	0x40013c00

08002c48 <EXTI3_IRQHandler>:

/**
 * @brief Interrupt handler for EXTI line 3.
 */
void EXTI3_IRQHandler(void) {
 8002c48:	b508      	push	{r3, lr}
    if (EXTI_ISR[3]) EXTI_ISR[3]();
 8002c4a:	4b05      	ldr	r3, [pc, #20]	@ (8002c60 <EXTI3_IRQHandler+0x18>)
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	b103      	cbz	r3, 8002c52 <EXTI3_IRQHandler+0xa>
 8002c50:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR3;
 8002c52:	4a04      	ldr	r2, [pc, #16]	@ (8002c64 <EXTI3_IRQHandler+0x1c>)
 8002c54:	6953      	ldr	r3, [r2, #20]
 8002c56:	f043 0308 	orr.w	r3, r3, #8
 8002c5a:	6153      	str	r3, [r2, #20]
}
 8002c5c:	bd08      	pop	{r3, pc}
 8002c5e:	bf00      	nop
 8002c60:	20000444 	.word	0x20000444
 8002c64:	40013c00 	.word	0x40013c00

08002c68 <EXTI4_IRQHandler>:

/**
 * @brief Interrupt handler for EXTI line 4.
 */
void EXTI4_IRQHandler(void) {
 8002c68:	b508      	push	{r3, lr}
    if (EXTI_ISR[4]) EXTI_ISR[4]();
 8002c6a:	4b05      	ldr	r3, [pc, #20]	@ (8002c80 <EXTI4_IRQHandler+0x18>)
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	b103      	cbz	r3, 8002c72 <EXTI4_IRQHandler+0xa>
 8002c70:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR4;
 8002c72:	4a04      	ldr	r2, [pc, #16]	@ (8002c84 <EXTI4_IRQHandler+0x1c>)
 8002c74:	6953      	ldr	r3, [r2, #20]
 8002c76:	f043 0310 	orr.w	r3, r3, #16
 8002c7a:	6153      	str	r3, [r2, #20]
}
 8002c7c:	bd08      	pop	{r3, pc}
 8002c7e:	bf00      	nop
 8002c80:	20000444 	.word	0x20000444
 8002c84:	40013c00 	.word	0x40013c00

08002c88 <EXTI9_5_IRQHandler>:
/**
 * @brief Interrupt handler for EXTI lines 5 to 9.
 *
 * Handles interrupts for pins 5 to 9, checking each pin for active flags.
 */
void EXTI9_5_IRQHandler(void) {
 8002c88:	b538      	push	{r3, r4, r5, lr}
    for (int i = 5; i <= 9; ++i) {
 8002c8a:	2505      	movs	r5, #5
 8002c8c:	e000      	b.n	8002c90 <EXTI9_5_IRQHandler+0x8>
 8002c8e:	3501      	adds	r5, #1
 8002c90:	2d09      	cmp	r5, #9
 8002c92:	dc10      	bgt.n	8002cb6 <EXTI9_5_IRQHandler+0x2e>
        if ((EXTI->PR & (1 << i)) && EXTI_ISR[i]) {
 8002c94:	4b08      	ldr	r3, [pc, #32]	@ (8002cb8 <EXTI9_5_IRQHandler+0x30>)
 8002c96:	695b      	ldr	r3, [r3, #20]
 8002c98:	2401      	movs	r4, #1
 8002c9a:	40ac      	lsls	r4, r5
 8002c9c:	4223      	tst	r3, r4
 8002c9e:	d0f6      	beq.n	8002c8e <EXTI9_5_IRQHandler+0x6>
 8002ca0:	4b06      	ldr	r3, [pc, #24]	@ (8002cbc <EXTI9_5_IRQHandler+0x34>)
 8002ca2:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d0f1      	beq.n	8002c8e <EXTI9_5_IRQHandler+0x6>
            EXTI_ISR[i]();        // Invoke callback for pin `i`
 8002caa:	4798      	blx	r3
            EXTI->PR |= (1 << i); // Clear interrupt flag
 8002cac:	4b02      	ldr	r3, [pc, #8]	@ (8002cb8 <EXTI9_5_IRQHandler+0x30>)
 8002cae:	695a      	ldr	r2, [r3, #20]
 8002cb0:	4314      	orrs	r4, r2
 8002cb2:	615c      	str	r4, [r3, #20]
 8002cb4:	e7eb      	b.n	8002c8e <EXTI9_5_IRQHandler+0x6>
        }
    }
}
 8002cb6:	bd38      	pop	{r3, r4, r5, pc}
 8002cb8:	40013c00 	.word	0x40013c00
 8002cbc:	20000444 	.word	0x20000444

08002cc0 <EXTI15_10_IRQHandler>:
/**
 * @brief Interrupt handler for EXTI lines 10 to 15.
 *
 * Handles interrupts for pins 10 to 15, checking each pin for active flags.
 */
void EXTI15_10_IRQHandler(void) {
 8002cc0:	b538      	push	{r3, r4, r5, lr}
    for (int i = 10; i <= 15; ++i) {
 8002cc2:	250a      	movs	r5, #10
 8002cc4:	e005      	b.n	8002cd2 <EXTI15_10_IRQHandler+0x12>
        if ((EXTI->PR & (1 << i)) && EXTI_ISR[i]) {
            EXTI_ISR[i]();        // Invoke callback for pin `i`
 8002cc6:	4798      	blx	r3
            EXTI->PR |= (1 << i); // Clear interrupt flag
 8002cc8:	4b09      	ldr	r3, [pc, #36]	@ (8002cf0 <EXTI15_10_IRQHandler+0x30>)
 8002cca:	695a      	ldr	r2, [r3, #20]
 8002ccc:	4314      	orrs	r4, r2
 8002cce:	615c      	str	r4, [r3, #20]
    for (int i = 10; i <= 15; ++i) {
 8002cd0:	3501      	adds	r5, #1
 8002cd2:	2d0f      	cmp	r5, #15
 8002cd4:	dc0b      	bgt.n	8002cee <EXTI15_10_IRQHandler+0x2e>
        if ((EXTI->PR & (1 << i)) && EXTI_ISR[i]) {
 8002cd6:	4b06      	ldr	r3, [pc, #24]	@ (8002cf0 <EXTI15_10_IRQHandler+0x30>)
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	2401      	movs	r4, #1
 8002cdc:	40ac      	lsls	r4, r5
 8002cde:	4223      	tst	r3, r4
 8002ce0:	d0f6      	beq.n	8002cd0 <EXTI15_10_IRQHandler+0x10>
 8002ce2:	4b04      	ldr	r3, [pc, #16]	@ (8002cf4 <EXTI15_10_IRQHandler+0x34>)
 8002ce4:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d1ec      	bne.n	8002cc6 <EXTI15_10_IRQHandler+0x6>
 8002cec:	e7f0      	b.n	8002cd0 <EXTI15_10_IRQHandler+0x10>
        }
    }
}
 8002cee:	bd38      	pop	{r3, r4, r5, pc}
 8002cf0:	40013c00 	.word	0x40013c00
 8002cf4:	20000444 	.word	0x20000444

08002cf8 <GPIO_Clock_Enable>:
 *
 * @param PORT Pointer to GPIO port base address.
 * @return GPIO_SUCCESS on success, GPIO_INVALID_PORT on failure.
 */
int GPIO_Clock_Enable(GPIO_TypeDef *PORT) {
    switch ((uint32_t)PORT) {
 8002cf8:	4b28      	ldr	r3, [pc, #160]	@ (8002d9c <GPIO_Clock_Enable+0xa4>)
 8002cfa:	4298      	cmp	r0, r3
 8002cfc:	d039      	beq.n	8002d72 <GPIO_Clock_Enable+0x7a>
 8002cfe:	d815      	bhi.n	8002d2c <GPIO_Clock_Enable+0x34>
 8002d00:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8002d04:	4298      	cmp	r0, r3
 8002d06:	d026      	beq.n	8002d56 <GPIO_Clock_Enable+0x5e>
 8002d08:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002d0c:	4298      	cmp	r0, r3
 8002d0e:	d029      	beq.n	8002d64 <GPIO_Clock_Enable+0x6c>
 8002d10:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8002d14:	4298      	cmp	r0, r3
 8002d16:	d106      	bne.n	8002d26 <GPIO_Clock_Enable+0x2e>
        case (uint32_t)GPIOA: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN; break;
 8002d18:	4a21      	ldr	r2, [pc, #132]	@ (8002da0 <GPIO_Clock_Enable+0xa8>)
 8002d1a:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8002d1c:	f043 0301 	orr.w	r3, r3, #1
 8002d20:	6313      	str	r3, [r2, #48]	@ 0x30
        case (uint32_t)GPIOE: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN; break;
        case (uint32_t)GPIOF: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOFEN; break;
        case (uint32_t)GPIOH: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN; break;
        default: return GPIO_INVALID_PORT;
    }
    return GPIO_SUCCESS;
 8002d22:	2000      	movs	r0, #0
        case (uint32_t)GPIOA: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN; break;
 8002d24:	4770      	bx	lr
    switch ((uint32_t)PORT) {
 8002d26:	f04f 30ff 	mov.w	r0, #4294967295
 8002d2a:	4770      	bx	lr
 8002d2c:	4b1d      	ldr	r3, [pc, #116]	@ (8002da4 <GPIO_Clock_Enable+0xac>)
 8002d2e:	4298      	cmp	r0, r3
 8002d30:	d026      	beq.n	8002d80 <GPIO_Clock_Enable+0x88>
 8002d32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d36:	4298      	cmp	r0, r3
 8002d38:	d029      	beq.n	8002d8e <GPIO_Clock_Enable+0x96>
 8002d3a:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
 8002d3e:	4298      	cmp	r0, r3
 8002d40:	d106      	bne.n	8002d50 <GPIO_Clock_Enable+0x58>
        case (uint32_t)GPIOE: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN; break;
 8002d42:	4a17      	ldr	r2, [pc, #92]	@ (8002da0 <GPIO_Clock_Enable+0xa8>)
 8002d44:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8002d46:	f043 0310 	orr.w	r3, r3, #16
 8002d4a:	6313      	str	r3, [r2, #48]	@ 0x30
    return GPIO_SUCCESS;
 8002d4c:	2000      	movs	r0, #0
        case (uint32_t)GPIOE: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN; break;
 8002d4e:	4770      	bx	lr
    switch ((uint32_t)PORT) {
 8002d50:	f04f 30ff 	mov.w	r0, #4294967295
 8002d54:	4770      	bx	lr
        case (uint32_t)GPIOB: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN; break;
 8002d56:	4a12      	ldr	r2, [pc, #72]	@ (8002da0 <GPIO_Clock_Enable+0xa8>)
 8002d58:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8002d5a:	f043 0302 	orr.w	r3, r3, #2
 8002d5e:	6313      	str	r3, [r2, #48]	@ 0x30
    return GPIO_SUCCESS;
 8002d60:	2000      	movs	r0, #0
        case (uint32_t)GPIOB: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN; break;
 8002d62:	4770      	bx	lr
        case (uint32_t)GPIOC: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN; break;
 8002d64:	4a0e      	ldr	r2, [pc, #56]	@ (8002da0 <GPIO_Clock_Enable+0xa8>)
 8002d66:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8002d68:	f043 0304 	orr.w	r3, r3, #4
 8002d6c:	6313      	str	r3, [r2, #48]	@ 0x30
    return GPIO_SUCCESS;
 8002d6e:	2000      	movs	r0, #0
        case (uint32_t)GPIOC: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN; break;
 8002d70:	4770      	bx	lr
        case (uint32_t)GPIOD: RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN; break;
 8002d72:	4a0b      	ldr	r2, [pc, #44]	@ (8002da0 <GPIO_Clock_Enable+0xa8>)
 8002d74:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8002d76:	f043 0308 	orr.w	r3, r3, #8
 8002d7a:	6313      	str	r3, [r2, #48]	@ 0x30
    return GPIO_SUCCESS;
 8002d7c:	2000      	movs	r0, #0
        case (uint32_t)GPIOD: RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN; break;
 8002d7e:	4770      	bx	lr
        case (uint32_t)GPIOF: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOFEN; break;
 8002d80:	4a07      	ldr	r2, [pc, #28]	@ (8002da0 <GPIO_Clock_Enable+0xa8>)
 8002d82:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8002d84:	f043 0320 	orr.w	r3, r3, #32
 8002d88:	6313      	str	r3, [r2, #48]	@ 0x30
    return GPIO_SUCCESS;
 8002d8a:	2000      	movs	r0, #0
        case (uint32_t)GPIOF: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOFEN; break;
 8002d8c:	4770      	bx	lr
        case (uint32_t)GPIOH: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN; break;
 8002d8e:	4a04      	ldr	r2, [pc, #16]	@ (8002da0 <GPIO_Clock_Enable+0xa8>)
 8002d90:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8002d92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d96:	6313      	str	r3, [r2, #48]	@ 0x30
    return GPIO_SUCCESS;
 8002d98:	2000      	movs	r0, #0
}
 8002d9a:	4770      	bx	lr
 8002d9c:	40020c00 	.word	0x40020c00
 8002da0:	40023800 	.word	0x40023800
 8002da4:	40021400 	.word	0x40021400

08002da8 <GPIO_Pin_Init>:


GPIO_Status GPIO_Pin_Init(GPIO_TypeDef *Port, uint8_t pin, uint8_t mode, uint8_t output_type, uint8_t speed, uint8_t pull, uint8_t alternate_function) {
 8002da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002dac:	4604      	mov	r4, r0
 8002dae:	460d      	mov	r5, r1
 8002db0:	4617      	mov	r7, r2
 8002db2:	461e      	mov	r6, r3
 8002db4:	f89d a020 	ldrb.w	sl, [sp, #32]
 8002db8:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 8002dbc:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
//    if (pin > 15 || mode > 3 || speed > 3 || pull > 2) return GPIO_INVALID_PIN;

    GPIO_Clock_Enable(Port);
 8002dc0:	f7ff ff9a 	bl	8002cf8 <GPIO_Clock_Enable>

    // Reset and set mode
    Port->MODER &= ~(3 << PIN_POS(pin));
 8002dc4:	6820      	ldr	r0, [r4, #0]
 8002dc6:	0069      	lsls	r1, r5, #1
 8002dc8:	2203      	movs	r2, #3
 8002dca:	408a      	lsls	r2, r1
 8002dcc:	43d3      	mvns	r3, r2
 8002dce:	ea20 0202 	bic.w	r2, r0, r2
 8002dd2:	6022      	str	r2, [r4, #0]
    Port->MODER |= mode << PIN_POS(pin);
 8002dd4:	6822      	ldr	r2, [r4, #0]
 8002dd6:	fa07 f001 	lsl.w	r0, r7, r1
 8002dda:	4302      	orrs	r2, r0
 8002ddc:	6022      	str	r2, [r4, #0]

    // Reset and set output type
    Port->OTYPER &= ~(1 << pin);
 8002dde:	6862      	ldr	r2, [r4, #4]
 8002de0:	2001      	movs	r0, #1
 8002de2:	40a8      	lsls	r0, r5
 8002de4:	ea22 0200 	bic.w	r2, r2, r0
 8002de8:	6062      	str	r2, [r4, #4]
    if (output_type != GPIO_Configuration.Output_Type.None) {
 8002dea:	2e02      	cmp	r6, #2
 8002dec:	d003      	beq.n	8002df6 <GPIO_Pin_Init+0x4e>
        Port->OTYPER |= output_type << pin;
 8002dee:	6862      	ldr	r2, [r4, #4]
 8002df0:	40ae      	lsls	r6, r5
 8002df2:	4332      	orrs	r2, r6
 8002df4:	6062      	str	r2, [r4, #4]
    }

    // Reset and set speed
    Port->OSPEEDR &= ~(3 << PIN_POS(pin));
 8002df6:	68a2      	ldr	r2, [r4, #8]
 8002df8:	401a      	ands	r2, r3
 8002dfa:	60a2      	str	r2, [r4, #8]
    if (speed != GPIO_Configuration.Speed.None) {
 8002dfc:	f1ba 0f04 	cmp.w	sl, #4
 8002e00:	d005      	beq.n	8002e0e <GPIO_Pin_Init+0x66>
        Port->OSPEEDR |= speed << PIN_POS(pin);
 8002e02:	68a2      	ldr	r2, [r4, #8]
 8002e04:	fa0a fa01 	lsl.w	sl, sl, r1
 8002e08:	ea42 020a 	orr.w	r2, r2, sl
 8002e0c:	60a2      	str	r2, [r4, #8]
    }

    // Reset and set pull-up/pull-down
    Port->PUPDR &= ~(3 << PIN_POS(pin));
 8002e0e:	68e2      	ldr	r2, [r4, #12]
 8002e10:	4013      	ands	r3, r2
 8002e12:	60e3      	str	r3, [r4, #12]
    if (pull != GPIO_Configuration.Pull.None) {
 8002e14:	f1b9 0f04 	cmp.w	r9, #4
 8002e18:	d005      	beq.n	8002e26 <GPIO_Pin_Init+0x7e>
        Port->PUPDR |= pull << PIN_POS(pin);
 8002e1a:	68e3      	ldr	r3, [r4, #12]
 8002e1c:	fa09 f901 	lsl.w	r9, r9, r1
 8002e20:	ea43 0309 	orr.w	r3, r3, r9
 8002e24:	60e3      	str	r3, [r4, #12]
    }

    // Set alternate function
    if (mode == GPIO_Configuration.Mode.Alternate_Function) {
 8002e26:	2f02      	cmp	r7, #2
 8002e28:	d002      	beq.n	8002e30 <GPIO_Pin_Init+0x88>
            Port->AFR[1] |= alternate_function << ((pin - GPIO_AF_SPLIT_POINT) * 4);
        }
    }

    return GPIO_SUCCESS;
}
 8002e2a:	2000      	movs	r0, #0
 8002e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (pin < GPIO_AF_SPLIT_POINT) {
 8002e30:	2d07      	cmp	r5, #7
 8002e32:	d80c      	bhi.n	8002e4e <GPIO_Pin_Init+0xa6>
            Port->AFR[0] &= ~(0xF << (pin * 4));
 8002e34:	6a23      	ldr	r3, [r4, #32]
 8002e36:	00ad      	lsls	r5, r5, #2
 8002e38:	220f      	movs	r2, #15
 8002e3a:	40aa      	lsls	r2, r5
 8002e3c:	ea23 0302 	bic.w	r3, r3, r2
 8002e40:	6223      	str	r3, [r4, #32]
            Port->AFR[0] |= alternate_function << (pin * 4);
 8002e42:	6a23      	ldr	r3, [r4, #32]
 8002e44:	fa08 f505 	lsl.w	r5, r8, r5
 8002e48:	432b      	orrs	r3, r5
 8002e4a:	6223      	str	r3, [r4, #32]
 8002e4c:	e7ed      	b.n	8002e2a <GPIO_Pin_Init+0x82>
            Port->AFR[1] &= ~(0xF << ((pin - GPIO_AF_SPLIT_POINT) * 4));
 8002e4e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002e50:	3d08      	subs	r5, #8
 8002e52:	00ad      	lsls	r5, r5, #2
 8002e54:	220f      	movs	r2, #15
 8002e56:	40aa      	lsls	r2, r5
 8002e58:	ea23 0302 	bic.w	r3, r3, r2
 8002e5c:	6263      	str	r3, [r4, #36]	@ 0x24
            Port->AFR[1] |= alternate_function << ((pin - GPIO_AF_SPLIT_POINT) * 4);
 8002e5e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002e60:	fa08 f805 	lsl.w	r8, r8, r5
 8002e64:	ea43 0308 	orr.w	r3, r3, r8
 8002e68:	6263      	str	r3, [r4, #36]	@ 0x24
 8002e6a:	e7de      	b.n	8002e2a <GPIO_Pin_Init+0x82>

08002e6c <USART1_TX_ISR>:

volatile bool U6TX_Complete = 0;
volatile bool U6RX_Complete = 0;

void USART1_TX_ISR() {
	U1TX_Complete = 1;
 8002e6c:	4b01      	ldr	r3, [pc, #4]	@ (8002e74 <USART1_TX_ISR+0x8>)
 8002e6e:	2201      	movs	r2, #1
 8002e70:	701a      	strb	r2, [r3, #0]
}
 8002e72:	4770      	bx	lr
 8002e74:	2000048f 	.word	0x2000048f

08002e78 <USART1_RX_ISR>:

void USART1_RX_ISR() {
	U1RX_Complete = 1;
 8002e78:	4b01      	ldr	r3, [pc, #4]	@ (8002e80 <USART1_RX_ISR+0x8>)
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	701a      	strb	r2, [r3, #0]
}
 8002e7e:	4770      	bx	lr
 8002e80:	2000048e 	.word	0x2000048e

08002e84 <USART2_TX_ISR>:

void USART2_TX_ISR() {
	U2TX_Complete = 1;
 8002e84:	4b01      	ldr	r3, [pc, #4]	@ (8002e8c <USART2_TX_ISR+0x8>)
 8002e86:	2201      	movs	r2, #1
 8002e88:	701a      	strb	r2, [r3, #0]
}
 8002e8a:	4770      	bx	lr
 8002e8c:	2000048d 	.word	0x2000048d

08002e90 <USART2_RX_ISR>:

void USART2_RX_ISR() {
	U2RX_Complete = 1;
 8002e90:	4b01      	ldr	r3, [pc, #4]	@ (8002e98 <USART2_RX_ISR+0x8>)
 8002e92:	2201      	movs	r2, #1
 8002e94:	701a      	strb	r2, [r3, #0]
}
 8002e96:	4770      	bx	lr
 8002e98:	2000048c 	.word	0x2000048c

08002e9c <USART3_TX_ISR>:

void USART3_TX_ISR() {
	U3TX_Complete = 1;
 8002e9c:	4b01      	ldr	r3, [pc, #4]	@ (8002ea4 <USART3_TX_ISR+0x8>)
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	701a      	strb	r2, [r3, #0]
}
 8002ea2:	4770      	bx	lr
 8002ea4:	2000048b 	.word	0x2000048b

08002ea8 <USART3_RX_ISR>:

void USART3_RX_ISR() {
	U3RX_Complete = 1;
 8002ea8:	4b01      	ldr	r3, [pc, #4]	@ (8002eb0 <USART3_RX_ISR+0x8>)
 8002eaa:	2201      	movs	r2, #1
 8002eac:	701a      	strb	r2, [r3, #0]
}
 8002eae:	4770      	bx	lr
 8002eb0:	2000048a 	.word	0x2000048a

08002eb4 <USART4_TX_ISR>:

void USART4_TX_ISR() {
	U4TX_Complete = 1;
 8002eb4:	4b01      	ldr	r3, [pc, #4]	@ (8002ebc <USART4_TX_ISR+0x8>)
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	701a      	strb	r2, [r3, #0]
}
 8002eba:	4770      	bx	lr
 8002ebc:	20000489 	.word	0x20000489

08002ec0 <USART4_RX_ISR>:

void USART4_RX_ISR() {
	U4RX_Complete = 1;
 8002ec0:	4b01      	ldr	r3, [pc, #4]	@ (8002ec8 <USART4_RX_ISR+0x8>)
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	701a      	strb	r2, [r3, #0]
}
 8002ec6:	4770      	bx	lr
 8002ec8:	20000488 	.word	0x20000488

08002ecc <USART5_TX_ISR>:

void USART5_TX_ISR() {
	U5TX_Complete = 1;
 8002ecc:	4b01      	ldr	r3, [pc, #4]	@ (8002ed4 <USART5_TX_ISR+0x8>)
 8002ece:	2201      	movs	r2, #1
 8002ed0:	701a      	strb	r2, [r3, #0]
}
 8002ed2:	4770      	bx	lr
 8002ed4:	20000487 	.word	0x20000487

08002ed8 <USART5_RX_ISR>:

void USART5_RX_ISR() {
	U5RX_Complete = 1;
 8002ed8:	4b01      	ldr	r3, [pc, #4]	@ (8002ee0 <USART5_RX_ISR+0x8>)
 8002eda:	2201      	movs	r2, #1
 8002edc:	701a      	strb	r2, [r3, #0]
}
 8002ede:	4770      	bx	lr
 8002ee0:	20000486 	.word	0x20000486

08002ee4 <USART6_TX_ISR>:

void USART6_TX_ISR() {
	U6TX_Complete = 1;
 8002ee4:	4b01      	ldr	r3, [pc, #4]	@ (8002eec <USART6_TX_ISR+0x8>)
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	701a      	strb	r2, [r3, #0]
}
 8002eea:	4770      	bx	lr
 8002eec:	20000485 	.word	0x20000485

08002ef0 <USART6_RX_ISR>:

void USART6_RX_ISR() {
	U6RX_Complete = 1;
 8002ef0:	4b01      	ldr	r3, [pc, #4]	@ (8002ef8 <USART6_RX_ISR+0x8>)
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	701a      	strb	r2, [r3, #0]
}
 8002ef6:	4770      	bx	lr
 8002ef8:	20000484 	.word	0x20000484

08002efc <PIN_Setup>:
	}
	return 1;
}

static void PIN_Setup(USART_Config *config)
{
 8002efc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002efe:	b085      	sub	sp, #20
 8002f00:	4604      	mov	r4, r0
	if(config->Port == USART1)
 8002f02:	6803      	ldr	r3, [r0, #0]
 8002f04:	4a99      	ldr	r2, [pc, #612]	@ (800316c <PIN_Setup+0x270>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d015      	beq.n	8002f36 <PIN_Setup+0x3a>
			if((config->mode == USART_Configuration.Mode.SmartCard_Clock))GPIO_Pin_Init(GPIOA, USART1_CLK_Pin.PA8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);

		}
	}

	else if(config->Port == USART2)
 8002f0a:	4a99      	ldr	r2, [pc, #612]	@ (8003170 <PIN_Setup+0x274>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	f000 80b8 	beq.w	8003082 <PIN_Setup+0x186>
				}
			}
		}
	}

	else if(config->Port == USART3)
 8002f12:	4a98      	ldr	r2, [pc, #608]	@ (8003174 <PIN_Setup+0x278>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	f000 81a9 	beq.w	800326c <PIN_Setup+0x370>
			if(config->CLK_Pin == USART3_CLK_Pin.PB12)GPIO_Pin_Init(GPIOB, USART3_CLK_Pin.PB12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
			else if(config->CLK_Pin == USART3_CLK_Pin.PD10)GPIO_Pin_Init(GPIOD, USART3_CLK_Pin.PD10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);

		}
	}
	else if(config -> Port == UART4)
 8002f1a:	4a97      	ldr	r2, [pc, #604]	@ (8003178 <PIN_Setup+0x27c>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	f000 82b3 	beq.w	8003488 <PIN_Setup+0x58c>

			if(config->RX_Pin == UART4_RX_Pin.PA1)GPIO_Pin_Init(GPIOA, UART4_RX_Pin.PA1, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_4);
			else if(config->RX_Pin == UART4_RX_Pin.PC11)GPIO_Pin_Init(GPIOC, UART4_RX_Pin.PC11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_4);
		}
	}
	else if(config -> Port == UART5)
 8002f22:	4a96      	ldr	r2, [pc, #600]	@ (800317c <PIN_Setup+0x280>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	f000 82ef 	beq.w	8003508 <PIN_Setup+0x60c>
		{
			if(config->TX_Pin == UART5_TX_Pin.PD2)GPIO_Pin_Init(GPIOA, UART5_TX_Pin.PD2, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.UART_5);
			if(config->RX_Pin == UART5_RX_Pin.PC12)GPIO_Pin_Init(GPIOA, UART5_RX_Pin.PC12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.UART_5);
		}
	}
	else if(config->Port == USART6)
 8002f2a:	4a95      	ldr	r2, [pc, #596]	@ (8003180 <PIN_Setup+0x284>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	f000 8312 	beq.w	8003556 <PIN_Setup+0x65a>

		}
	}


}
 8002f32:	b005      	add	sp, #20
 8002f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
		__usart_1_config__ = config;
 8002f36:	4b93      	ldr	r3, [pc, #588]	@ (8003184 <PIN_Setup+0x288>)
 8002f38:	6018      	str	r0, [r3, #0]
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 8002f3a:	7a03      	ldrb	r3, [r0, #8]
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	2b06      	cmp	r3, #6
 8002f40:	d8f7      	bhi.n	8002f32 <PIN_Setup+0x36>
 8002f42:	e8df f003 	tbb	[pc, r3]
 8002f46:	0404      	.short	0x0404
 8002f48:	82040482 	.word	0x82040482
 8002f4c:	82          	.byte	0x82
 8002f4d:	00          	.byte	0x00
			if(config->TX_Pin == USART1_TX_Pin.PA9)GPIO_Pin_Init(GPIOA, USART1_TX_Pin.PA9, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8002f4e:	7a43      	ldrb	r3, [r0, #9]
 8002f50:	2b09      	cmp	r3, #9
 8002f52:	d02b      	beq.n	8002fac <PIN_Setup+0xb0>
			else if(config->TX_Pin == USART1_TX_Pin.PB6)GPIO_Pin_Init(GPIOB, USART1_TX_Pin.PB6, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8002f54:	2b06      	cmp	r3, #6
 8002f56:	d034      	beq.n	8002fc2 <PIN_Setup+0xc6>
			if(config->RX_Pin == USART1_RX_Pin.PA10)GPIO_Pin_Init(GPIOA, USART1_RX_Pin.PA10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8002f58:	7aa3      	ldrb	r3, [r4, #10]
 8002f5a:	2b0a      	cmp	r3, #10
 8002f5c:	d03c      	beq.n	8002fd8 <PIN_Setup+0xdc>
			else if(config->RX_Pin == USART1_RX_Pin.PB7)GPIO_Pin_Init(GPIOB, USART1_RX_Pin.PB7, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8002f5e:	2b07      	cmp	r3, #7
 8002f60:	d045      	beq.n	8002fee <PIN_Setup+0xf2>
			if((config->mode == USART_Configuration.Mode.Synchronous))if(config->CLK_Pin == USART1_CLK_Pin.PA8)GPIO_Pin_Init(GPIOA, USART1_CLK_Pin.PA8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8002f62:	7a23      	ldrb	r3, [r4, #8]
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d04c      	beq.n	8003002 <PIN_Setup+0x106>
			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 8002f68:	7be3      	ldrb	r3, [r4, #15]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d0e1      	beq.n	8002f32 <PIN_Setup+0x36>
				if(config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_Enable)GPIO_Pin_Init(GPIOA, USART1_CTS_Pin.PA11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d055      	beq.n	800301e <PIN_Setup+0x122>
				if(config->hardware_flow == USART_Configuration.Hardware_Flow.RTS_Enable)GPIO_Pin_Init(GPIOA, USART1_RTS_Pin.PA12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8002f72:	7be3      	ldrb	r3, [r4, #15]
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d05d      	beq.n	8003034 <PIN_Setup+0x138>
				if(config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable)
 8002f78:	7be3      	ldrb	r3, [r4, #15]
 8002f7a:	2b03      	cmp	r3, #3
 8002f7c:	d1d9      	bne.n	8002f32 <PIN_Setup+0x36>
					GPIO_Pin_Init(GPIOA, USART1_CTS_Pin.PA11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8002f7e:	4e82      	ldr	r6, [pc, #520]	@ (8003188 <PIN_Setup+0x28c>)
 8002f80:	2707      	movs	r7, #7
 8002f82:	9702      	str	r7, [sp, #8]
 8002f84:	2500      	movs	r5, #0
 8002f86:	9501      	str	r5, [sp, #4]
 8002f88:	2402      	movs	r4, #2
 8002f8a:	9400      	str	r4, [sp, #0]
 8002f8c:	462b      	mov	r3, r5
 8002f8e:	4622      	mov	r2, r4
 8002f90:	210b      	movs	r1, #11
 8002f92:	4630      	mov	r0, r6
 8002f94:	f7ff ff08 	bl	8002da8 <GPIO_Pin_Init>
					GPIO_Pin_Init(GPIOA, USART1_RTS_Pin.PA12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8002f98:	9702      	str	r7, [sp, #8]
 8002f9a:	9501      	str	r5, [sp, #4]
 8002f9c:	9400      	str	r4, [sp, #0]
 8002f9e:	462b      	mov	r3, r5
 8002fa0:	4622      	mov	r2, r4
 8002fa2:	210c      	movs	r1, #12
 8002fa4:	4630      	mov	r0, r6
 8002fa6:	f7ff feff 	bl	8002da8 <GPIO_Pin_Init>
 8002faa:	e7c2      	b.n	8002f32 <PIN_Setup+0x36>
			if(config->TX_Pin == USART1_TX_Pin.PA9)GPIO_Pin_Init(GPIOA, USART1_TX_Pin.PA9, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8002fac:	2307      	movs	r3, #7
 8002fae:	9302      	str	r3, [sp, #8]
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	9301      	str	r3, [sp, #4]
 8002fb4:	2202      	movs	r2, #2
 8002fb6:	9200      	str	r2, [sp, #0]
 8002fb8:	2109      	movs	r1, #9
 8002fba:	4873      	ldr	r0, [pc, #460]	@ (8003188 <PIN_Setup+0x28c>)
 8002fbc:	f7ff fef4 	bl	8002da8 <GPIO_Pin_Init>
 8002fc0:	e7ca      	b.n	8002f58 <PIN_Setup+0x5c>
			else if(config->TX_Pin == USART1_TX_Pin.PB6)GPIO_Pin_Init(GPIOB, USART1_TX_Pin.PB6, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8002fc2:	2307      	movs	r3, #7
 8002fc4:	9302      	str	r3, [sp, #8]
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	9301      	str	r3, [sp, #4]
 8002fca:	2202      	movs	r2, #2
 8002fcc:	9200      	str	r2, [sp, #0]
 8002fce:	2106      	movs	r1, #6
 8002fd0:	486e      	ldr	r0, [pc, #440]	@ (800318c <PIN_Setup+0x290>)
 8002fd2:	f7ff fee9 	bl	8002da8 <GPIO_Pin_Init>
 8002fd6:	e7bf      	b.n	8002f58 <PIN_Setup+0x5c>
			if(config->RX_Pin == USART1_RX_Pin.PA10)GPIO_Pin_Init(GPIOA, USART1_RX_Pin.PA10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8002fd8:	2307      	movs	r3, #7
 8002fda:	9302      	str	r3, [sp, #8]
 8002fdc:	2300      	movs	r3, #0
 8002fde:	9301      	str	r3, [sp, #4]
 8002fe0:	2202      	movs	r2, #2
 8002fe2:	9200      	str	r2, [sp, #0]
 8002fe4:	210a      	movs	r1, #10
 8002fe6:	4868      	ldr	r0, [pc, #416]	@ (8003188 <PIN_Setup+0x28c>)
 8002fe8:	f7ff fede 	bl	8002da8 <GPIO_Pin_Init>
 8002fec:	e7b9      	b.n	8002f62 <PIN_Setup+0x66>
			else if(config->RX_Pin == USART1_RX_Pin.PB7)GPIO_Pin_Init(GPIOB, USART1_RX_Pin.PB7, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8002fee:	2107      	movs	r1, #7
 8002ff0:	9102      	str	r1, [sp, #8]
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	9301      	str	r3, [sp, #4]
 8002ff6:	2202      	movs	r2, #2
 8002ff8:	9200      	str	r2, [sp, #0]
 8002ffa:	4864      	ldr	r0, [pc, #400]	@ (800318c <PIN_Setup+0x290>)
 8002ffc:	f7ff fed4 	bl	8002da8 <GPIO_Pin_Init>
 8003000:	e7af      	b.n	8002f62 <PIN_Setup+0x66>
			if((config->mode == USART_Configuration.Mode.Synchronous))if(config->CLK_Pin == USART1_CLK_Pin.PA8)GPIO_Pin_Init(GPIOA, USART1_CLK_Pin.PA8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8003002:	7ae3      	ldrb	r3, [r4, #11]
 8003004:	2b08      	cmp	r3, #8
 8003006:	d1af      	bne.n	8002f68 <PIN_Setup+0x6c>
 8003008:	2307      	movs	r3, #7
 800300a:	9302      	str	r3, [sp, #8]
 800300c:	2300      	movs	r3, #0
 800300e:	9301      	str	r3, [sp, #4]
 8003010:	2202      	movs	r2, #2
 8003012:	9200      	str	r2, [sp, #0]
 8003014:	2108      	movs	r1, #8
 8003016:	485c      	ldr	r0, [pc, #368]	@ (8003188 <PIN_Setup+0x28c>)
 8003018:	f7ff fec6 	bl	8002da8 <GPIO_Pin_Init>
 800301c:	e7a4      	b.n	8002f68 <PIN_Setup+0x6c>
				if(config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_Enable)GPIO_Pin_Init(GPIOA, USART1_CTS_Pin.PA11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 800301e:	2307      	movs	r3, #7
 8003020:	9302      	str	r3, [sp, #8]
 8003022:	2300      	movs	r3, #0
 8003024:	9301      	str	r3, [sp, #4]
 8003026:	2202      	movs	r2, #2
 8003028:	9200      	str	r2, [sp, #0]
 800302a:	210b      	movs	r1, #11
 800302c:	4856      	ldr	r0, [pc, #344]	@ (8003188 <PIN_Setup+0x28c>)
 800302e:	f7ff febb 	bl	8002da8 <GPIO_Pin_Init>
 8003032:	e79e      	b.n	8002f72 <PIN_Setup+0x76>
				if(config->hardware_flow == USART_Configuration.Hardware_Flow.RTS_Enable)GPIO_Pin_Init(GPIOA, USART1_RTS_Pin.PA12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8003034:	2307      	movs	r3, #7
 8003036:	9302      	str	r3, [sp, #8]
 8003038:	2300      	movs	r3, #0
 800303a:	9301      	str	r3, [sp, #4]
 800303c:	2202      	movs	r2, #2
 800303e:	9200      	str	r2, [sp, #0]
 8003040:	210c      	movs	r1, #12
 8003042:	4851      	ldr	r0, [pc, #324]	@ (8003188 <PIN_Setup+0x28c>)
 8003044:	f7ff feb0 	bl	8002da8 <GPIO_Pin_Init>
 8003048:	e796      	b.n	8002f78 <PIN_Setup+0x7c>
			if(config->TX_Pin == USART1_TX_Pin.PA9)GPIO_Pin_Init(GPIOA, USART1_TX_Pin.PA9, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 800304a:	7a43      	ldrb	r3, [r0, #9]
 800304c:	2b09      	cmp	r3, #9
 800304e:	d00d      	beq.n	800306c <PIN_Setup+0x170>
			if((config->mode == USART_Configuration.Mode.SmartCard_Clock))GPIO_Pin_Init(GPIOA, USART1_CLK_Pin.PA8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8003050:	7a23      	ldrb	r3, [r4, #8]
 8003052:	2b07      	cmp	r3, #7
 8003054:	f47f af6d 	bne.w	8002f32 <PIN_Setup+0x36>
 8003058:	9302      	str	r3, [sp, #8]
 800305a:	2300      	movs	r3, #0
 800305c:	9301      	str	r3, [sp, #4]
 800305e:	2202      	movs	r2, #2
 8003060:	9200      	str	r2, [sp, #0]
 8003062:	2108      	movs	r1, #8
 8003064:	4848      	ldr	r0, [pc, #288]	@ (8003188 <PIN_Setup+0x28c>)
 8003066:	f7ff fe9f 	bl	8002da8 <GPIO_Pin_Init>
 800306a:	e762      	b.n	8002f32 <PIN_Setup+0x36>
			if(config->TX_Pin == USART1_TX_Pin.PA9)GPIO_Pin_Init(GPIOA, USART1_TX_Pin.PA9, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 800306c:	2307      	movs	r3, #7
 800306e:	9302      	str	r3, [sp, #8]
 8003070:	2300      	movs	r3, #0
 8003072:	9301      	str	r3, [sp, #4]
 8003074:	2202      	movs	r2, #2
 8003076:	9200      	str	r2, [sp, #0]
 8003078:	2109      	movs	r1, #9
 800307a:	4843      	ldr	r0, [pc, #268]	@ (8003188 <PIN_Setup+0x28c>)
 800307c:	f7ff fe94 	bl	8002da8 <GPIO_Pin_Init>
 8003080:	e7e6      	b.n	8003050 <PIN_Setup+0x154>
		__usart_2_config__ = config;
 8003082:	4b43      	ldr	r3, [pc, #268]	@ (8003190 <PIN_Setup+0x294>)
 8003084:	6018      	str	r0, [r3, #0]
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 8003086:	7a03      	ldrb	r3, [r0, #8]
 8003088:	3b01      	subs	r3, #1
 800308a:	2b06      	cmp	r3, #6
 800308c:	f63f af51 	bhi.w	8002f32 <PIN_Setup+0x36>
 8003090:	e8df f003 	tbb	[pc, r3]
 8003094:	04b20404 	.word	0x04b20404
 8003098:	b204      	.short	0xb204
 800309a:	b2          	.byte	0xb2
 800309b:	00          	.byte	0x00
			if(config->TX_Pin == USART2_TX_Pin.PA2)GPIO_Pin_Init(GPIOA, USART2_TX_Pin.PA2, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 800309c:	7a43      	ldrb	r3, [r0, #9]
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d028      	beq.n	80030f4 <PIN_Setup+0x1f8>
			else if(config->TX_Pin == USART2_TX_Pin.PD5)GPIO_Pin_Init(GPIOD, USART2_TX_Pin.PD5, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 80030a2:	2b05      	cmp	r3, #5
 80030a4:	d031      	beq.n	800310a <PIN_Setup+0x20e>
			if(config->RX_Pin == USART2_RX_Pin.PA3)GPIO_Pin_Init(GPIOA, USART2_RX_Pin.PA3, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 80030a6:	7aa3      	ldrb	r3, [r4, #10]
 80030a8:	2b03      	cmp	r3, #3
 80030aa:	d039      	beq.n	8003120 <PIN_Setup+0x224>
			else if(config->RX_Pin == USART2_RX_Pin.PD6)GPIO_Pin_Init(GPIOD, USART2_RX_Pin.PD6, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 80030ac:	2b06      	cmp	r3, #6
 80030ae:	d042      	beq.n	8003136 <PIN_Setup+0x23a>
			if((config->mode == USART_Configuration.Mode.Synchronous)){
 80030b0:	7a23      	ldrb	r3, [r4, #8]
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d04a      	beq.n	800314c <PIN_Setup+0x250>
			if((config->hardware_flow != USART_Configuration.Hardware_Flow.Disable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 80030b6:	7be3      	ldrb	r3, [r4, #15]
 80030b8:	b913      	cbnz	r3, 80030c0 <PIN_Setup+0x1c4>
 80030ba:	2b03      	cmp	r3, #3
 80030bc:	f47f af39 	bne.w	8002f32 <PIN_Setup+0x36>
				if(config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_Enable)
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d074      	beq.n	80031ae <PIN_Setup+0x2b2>
				if((config->hardware_flow == USART_Configuration.Hardware_Flow.RTS_Enable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 80030c4:	7be3      	ldrb	r3, [r4, #15]
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d002      	beq.n	80030d0 <PIN_Setup+0x1d4>
 80030ca:	2b03      	cmp	r3, #3
 80030cc:	f47f af31 	bne.w	8002f32 <PIN_Setup+0x36>
					if(config->CLK_Pin == USART2_RTS_Pin.PA1)
 80030d0:	7ae3      	ldrb	r3, [r4, #11]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	f000 8085 	beq.w	80031e2 <PIN_Setup+0x2e6>
					else if(config->CLK_Pin == USART2_RTS_Pin.PD4)
 80030d8:	2b04      	cmp	r3, #4
 80030da:	f47f af2a 	bne.w	8002f32 <PIN_Setup+0x36>
						GPIO_Pin_Init(GPIOD, USART2_RTS_Pin.PD4, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 80030de:	2307      	movs	r3, #7
 80030e0:	9302      	str	r3, [sp, #8]
 80030e2:	2300      	movs	r3, #0
 80030e4:	9301      	str	r3, [sp, #4]
 80030e6:	2202      	movs	r2, #2
 80030e8:	9200      	str	r2, [sp, #0]
 80030ea:	2104      	movs	r1, #4
 80030ec:	4829      	ldr	r0, [pc, #164]	@ (8003194 <PIN_Setup+0x298>)
 80030ee:	f7ff fe5b 	bl	8002da8 <GPIO_Pin_Init>
 80030f2:	e71e      	b.n	8002f32 <PIN_Setup+0x36>
			if(config->TX_Pin == USART2_TX_Pin.PA2)GPIO_Pin_Init(GPIOA, USART2_TX_Pin.PA2, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 80030f4:	2307      	movs	r3, #7
 80030f6:	9302      	str	r3, [sp, #8]
 80030f8:	2300      	movs	r3, #0
 80030fa:	9301      	str	r3, [sp, #4]
 80030fc:	2102      	movs	r1, #2
 80030fe:	9100      	str	r1, [sp, #0]
 8003100:	460a      	mov	r2, r1
 8003102:	4821      	ldr	r0, [pc, #132]	@ (8003188 <PIN_Setup+0x28c>)
 8003104:	f7ff fe50 	bl	8002da8 <GPIO_Pin_Init>
 8003108:	e7cd      	b.n	80030a6 <PIN_Setup+0x1aa>
			else if(config->TX_Pin == USART2_TX_Pin.PD5)GPIO_Pin_Init(GPIOD, USART2_TX_Pin.PD5, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 800310a:	2307      	movs	r3, #7
 800310c:	9302      	str	r3, [sp, #8]
 800310e:	2300      	movs	r3, #0
 8003110:	9301      	str	r3, [sp, #4]
 8003112:	2202      	movs	r2, #2
 8003114:	9200      	str	r2, [sp, #0]
 8003116:	2105      	movs	r1, #5
 8003118:	481e      	ldr	r0, [pc, #120]	@ (8003194 <PIN_Setup+0x298>)
 800311a:	f7ff fe45 	bl	8002da8 <GPIO_Pin_Init>
 800311e:	e7c2      	b.n	80030a6 <PIN_Setup+0x1aa>
			if(config->RX_Pin == USART2_RX_Pin.PA3)GPIO_Pin_Init(GPIOA, USART2_RX_Pin.PA3, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003120:	2307      	movs	r3, #7
 8003122:	9302      	str	r3, [sp, #8]
 8003124:	2300      	movs	r3, #0
 8003126:	9301      	str	r3, [sp, #4]
 8003128:	2202      	movs	r2, #2
 800312a:	9200      	str	r2, [sp, #0]
 800312c:	2103      	movs	r1, #3
 800312e:	4816      	ldr	r0, [pc, #88]	@ (8003188 <PIN_Setup+0x28c>)
 8003130:	f7ff fe3a 	bl	8002da8 <GPIO_Pin_Init>
 8003134:	e7bc      	b.n	80030b0 <PIN_Setup+0x1b4>
			else if(config->RX_Pin == USART2_RX_Pin.PD6)GPIO_Pin_Init(GPIOD, USART2_RX_Pin.PD6, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003136:	2307      	movs	r3, #7
 8003138:	9302      	str	r3, [sp, #8]
 800313a:	2300      	movs	r3, #0
 800313c:	9301      	str	r3, [sp, #4]
 800313e:	2202      	movs	r2, #2
 8003140:	9200      	str	r2, [sp, #0]
 8003142:	2106      	movs	r1, #6
 8003144:	4813      	ldr	r0, [pc, #76]	@ (8003194 <PIN_Setup+0x298>)
 8003146:	f7ff fe2f 	bl	8002da8 <GPIO_Pin_Init>
 800314a:	e7b1      	b.n	80030b0 <PIN_Setup+0x1b4>
				if(config->CLK_Pin == USART2_CLK_Pin.PA4)GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PA4, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 800314c:	7ae3      	ldrb	r3, [r4, #11]
 800314e:	2b04      	cmp	r3, #4
 8003150:	d022      	beq.n	8003198 <PIN_Setup+0x29c>
				else if(config->CLK_Pin == USART2_CLK_Pin.PD7)GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PD7, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003152:	2b07      	cmp	r3, #7
 8003154:	d1af      	bne.n	80030b6 <PIN_Setup+0x1ba>
 8003156:	2107      	movs	r1, #7
 8003158:	9102      	str	r1, [sp, #8]
 800315a:	2300      	movs	r3, #0
 800315c:	9301      	str	r3, [sp, #4]
 800315e:	2202      	movs	r2, #2
 8003160:	9200      	str	r2, [sp, #0]
 8003162:	4809      	ldr	r0, [pc, #36]	@ (8003188 <PIN_Setup+0x28c>)
 8003164:	f7ff fe20 	bl	8002da8 <GPIO_Pin_Init>
 8003168:	e7a5      	b.n	80030b6 <PIN_Setup+0x1ba>
 800316a:	bf00      	nop
 800316c:	40011000 	.word	0x40011000
 8003170:	40004400 	.word	0x40004400
 8003174:	40004800 	.word	0x40004800
 8003178:	40004c00 	.word	0x40004c00
 800317c:	40005000 	.word	0x40005000
 8003180:	40011400 	.word	0x40011400
 8003184:	200004a4 	.word	0x200004a4
 8003188:	40020000 	.word	0x40020000
 800318c:	40020400 	.word	0x40020400
 8003190:	200004a0 	.word	0x200004a0
 8003194:	40020c00 	.word	0x40020c00
				if(config->CLK_Pin == USART2_CLK_Pin.PA4)GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PA4, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003198:	2307      	movs	r3, #7
 800319a:	9302      	str	r3, [sp, #8]
 800319c:	2300      	movs	r3, #0
 800319e:	9301      	str	r3, [sp, #4]
 80031a0:	2202      	movs	r2, #2
 80031a2:	9200      	str	r2, [sp, #0]
 80031a4:	2104      	movs	r1, #4
 80031a6:	489e      	ldr	r0, [pc, #632]	@ (8003420 <PIN_Setup+0x524>)
 80031a8:	f7ff fdfe 	bl	8002da8 <GPIO_Pin_Init>
 80031ac:	e783      	b.n	80030b6 <PIN_Setup+0x1ba>
					if(config->CLK_Pin == USART2_CTS_Pin.PA0)
 80031ae:	7ae3      	ldrb	r3, [r4, #11]
 80031b0:	b163      	cbz	r3, 80031cc <PIN_Setup+0x2d0>
					else if(config->CLK_Pin == USART2_CTS_Pin.PD3)
 80031b2:	2b03      	cmp	r3, #3
 80031b4:	d186      	bne.n	80030c4 <PIN_Setup+0x1c8>
						GPIO_Pin_Init(GPIOD, USART2_CTS_Pin.PD3, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 80031b6:	2307      	movs	r3, #7
 80031b8:	9302      	str	r3, [sp, #8]
 80031ba:	2300      	movs	r3, #0
 80031bc:	9301      	str	r3, [sp, #4]
 80031be:	2202      	movs	r2, #2
 80031c0:	9200      	str	r2, [sp, #0]
 80031c2:	2103      	movs	r1, #3
 80031c4:	4897      	ldr	r0, [pc, #604]	@ (8003424 <PIN_Setup+0x528>)
 80031c6:	f7ff fdef 	bl	8002da8 <GPIO_Pin_Init>
 80031ca:	e77b      	b.n	80030c4 <PIN_Setup+0x1c8>
						GPIO_Pin_Init(GPIOA, USART2_CTS_Pin.PA0, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 80031cc:	2307      	movs	r3, #7
 80031ce:	9302      	str	r3, [sp, #8]
 80031d0:	2100      	movs	r1, #0
 80031d2:	9101      	str	r1, [sp, #4]
 80031d4:	2202      	movs	r2, #2
 80031d6:	9200      	str	r2, [sp, #0]
 80031d8:	460b      	mov	r3, r1
 80031da:	4891      	ldr	r0, [pc, #580]	@ (8003420 <PIN_Setup+0x524>)
 80031dc:	f7ff fde4 	bl	8002da8 <GPIO_Pin_Init>
 80031e0:	e770      	b.n	80030c4 <PIN_Setup+0x1c8>
						GPIO_Pin_Init(GPIOA, USART2_RTS_Pin.PA1, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 80031e2:	2307      	movs	r3, #7
 80031e4:	9302      	str	r3, [sp, #8]
 80031e6:	2300      	movs	r3, #0
 80031e8:	9301      	str	r3, [sp, #4]
 80031ea:	2202      	movs	r2, #2
 80031ec:	9200      	str	r2, [sp, #0]
 80031ee:	2101      	movs	r1, #1
 80031f0:	488b      	ldr	r0, [pc, #556]	@ (8003420 <PIN_Setup+0x524>)
 80031f2:	f7ff fdd9 	bl	8002da8 <GPIO_Pin_Init>
 80031f6:	e69c      	b.n	8002f32 <PIN_Setup+0x36>
			if(config->TX_Pin == USART2_TX_Pin.PA2)
 80031f8:	7a43      	ldrb	r3, [r0, #9]
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d015      	beq.n	800322a <PIN_Setup+0x32e>
			else if(config->TX_Pin == USART2_TX_Pin.PD5)
 80031fe:	2b05      	cmp	r3, #5
 8003200:	d01e      	beq.n	8003240 <PIN_Setup+0x344>
			if((config->mode == USART_Configuration.Mode.SmartCard_Clock))
 8003202:	7a23      	ldrb	r3, [r4, #8]
 8003204:	2b07      	cmp	r3, #7
 8003206:	f47f ae94 	bne.w	8002f32 <PIN_Setup+0x36>
				if(config->CLK_Pin == USART2_CLK_Pin.PA4)
 800320a:	7ae3      	ldrb	r3, [r4, #11]
 800320c:	2b04      	cmp	r3, #4
 800320e:	d022      	beq.n	8003256 <PIN_Setup+0x35a>
				else if(config->CLK_Pin == USART2_CLK_Pin.PD7)
 8003210:	2b07      	cmp	r3, #7
 8003212:	f47f ae8e 	bne.w	8002f32 <PIN_Setup+0x36>
					GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PD7, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003216:	2107      	movs	r1, #7
 8003218:	9102      	str	r1, [sp, #8]
 800321a:	2300      	movs	r3, #0
 800321c:	9301      	str	r3, [sp, #4]
 800321e:	2202      	movs	r2, #2
 8003220:	9200      	str	r2, [sp, #0]
 8003222:	487f      	ldr	r0, [pc, #508]	@ (8003420 <PIN_Setup+0x524>)
 8003224:	f7ff fdc0 	bl	8002da8 <GPIO_Pin_Init>
 8003228:	e683      	b.n	8002f32 <PIN_Setup+0x36>
				GPIO_Pin_Init(GPIOA, USART2_TX_Pin.PA2, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 800322a:	2307      	movs	r3, #7
 800322c:	9302      	str	r3, [sp, #8]
 800322e:	2300      	movs	r3, #0
 8003230:	9301      	str	r3, [sp, #4]
 8003232:	2102      	movs	r1, #2
 8003234:	9100      	str	r1, [sp, #0]
 8003236:	460a      	mov	r2, r1
 8003238:	4879      	ldr	r0, [pc, #484]	@ (8003420 <PIN_Setup+0x524>)
 800323a:	f7ff fdb5 	bl	8002da8 <GPIO_Pin_Init>
 800323e:	e7e0      	b.n	8003202 <PIN_Setup+0x306>
				GPIO_Pin_Init(GPIOD, USART2_TX_Pin.PD5, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003240:	2307      	movs	r3, #7
 8003242:	9302      	str	r3, [sp, #8]
 8003244:	2300      	movs	r3, #0
 8003246:	9301      	str	r3, [sp, #4]
 8003248:	2202      	movs	r2, #2
 800324a:	9200      	str	r2, [sp, #0]
 800324c:	2105      	movs	r1, #5
 800324e:	4875      	ldr	r0, [pc, #468]	@ (8003424 <PIN_Setup+0x528>)
 8003250:	f7ff fdaa 	bl	8002da8 <GPIO_Pin_Init>
 8003254:	e7d5      	b.n	8003202 <PIN_Setup+0x306>
					GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PA4, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003256:	2307      	movs	r3, #7
 8003258:	9302      	str	r3, [sp, #8]
 800325a:	2300      	movs	r3, #0
 800325c:	9301      	str	r3, [sp, #4]
 800325e:	2202      	movs	r2, #2
 8003260:	9200      	str	r2, [sp, #0]
 8003262:	2104      	movs	r1, #4
 8003264:	486e      	ldr	r0, [pc, #440]	@ (8003420 <PIN_Setup+0x524>)
 8003266:	f7ff fd9f 	bl	8002da8 <GPIO_Pin_Init>
 800326a:	e662      	b.n	8002f32 <PIN_Setup+0x36>
		__usart_3_config__ = config;
 800326c:	4b6e      	ldr	r3, [pc, #440]	@ (8003428 <PIN_Setup+0x52c>)
 800326e:	6018      	str	r0, [r3, #0]
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 8003270:	7a03      	ldrb	r3, [r0, #8]
 8003272:	3b01      	subs	r3, #1
 8003274:	2b06      	cmp	r3, #6
 8003276:	f63f ae5c 	bhi.w	8002f32 <PIN_Setup+0x36>
 800327a:	e8df f003 	tbb	[pc, r3]
 800327e:	0404      	.short	0x0404
 8003280:	b80404b8 	.word	0xb80404b8
 8003284:	b8          	.byte	0xb8
 8003285:	00          	.byte	0x00
			if(config->TX_Pin == USART3_TX_Pin.PB11)GPIO_Pin_Init(GPIOA, USART3_TX_Pin.PB11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003286:	7a43      	ldrb	r3, [r0, #9]
 8003288:	2b0b      	cmp	r3, #11
 800328a:	d02e      	beq.n	80032ea <PIN_Setup+0x3ee>
			else if(config->TX_Pin == USART3_TX_Pin.PC10)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PC10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 800328c:	2b0a      	cmp	r3, #10
 800328e:	d037      	beq.n	8003300 <PIN_Setup+0x404>
			else if(config->TX_Pin == USART3_TX_Pin.PD8)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PD8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003290:	2b08      	cmp	r3, #8
 8003292:	d040      	beq.n	8003316 <PIN_Setup+0x41a>
			if(config->RX_Pin == USART3_RX_Pin.PB10)GPIO_Pin_Init(GPIOA, USART3_RX_Pin.PB10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003294:	7aa3      	ldrb	r3, [r4, #10]
 8003296:	2b0a      	cmp	r3, #10
 8003298:	d048      	beq.n	800332c <PIN_Setup+0x430>
			else if(config->RX_Pin == USART3_RX_Pin.PC11)GPIO_Pin_Init(GPIOB, USART3_RX_Pin.PC11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 800329a:	2b0b      	cmp	r3, #11
 800329c:	d051      	beq.n	8003342 <PIN_Setup+0x446>
			else if(config->TX_Pin == USART3_TX_Pin.PD8)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PD8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 800329e:	7a63      	ldrb	r3, [r4, #9]
 80032a0:	2b08      	cmp	r3, #8
 80032a2:	d059      	beq.n	8003358 <PIN_Setup+0x45c>
			if((config->mode == USART_Configuration.Mode.Synchronous))
 80032a4:	7a23      	ldrb	r3, [r4, #8]
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d061      	beq.n	800336e <PIN_Setup+0x472>
			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 80032aa:	7be3      	ldrb	r3, [r4, #15]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f43f ae40 	beq.w	8002f32 <PIN_Setup+0x36>
				if((config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_Enable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d076      	beq.n	80033a4 <PIN_Setup+0x4a8>
 80032b6:	2b03      	cmp	r3, #3
 80032b8:	d074      	beq.n	80033a4 <PIN_Setup+0x4a8>
				if((config->hardware_flow == USART_Configuration.Hardware_Flow.RTS_Enable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 80032ba:	7be3      	ldrb	r3, [r4, #15]
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d002      	beq.n	80032c6 <PIN_Setup+0x3ca>
 80032c0:	2b03      	cmp	r3, #3
 80032c2:	f47f ae36 	bne.w	8002f32 <PIN_Setup+0x36>
					if(config->CLK_Pin == USART3_RTS_Pin.PB14)GPIO_Pin_Init(GPIOB, USART3_RTS_Pin.PB14, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 80032c6:	7ae3      	ldrb	r3, [r4, #11]
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	f000 8085 	beq.w	80033d8 <PIN_Setup+0x4dc>
					else if(config->CLK_Pin == USART3_RTS_Pin.PD12)GPIO_Pin_Init(GPIOD, USART3_RTS_Pin.PD12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 80032ce:	2b04      	cmp	r3, #4
 80032d0:	f47f ae2f 	bne.w	8002f32 <PIN_Setup+0x36>
 80032d4:	2307      	movs	r3, #7
 80032d6:	9302      	str	r3, [sp, #8]
 80032d8:	2300      	movs	r3, #0
 80032da:	9301      	str	r3, [sp, #4]
 80032dc:	2202      	movs	r2, #2
 80032de:	9200      	str	r2, [sp, #0]
 80032e0:	2104      	movs	r1, #4
 80032e2:	4850      	ldr	r0, [pc, #320]	@ (8003424 <PIN_Setup+0x528>)
 80032e4:	f7ff fd60 	bl	8002da8 <GPIO_Pin_Init>
 80032e8:	e623      	b.n	8002f32 <PIN_Setup+0x36>
			if(config->TX_Pin == USART3_TX_Pin.PB11)GPIO_Pin_Init(GPIOA, USART3_TX_Pin.PB11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 80032ea:	2307      	movs	r3, #7
 80032ec:	9302      	str	r3, [sp, #8]
 80032ee:	2300      	movs	r3, #0
 80032f0:	9301      	str	r3, [sp, #4]
 80032f2:	2202      	movs	r2, #2
 80032f4:	9200      	str	r2, [sp, #0]
 80032f6:	210b      	movs	r1, #11
 80032f8:	4849      	ldr	r0, [pc, #292]	@ (8003420 <PIN_Setup+0x524>)
 80032fa:	f7ff fd55 	bl	8002da8 <GPIO_Pin_Init>
 80032fe:	e7c9      	b.n	8003294 <PIN_Setup+0x398>
			else if(config->TX_Pin == USART3_TX_Pin.PC10)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PC10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003300:	2307      	movs	r3, #7
 8003302:	9302      	str	r3, [sp, #8]
 8003304:	2300      	movs	r3, #0
 8003306:	9301      	str	r3, [sp, #4]
 8003308:	2202      	movs	r2, #2
 800330a:	9200      	str	r2, [sp, #0]
 800330c:	210a      	movs	r1, #10
 800330e:	4847      	ldr	r0, [pc, #284]	@ (800342c <PIN_Setup+0x530>)
 8003310:	f7ff fd4a 	bl	8002da8 <GPIO_Pin_Init>
 8003314:	e7be      	b.n	8003294 <PIN_Setup+0x398>
			else if(config->TX_Pin == USART3_TX_Pin.PD8)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PD8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003316:	2307      	movs	r3, #7
 8003318:	9302      	str	r3, [sp, #8]
 800331a:	2300      	movs	r3, #0
 800331c:	9301      	str	r3, [sp, #4]
 800331e:	2202      	movs	r2, #2
 8003320:	9200      	str	r2, [sp, #0]
 8003322:	2108      	movs	r1, #8
 8003324:	4841      	ldr	r0, [pc, #260]	@ (800342c <PIN_Setup+0x530>)
 8003326:	f7ff fd3f 	bl	8002da8 <GPIO_Pin_Init>
 800332a:	e7b3      	b.n	8003294 <PIN_Setup+0x398>
			if(config->RX_Pin == USART3_RX_Pin.PB10)GPIO_Pin_Init(GPIOA, USART3_RX_Pin.PB10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 800332c:	2307      	movs	r3, #7
 800332e:	9302      	str	r3, [sp, #8]
 8003330:	2300      	movs	r3, #0
 8003332:	9301      	str	r3, [sp, #4]
 8003334:	2202      	movs	r2, #2
 8003336:	9200      	str	r2, [sp, #0]
 8003338:	210a      	movs	r1, #10
 800333a:	4839      	ldr	r0, [pc, #228]	@ (8003420 <PIN_Setup+0x524>)
 800333c:	f7ff fd34 	bl	8002da8 <GPIO_Pin_Init>
 8003340:	e7b0      	b.n	80032a4 <PIN_Setup+0x3a8>
			else if(config->RX_Pin == USART3_RX_Pin.PC11)GPIO_Pin_Init(GPIOB, USART3_RX_Pin.PC11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003342:	2307      	movs	r3, #7
 8003344:	9302      	str	r3, [sp, #8]
 8003346:	2300      	movs	r3, #0
 8003348:	9301      	str	r3, [sp, #4]
 800334a:	2202      	movs	r2, #2
 800334c:	9200      	str	r2, [sp, #0]
 800334e:	210b      	movs	r1, #11
 8003350:	4836      	ldr	r0, [pc, #216]	@ (800342c <PIN_Setup+0x530>)
 8003352:	f7ff fd29 	bl	8002da8 <GPIO_Pin_Init>
 8003356:	e7a5      	b.n	80032a4 <PIN_Setup+0x3a8>
			else if(config->TX_Pin == USART3_TX_Pin.PD8)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PD8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003358:	2307      	movs	r3, #7
 800335a:	9302      	str	r3, [sp, #8]
 800335c:	2300      	movs	r3, #0
 800335e:	9301      	str	r3, [sp, #4]
 8003360:	2202      	movs	r2, #2
 8003362:	9200      	str	r2, [sp, #0]
 8003364:	2108      	movs	r1, #8
 8003366:	4831      	ldr	r0, [pc, #196]	@ (800342c <PIN_Setup+0x530>)
 8003368:	f7ff fd1e 	bl	8002da8 <GPIO_Pin_Init>
 800336c:	e79a      	b.n	80032a4 <PIN_Setup+0x3a8>
				if(config->CLK_Pin == USART3_CLK_Pin.PB12)GPIO_Pin_Init(GPIOB, USART3_CLK_Pin.PB12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 800336e:	7ae3      	ldrb	r3, [r4, #11]
 8003370:	2b0c      	cmp	r3, #12
 8003372:	d00c      	beq.n	800338e <PIN_Setup+0x492>
				else if(config->CLK_Pin == USART3_CLK_Pin.PD10)GPIO_Pin_Init(GPIOD, USART3_CLK_Pin.PD10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003374:	2b0a      	cmp	r3, #10
 8003376:	d198      	bne.n	80032aa <PIN_Setup+0x3ae>
 8003378:	2307      	movs	r3, #7
 800337a:	9302      	str	r3, [sp, #8]
 800337c:	2300      	movs	r3, #0
 800337e:	9301      	str	r3, [sp, #4]
 8003380:	2202      	movs	r2, #2
 8003382:	9200      	str	r2, [sp, #0]
 8003384:	210a      	movs	r1, #10
 8003386:	4827      	ldr	r0, [pc, #156]	@ (8003424 <PIN_Setup+0x528>)
 8003388:	f7ff fd0e 	bl	8002da8 <GPIO_Pin_Init>
 800338c:	e78d      	b.n	80032aa <PIN_Setup+0x3ae>
				if(config->CLK_Pin == USART3_CLK_Pin.PB12)GPIO_Pin_Init(GPIOB, USART3_CLK_Pin.PB12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 800338e:	2307      	movs	r3, #7
 8003390:	9302      	str	r3, [sp, #8]
 8003392:	2300      	movs	r3, #0
 8003394:	9301      	str	r3, [sp, #4]
 8003396:	2202      	movs	r2, #2
 8003398:	9200      	str	r2, [sp, #0]
 800339a:	210c      	movs	r1, #12
 800339c:	4823      	ldr	r0, [pc, #140]	@ (800342c <PIN_Setup+0x530>)
 800339e:	f7ff fd03 	bl	8002da8 <GPIO_Pin_Init>
 80033a2:	e782      	b.n	80032aa <PIN_Setup+0x3ae>
					if(config->CLK_Pin == USART3_CTS_Pin.PB13)GPIO_Pin_Init(GPIOB, USART3_CTS_Pin.PB13, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 80033a4:	7ae3      	ldrb	r3, [r4, #11]
 80033a6:	b163      	cbz	r3, 80033c2 <PIN_Setup+0x4c6>
					else if(config->CLK_Pin == USART3_CTS_Pin.PD11)GPIO_Pin_Init(GPIOD, USART3_CTS_Pin.PD11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 80033a8:	2b03      	cmp	r3, #3
 80033aa:	d186      	bne.n	80032ba <PIN_Setup+0x3be>
 80033ac:	2307      	movs	r3, #7
 80033ae:	9302      	str	r3, [sp, #8]
 80033b0:	2300      	movs	r3, #0
 80033b2:	9301      	str	r3, [sp, #4]
 80033b4:	2202      	movs	r2, #2
 80033b6:	9200      	str	r2, [sp, #0]
 80033b8:	2103      	movs	r1, #3
 80033ba:	481a      	ldr	r0, [pc, #104]	@ (8003424 <PIN_Setup+0x528>)
 80033bc:	f7ff fcf4 	bl	8002da8 <GPIO_Pin_Init>
 80033c0:	e77b      	b.n	80032ba <PIN_Setup+0x3be>
					if(config->CLK_Pin == USART3_CTS_Pin.PB13)GPIO_Pin_Init(GPIOB, USART3_CTS_Pin.PB13, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 80033c2:	2307      	movs	r3, #7
 80033c4:	9302      	str	r3, [sp, #8]
 80033c6:	2100      	movs	r1, #0
 80033c8:	9101      	str	r1, [sp, #4]
 80033ca:	2202      	movs	r2, #2
 80033cc:	9200      	str	r2, [sp, #0]
 80033ce:	460b      	mov	r3, r1
 80033d0:	4816      	ldr	r0, [pc, #88]	@ (800342c <PIN_Setup+0x530>)
 80033d2:	f7ff fce9 	bl	8002da8 <GPIO_Pin_Init>
 80033d6:	e770      	b.n	80032ba <PIN_Setup+0x3be>
					if(config->CLK_Pin == USART3_RTS_Pin.PB14)GPIO_Pin_Init(GPIOB, USART3_RTS_Pin.PB14, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 80033d8:	2307      	movs	r3, #7
 80033da:	9302      	str	r3, [sp, #8]
 80033dc:	2300      	movs	r3, #0
 80033de:	9301      	str	r3, [sp, #4]
 80033e0:	2202      	movs	r2, #2
 80033e2:	9200      	str	r2, [sp, #0]
 80033e4:	2101      	movs	r1, #1
 80033e6:	4811      	ldr	r0, [pc, #68]	@ (800342c <PIN_Setup+0x530>)
 80033e8:	f7ff fcde 	bl	8002da8 <GPIO_Pin_Init>
 80033ec:	e5a1      	b.n	8002f32 <PIN_Setup+0x36>
			if(config->TX_Pin == USART3_TX_Pin.PB11)GPIO_Pin_Init(GPIOA, USART3_TX_Pin.PB11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 80033ee:	7a43      	ldrb	r3, [r0, #9]
 80033f0:	2b0b      	cmp	r3, #11
 80033f2:	d01d      	beq.n	8003430 <PIN_Setup+0x534>
			else if(config->TX_Pin == USART3_TX_Pin.PC10)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PC10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 80033f4:	2b0a      	cmp	r3, #10
 80033f6:	d026      	beq.n	8003446 <PIN_Setup+0x54a>
			else if(config->TX_Pin == USART3_TX_Pin.PD8)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PD8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 80033f8:	2b08      	cmp	r3, #8
 80033fa:	d02f      	beq.n	800345c <PIN_Setup+0x560>
			if(config->CLK_Pin == USART3_CLK_Pin.PB12)GPIO_Pin_Init(GPIOB, USART3_CLK_Pin.PB12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 80033fc:	7ae3      	ldrb	r3, [r4, #11]
 80033fe:	2b0c      	cmp	r3, #12
 8003400:	d037      	beq.n	8003472 <PIN_Setup+0x576>
			else if(config->CLK_Pin == USART3_CLK_Pin.PD10)GPIO_Pin_Init(GPIOD, USART3_CLK_Pin.PD10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003402:	2b0a      	cmp	r3, #10
 8003404:	f47f ad95 	bne.w	8002f32 <PIN_Setup+0x36>
 8003408:	2307      	movs	r3, #7
 800340a:	9302      	str	r3, [sp, #8]
 800340c:	2300      	movs	r3, #0
 800340e:	9301      	str	r3, [sp, #4]
 8003410:	2202      	movs	r2, #2
 8003412:	9200      	str	r2, [sp, #0]
 8003414:	210a      	movs	r1, #10
 8003416:	4803      	ldr	r0, [pc, #12]	@ (8003424 <PIN_Setup+0x528>)
 8003418:	f7ff fcc6 	bl	8002da8 <GPIO_Pin_Init>
 800341c:	e589      	b.n	8002f32 <PIN_Setup+0x36>
 800341e:	bf00      	nop
 8003420:	40020000 	.word	0x40020000
 8003424:	40020c00 	.word	0x40020c00
 8003428:	2000049c 	.word	0x2000049c
 800342c:	40020400 	.word	0x40020400
			if(config->TX_Pin == USART3_TX_Pin.PB11)GPIO_Pin_Init(GPIOA, USART3_TX_Pin.PB11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003430:	2307      	movs	r3, #7
 8003432:	9302      	str	r3, [sp, #8]
 8003434:	2300      	movs	r3, #0
 8003436:	9301      	str	r3, [sp, #4]
 8003438:	2202      	movs	r2, #2
 800343a:	9200      	str	r2, [sp, #0]
 800343c:	210b      	movs	r1, #11
 800343e:	486e      	ldr	r0, [pc, #440]	@ (80035f8 <PIN_Setup+0x6fc>)
 8003440:	f7ff fcb2 	bl	8002da8 <GPIO_Pin_Init>
 8003444:	e7da      	b.n	80033fc <PIN_Setup+0x500>
			else if(config->TX_Pin == USART3_TX_Pin.PC10)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PC10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003446:	2307      	movs	r3, #7
 8003448:	9302      	str	r3, [sp, #8]
 800344a:	2300      	movs	r3, #0
 800344c:	9301      	str	r3, [sp, #4]
 800344e:	2202      	movs	r2, #2
 8003450:	9200      	str	r2, [sp, #0]
 8003452:	210a      	movs	r1, #10
 8003454:	4869      	ldr	r0, [pc, #420]	@ (80035fc <PIN_Setup+0x700>)
 8003456:	f7ff fca7 	bl	8002da8 <GPIO_Pin_Init>
 800345a:	e7cf      	b.n	80033fc <PIN_Setup+0x500>
			else if(config->TX_Pin == USART3_TX_Pin.PD8)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PD8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 800345c:	2307      	movs	r3, #7
 800345e:	9302      	str	r3, [sp, #8]
 8003460:	2300      	movs	r3, #0
 8003462:	9301      	str	r3, [sp, #4]
 8003464:	2202      	movs	r2, #2
 8003466:	9200      	str	r2, [sp, #0]
 8003468:	2108      	movs	r1, #8
 800346a:	4864      	ldr	r0, [pc, #400]	@ (80035fc <PIN_Setup+0x700>)
 800346c:	f7ff fc9c 	bl	8002da8 <GPIO_Pin_Init>
 8003470:	e7c4      	b.n	80033fc <PIN_Setup+0x500>
			if(config->CLK_Pin == USART3_CLK_Pin.PB12)GPIO_Pin_Init(GPIOB, USART3_CLK_Pin.PB12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003472:	2307      	movs	r3, #7
 8003474:	9302      	str	r3, [sp, #8]
 8003476:	2300      	movs	r3, #0
 8003478:	9301      	str	r3, [sp, #4]
 800347a:	2202      	movs	r2, #2
 800347c:	9200      	str	r2, [sp, #0]
 800347e:	210c      	movs	r1, #12
 8003480:	485e      	ldr	r0, [pc, #376]	@ (80035fc <PIN_Setup+0x700>)
 8003482:	f7ff fc91 	bl	8002da8 <GPIO_Pin_Init>
 8003486:	e554      	b.n	8002f32 <PIN_Setup+0x36>
		__usart_4_config__ = config;
 8003488:	4b5d      	ldr	r3, [pc, #372]	@ (8003600 <PIN_Setup+0x704>)
 800348a:	6018      	str	r0, [r3, #0]
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 800348c:	7a03      	ldrb	r3, [r0, #8]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d004      	beq.n	800349c <PIN_Setup+0x5a0>
 8003492:	2b04      	cmp	r3, #4
 8003494:	d002      	beq.n	800349c <PIN_Setup+0x5a0>
				(config->mode == USART_Configuration.Mode.IrDA) ||
 8003496:	2b05      	cmp	r3, #5
 8003498:	f47f ad4b 	bne.w	8002f32 <PIN_Setup+0x36>
			if(config->TX_Pin == UART4_TX_Pin.PA0)GPIO_Pin_Init(GPIOA, UART4_TX_Pin.PA0, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_4);
 800349c:	7a63      	ldrb	r3, [r4, #9]
 800349e:	b193      	cbz	r3, 80034c6 <PIN_Setup+0x5ca>
			else if(config->TX_Pin == UART4_TX_Pin.PC10)GPIO_Pin_Init(GPIOC, UART4_TX_Pin.PC10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_4);
 80034a0:	2b0a      	cmp	r3, #10
 80034a2:	d01b      	beq.n	80034dc <PIN_Setup+0x5e0>
			if(config->RX_Pin == UART4_RX_Pin.PA1)GPIO_Pin_Init(GPIOA, UART4_RX_Pin.PA1, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_4);
 80034a4:	7aa3      	ldrb	r3, [r4, #10]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d023      	beq.n	80034f2 <PIN_Setup+0x5f6>
			else if(config->RX_Pin == UART4_RX_Pin.PC11)GPIO_Pin_Init(GPIOC, UART4_RX_Pin.PC11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_4);
 80034aa:	2b0b      	cmp	r3, #11
 80034ac:	f47f ad41 	bne.w	8002f32 <PIN_Setup+0x36>
 80034b0:	2308      	movs	r3, #8
 80034b2:	9302      	str	r3, [sp, #8]
 80034b4:	2300      	movs	r3, #0
 80034b6:	9301      	str	r3, [sp, #4]
 80034b8:	2202      	movs	r2, #2
 80034ba:	9200      	str	r2, [sp, #0]
 80034bc:	210b      	movs	r1, #11
 80034be:	4851      	ldr	r0, [pc, #324]	@ (8003604 <PIN_Setup+0x708>)
 80034c0:	f7ff fc72 	bl	8002da8 <GPIO_Pin_Init>
 80034c4:	e535      	b.n	8002f32 <PIN_Setup+0x36>
			if(config->TX_Pin == UART4_TX_Pin.PA0)GPIO_Pin_Init(GPIOA, UART4_TX_Pin.PA0, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_4);
 80034c6:	2308      	movs	r3, #8
 80034c8:	9302      	str	r3, [sp, #8]
 80034ca:	2100      	movs	r1, #0
 80034cc:	9101      	str	r1, [sp, #4]
 80034ce:	2202      	movs	r2, #2
 80034d0:	9200      	str	r2, [sp, #0]
 80034d2:	460b      	mov	r3, r1
 80034d4:	4848      	ldr	r0, [pc, #288]	@ (80035f8 <PIN_Setup+0x6fc>)
 80034d6:	f7ff fc67 	bl	8002da8 <GPIO_Pin_Init>
 80034da:	e7e3      	b.n	80034a4 <PIN_Setup+0x5a8>
			else if(config->TX_Pin == UART4_TX_Pin.PC10)GPIO_Pin_Init(GPIOC, UART4_TX_Pin.PC10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_4);
 80034dc:	2308      	movs	r3, #8
 80034de:	9302      	str	r3, [sp, #8]
 80034e0:	2300      	movs	r3, #0
 80034e2:	9301      	str	r3, [sp, #4]
 80034e4:	2202      	movs	r2, #2
 80034e6:	9200      	str	r2, [sp, #0]
 80034e8:	210a      	movs	r1, #10
 80034ea:	4846      	ldr	r0, [pc, #280]	@ (8003604 <PIN_Setup+0x708>)
 80034ec:	f7ff fc5c 	bl	8002da8 <GPIO_Pin_Init>
 80034f0:	e7d8      	b.n	80034a4 <PIN_Setup+0x5a8>
			if(config->RX_Pin == UART4_RX_Pin.PA1)GPIO_Pin_Init(GPIOA, UART4_RX_Pin.PA1, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_4);
 80034f2:	2308      	movs	r3, #8
 80034f4:	9302      	str	r3, [sp, #8]
 80034f6:	2300      	movs	r3, #0
 80034f8:	9301      	str	r3, [sp, #4]
 80034fa:	2202      	movs	r2, #2
 80034fc:	9200      	str	r2, [sp, #0]
 80034fe:	2101      	movs	r1, #1
 8003500:	483d      	ldr	r0, [pc, #244]	@ (80035f8 <PIN_Setup+0x6fc>)
 8003502:	f7ff fc51 	bl	8002da8 <GPIO_Pin_Init>
 8003506:	e514      	b.n	8002f32 <PIN_Setup+0x36>
		__usart_5_config__ = config;
 8003508:	4b3f      	ldr	r3, [pc, #252]	@ (8003608 <PIN_Setup+0x70c>)
 800350a:	6018      	str	r0, [r3, #0]
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 800350c:	7a03      	ldrb	r3, [r0, #8]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d004      	beq.n	800351c <PIN_Setup+0x620>
 8003512:	2b04      	cmp	r3, #4
 8003514:	d002      	beq.n	800351c <PIN_Setup+0x620>
				(config->mode == USART_Configuration.Mode.IrDA) ||
 8003516:	2b05      	cmp	r3, #5
 8003518:	f47f ad0b 	bne.w	8002f32 <PIN_Setup+0x36>
			if(config->TX_Pin == UART5_TX_Pin.PD2)GPIO_Pin_Init(GPIOA, UART5_TX_Pin.PD2, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.UART_5);
 800351c:	7a63      	ldrb	r3, [r4, #9]
 800351e:	2b02      	cmp	r3, #2
 8003520:	d00e      	beq.n	8003540 <PIN_Setup+0x644>
			if(config->RX_Pin == UART5_RX_Pin.PC12)GPIO_Pin_Init(GPIOA, UART5_RX_Pin.PC12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.UART_5);
 8003522:	7aa3      	ldrb	r3, [r4, #10]
 8003524:	2b0c      	cmp	r3, #12
 8003526:	f47f ad04 	bne.w	8002f32 <PIN_Setup+0x36>
 800352a:	2308      	movs	r3, #8
 800352c:	9302      	str	r3, [sp, #8]
 800352e:	2300      	movs	r3, #0
 8003530:	9301      	str	r3, [sp, #4]
 8003532:	2202      	movs	r2, #2
 8003534:	9200      	str	r2, [sp, #0]
 8003536:	210c      	movs	r1, #12
 8003538:	482f      	ldr	r0, [pc, #188]	@ (80035f8 <PIN_Setup+0x6fc>)
 800353a:	f7ff fc35 	bl	8002da8 <GPIO_Pin_Init>
 800353e:	e4f8      	b.n	8002f32 <PIN_Setup+0x36>
			if(config->TX_Pin == UART5_TX_Pin.PD2)GPIO_Pin_Init(GPIOA, UART5_TX_Pin.PD2, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.UART_5);
 8003540:	2308      	movs	r3, #8
 8003542:	9302      	str	r3, [sp, #8]
 8003544:	2300      	movs	r3, #0
 8003546:	9301      	str	r3, [sp, #4]
 8003548:	2102      	movs	r1, #2
 800354a:	9100      	str	r1, [sp, #0]
 800354c:	460a      	mov	r2, r1
 800354e:	482a      	ldr	r0, [pc, #168]	@ (80035f8 <PIN_Setup+0x6fc>)
 8003550:	f7ff fc2a 	bl	8002da8 <GPIO_Pin_Init>
 8003554:	e7e5      	b.n	8003522 <PIN_Setup+0x626>
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 8003556:	7a03      	ldrb	r3, [r0, #8]
 8003558:	3b01      	subs	r3, #1
 800355a:	2b06      	cmp	r3, #6
 800355c:	f63f ace9 	bhi.w	8002f32 <PIN_Setup+0x36>
 8003560:	e8df f003 	tbb	[pc, r3]
 8003564:	042e0404 	.word	0x042e0404
 8003568:	2e04      	.short	0x2e04
 800356a:	2e          	.byte	0x2e
 800356b:	00          	.byte	0x00
			if(config->TX_Pin == USART6_TX_Pin.PC6)GPIO_Pin_Init(GPIOC, USART6_TX_Pin.PC6, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_6);
 800356c:	7a43      	ldrb	r3, [r0, #9]
 800356e:	2b06      	cmp	r3, #6
 8003570:	d010      	beq.n	8003594 <PIN_Setup+0x698>
			if(config->RX_Pin == USART6_RX_Pin.PC7)GPIO_Pin_Init(GPIOC, USART6_RX_Pin.PC7, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_6);
 8003572:	7aa3      	ldrb	r3, [r4, #10]
 8003574:	2b07      	cmp	r3, #7
 8003576:	d018      	beq.n	80035aa <PIN_Setup+0x6ae>
			if(config->CLK_Pin == USART6_CLK_Pin.PC8)GPIO_Pin_Init(GPIOC, USART6_CLK_Pin.PC8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_6);
 8003578:	7ae3      	ldrb	r3, [r4, #11]
 800357a:	2b08      	cmp	r3, #8
 800357c:	f47f acd9 	bne.w	8002f32 <PIN_Setup+0x36>
 8003580:	2108      	movs	r1, #8
 8003582:	9102      	str	r1, [sp, #8]
 8003584:	2300      	movs	r3, #0
 8003586:	9301      	str	r3, [sp, #4]
 8003588:	2202      	movs	r2, #2
 800358a:	9200      	str	r2, [sp, #0]
 800358c:	481d      	ldr	r0, [pc, #116]	@ (8003604 <PIN_Setup+0x708>)
 800358e:	f7ff fc0b 	bl	8002da8 <GPIO_Pin_Init>
 8003592:	e4ce      	b.n	8002f32 <PIN_Setup+0x36>
			if(config->TX_Pin == USART6_TX_Pin.PC6)GPIO_Pin_Init(GPIOC, USART6_TX_Pin.PC6, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_6);
 8003594:	2308      	movs	r3, #8
 8003596:	9302      	str	r3, [sp, #8]
 8003598:	2300      	movs	r3, #0
 800359a:	9301      	str	r3, [sp, #4]
 800359c:	2202      	movs	r2, #2
 800359e:	9200      	str	r2, [sp, #0]
 80035a0:	2106      	movs	r1, #6
 80035a2:	4818      	ldr	r0, [pc, #96]	@ (8003604 <PIN_Setup+0x708>)
 80035a4:	f7ff fc00 	bl	8002da8 <GPIO_Pin_Init>
 80035a8:	e7e3      	b.n	8003572 <PIN_Setup+0x676>
			if(config->RX_Pin == USART6_RX_Pin.PC7)GPIO_Pin_Init(GPIOC, USART6_RX_Pin.PC7, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_6);
 80035aa:	2308      	movs	r3, #8
 80035ac:	9302      	str	r3, [sp, #8]
 80035ae:	2300      	movs	r3, #0
 80035b0:	9301      	str	r3, [sp, #4]
 80035b2:	2202      	movs	r2, #2
 80035b4:	9200      	str	r2, [sp, #0]
 80035b6:	2107      	movs	r1, #7
 80035b8:	4812      	ldr	r0, [pc, #72]	@ (8003604 <PIN_Setup+0x708>)
 80035ba:	f7ff fbf5 	bl	8002da8 <GPIO_Pin_Init>
 80035be:	e7db      	b.n	8003578 <PIN_Setup+0x67c>
			if(config->TX_Pin == USART6_TX_Pin.PC6)GPIO_Pin_Init(GPIOA, USART6_TX_Pin.PC6, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_6);
 80035c0:	7a43      	ldrb	r3, [r0, #9]
 80035c2:	2b06      	cmp	r3, #6
 80035c4:	d00d      	beq.n	80035e2 <PIN_Setup+0x6e6>
			if((config->mode == USART_Configuration.Mode.SmartCard_Clock))GPIO_Pin_Init(GPIOA, USART6_CLK_Pin.PC8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_6);
 80035c6:	7a23      	ldrb	r3, [r4, #8]
 80035c8:	2b07      	cmp	r3, #7
 80035ca:	f47f acb2 	bne.w	8002f32 <PIN_Setup+0x36>
 80035ce:	2108      	movs	r1, #8
 80035d0:	9102      	str	r1, [sp, #8]
 80035d2:	2300      	movs	r3, #0
 80035d4:	9301      	str	r3, [sp, #4]
 80035d6:	2202      	movs	r2, #2
 80035d8:	9200      	str	r2, [sp, #0]
 80035da:	4807      	ldr	r0, [pc, #28]	@ (80035f8 <PIN_Setup+0x6fc>)
 80035dc:	f7ff fbe4 	bl	8002da8 <GPIO_Pin_Init>
}
 80035e0:	e4a7      	b.n	8002f32 <PIN_Setup+0x36>
			if(config->TX_Pin == USART6_TX_Pin.PC6)GPIO_Pin_Init(GPIOA, USART6_TX_Pin.PC6, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_6);
 80035e2:	2308      	movs	r3, #8
 80035e4:	9302      	str	r3, [sp, #8]
 80035e6:	2300      	movs	r3, #0
 80035e8:	9301      	str	r3, [sp, #4]
 80035ea:	2202      	movs	r2, #2
 80035ec:	9200      	str	r2, [sp, #0]
 80035ee:	2106      	movs	r1, #6
 80035f0:	4801      	ldr	r0, [pc, #4]	@ (80035f8 <PIN_Setup+0x6fc>)
 80035f2:	f7ff fbd9 	bl	8002da8 <GPIO_Pin_Init>
 80035f6:	e7e6      	b.n	80035c6 <PIN_Setup+0x6ca>
 80035f8:	40020000 	.word	0x40020000
 80035fc:	40020400 	.word	0x40020400
 8003600:	20000498 	.word	0x20000498
 8003604:	40020800 	.word	0x40020800
 8003608:	20000494 	.word	0x20000494

0800360c <UART4_IRQHandler>:
{
 800360c:	b508      	push	{r3, lr}
	USART_SR = UART4 -> SR;
 800360e:	4b3a      	ldr	r3, [pc, #232]	@ (80036f8 <UART4_IRQHandler+0xec>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	b29b      	uxth	r3, r3
 8003614:	4a39      	ldr	r2, [pc, #228]	@ (80036fc <UART4_IRQHandler+0xf0>)
 8003616:	8013      	strh	r3, [r2, #0]
	if(USART_SR & USART_SR_CTS)
 8003618:	8813      	ldrh	r3, [r2, #0]
 800361a:	f413 7f00 	tst.w	r3, #512	@ 0x200
 800361e:	d00a      	beq.n	8003636 <UART4_IRQHandler+0x2a>
		if (__usart_4_config__ ->ISR_Routines.CTS_ISR) {
 8003620:	4b37      	ldr	r3, [pc, #220]	@ (8003700 <UART4_IRQHandler+0xf4>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003628:	b12b      	cbz	r3, 8003636 <UART4_IRQHandler+0x2a>
			__usart_4_config__ ->ISR_Routines.CTS_ISR();
 800362a:	4798      	blx	r3
			UART4->SR &= ~USART_SR_CTS;  // Clear the Break interrupt flag
 800362c:	4a32      	ldr	r2, [pc, #200]	@ (80036f8 <UART4_IRQHandler+0xec>)
 800362e:	6813      	ldr	r3, [r2, #0]
 8003630:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003634:	6013      	str	r3, [r2, #0]
	if(USART_SR & USART_SR_LBD)
 8003636:	4b31      	ldr	r3, [pc, #196]	@ (80036fc <UART4_IRQHandler+0xf0>)
 8003638:	881b      	ldrh	r3, [r3, #0]
 800363a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800363e:	d00a      	beq.n	8003656 <UART4_IRQHandler+0x4a>
		if (__usart_4_config__ ->ISR_Routines.LIN_Break_Detection_ISR) {
 8003640:	4b2f      	ldr	r3, [pc, #188]	@ (8003700 <UART4_IRQHandler+0xf4>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003648:	b12b      	cbz	r3, 8003656 <UART4_IRQHandler+0x4a>
			__usart_4_config__ ->ISR_Routines.LIN_Break_Detection_ISR();
 800364a:	4798      	blx	r3
			UART4->SR &= ~USART_SR_LBD;  // Clear the Break interrupt flag
 800364c:	4a2a      	ldr	r2, [pc, #168]	@ (80036f8 <UART4_IRQHandler+0xec>)
 800364e:	6813      	ldr	r3, [r2, #0]
 8003650:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003654:	6013      	str	r3, [r2, #0]
	if(USART_SR & USART_SR_TXE)
 8003656:	4b29      	ldr	r3, [pc, #164]	@ (80036fc <UART4_IRQHandler+0xf0>)
 8003658:	881b      	ldrh	r3, [r3, #0]
 800365a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800365e:	d00a      	beq.n	8003676 <UART4_IRQHandler+0x6a>
		if (__usart_4_config__ ->ISR_Routines.Transmit_Empty_ISR) {
 8003660:	4b27      	ldr	r3, [pc, #156]	@ (8003700 <UART4_IRQHandler+0xf4>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003668:	b12b      	cbz	r3, 8003676 <UART4_IRQHandler+0x6a>
			__usart_4_config__ ->ISR_Routines.Transmit_Empty_ISR();
 800366a:	4798      	blx	r3
			UART4->SR &= ~USART_SR_TXE;  // Clear the Break interrupt flag
 800366c:	4a22      	ldr	r2, [pc, #136]	@ (80036f8 <UART4_IRQHandler+0xec>)
 800366e:	6813      	ldr	r3, [r2, #0]
 8003670:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003674:	6013      	str	r3, [r2, #0]
	if(USART_SR & USART_SR_TC)
 8003676:	4b21      	ldr	r3, [pc, #132]	@ (80036fc <UART4_IRQHandler+0xf0>)
 8003678:	881b      	ldrh	r3, [r3, #0]
 800367a:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800367e:	d00a      	beq.n	8003696 <UART4_IRQHandler+0x8a>
		if (__usart_4_config__ ->ISR_Routines.Transmission_Complete_ISR) {
 8003680:	4b1f      	ldr	r3, [pc, #124]	@ (8003700 <UART4_IRQHandler+0xf4>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8003688:	b12b      	cbz	r3, 8003696 <UART4_IRQHandler+0x8a>
			__usart_4_config__ ->ISR_Routines.Transmission_Complete_ISR();
 800368a:	4798      	blx	r3
			UART4->SR &= ~USART_SR_TC;  // Clear the Break interrupt flag
 800368c:	4a1a      	ldr	r2, [pc, #104]	@ (80036f8 <UART4_IRQHandler+0xec>)
 800368e:	6813      	ldr	r3, [r2, #0]
 8003690:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003694:	6013      	str	r3, [r2, #0]
	if(USART_SR & USART_SR_RXNE)
 8003696:	4b19      	ldr	r3, [pc, #100]	@ (80036fc <UART4_IRQHandler+0xf0>)
 8003698:	881b      	ldrh	r3, [r3, #0]
 800369a:	f013 0f20 	tst.w	r3, #32
 800369e:	d00a      	beq.n	80036b6 <UART4_IRQHandler+0xaa>
		if (__usart_4_config__ ->ISR_Routines.Receiver_Empty_ISR) {
 80036a0:	4b17      	ldr	r3, [pc, #92]	@ (8003700 <UART4_IRQHandler+0xf4>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80036a8:	b12b      	cbz	r3, 80036b6 <UART4_IRQHandler+0xaa>
			__usart_4_config__ ->ISR_Routines.Receiver_Empty_ISR();
 80036aa:	4798      	blx	r3
			UART4->SR &= ~USART_SR_RXNE;  // Clear the Break interrupt flag
 80036ac:	4a12      	ldr	r2, [pc, #72]	@ (80036f8 <UART4_IRQHandler+0xec>)
 80036ae:	6813      	ldr	r3, [r2, #0]
 80036b0:	f023 0320 	bic.w	r3, r3, #32
 80036b4:	6013      	str	r3, [r2, #0]
	if(USART_SR & USART_SR_IDLE)
 80036b6:	4b11      	ldr	r3, [pc, #68]	@ (80036fc <UART4_IRQHandler+0xf0>)
 80036b8:	881b      	ldrh	r3, [r3, #0]
 80036ba:	f013 0f10 	tst.w	r3, #16
 80036be:	d00a      	beq.n	80036d6 <UART4_IRQHandler+0xca>
		if (__usart_4_config__ ->ISR_Routines.Idle_Line_ISR) {
 80036c0:	4b0f      	ldr	r3, [pc, #60]	@ (8003700 <UART4_IRQHandler+0xf4>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80036c8:	b12b      	cbz	r3, 80036d6 <UART4_IRQHandler+0xca>
			__usart_4_config__ ->ISR_Routines.Idle_Line_ISR();
 80036ca:	4798      	blx	r3
			UART4->SR &= ~USART_SR_IDLE;  // Clear the Break interrupt flag
 80036cc:	4a0a      	ldr	r2, [pc, #40]	@ (80036f8 <UART4_IRQHandler+0xec>)
 80036ce:	6813      	ldr	r3, [r2, #0]
 80036d0:	f023 0310 	bic.w	r3, r3, #16
 80036d4:	6013      	str	r3, [r2, #0]
	if(USART_SR & USART_SR_PE)
 80036d6:	4b09      	ldr	r3, [pc, #36]	@ (80036fc <UART4_IRQHandler+0xf0>)
 80036d8:	881b      	ldrh	r3, [r3, #0]
 80036da:	f013 0f01 	tst.w	r3, #1
 80036de:	d00a      	beq.n	80036f6 <UART4_IRQHandler+0xea>
		if (__usart_4_config__ ->ISR_Routines.Parity_ISR) {
 80036e0:	4b07      	ldr	r3, [pc, #28]	@ (8003700 <UART4_IRQHandler+0xf4>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80036e8:	b12b      	cbz	r3, 80036f6 <UART4_IRQHandler+0xea>
			__usart_4_config__ ->ISR_Routines.Parity_ISR();
 80036ea:	4798      	blx	r3
			UART4->SR &= ~USART_SR_PE;  // Clear the Break interrupt flag
 80036ec:	4a02      	ldr	r2, [pc, #8]	@ (80036f8 <UART4_IRQHandler+0xec>)
 80036ee:	6813      	ldr	r3, [r2, #0]
 80036f0:	f023 0301 	bic.w	r3, r3, #1
 80036f4:	6013      	str	r3, [r2, #0]
}
 80036f6:	bd08      	pop	{r3, pc}
 80036f8:	40004c00 	.word	0x40004c00
 80036fc:	20000490 	.word	0x20000490
 8003700:	20000498 	.word	0x20000498

08003704 <USART1_IRQHandler>:
{
 8003704:	b508      	push	{r3, lr}
	USART_SR = USART1 -> SR;
 8003706:	4b3a      	ldr	r3, [pc, #232]	@ (80037f0 <USART1_IRQHandler+0xec>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	b29b      	uxth	r3, r3
 800370c:	4a39      	ldr	r2, [pc, #228]	@ (80037f4 <USART1_IRQHandler+0xf0>)
 800370e:	8013      	strh	r3, [r2, #0]
	if(USART_SR & USART_SR_CTS)
 8003710:	8813      	ldrh	r3, [r2, #0]
 8003712:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8003716:	d00a      	beq.n	800372e <USART1_IRQHandler+0x2a>
		if (__usart_1_config__ ->ISR_Routines.CTS_ISR) {
 8003718:	4b37      	ldr	r3, [pc, #220]	@ (80037f8 <USART1_IRQHandler+0xf4>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003720:	b12b      	cbz	r3, 800372e <USART1_IRQHandler+0x2a>
			__usart_1_config__ ->ISR_Routines.CTS_ISR();
 8003722:	4798      	blx	r3
			USART1->SR &= ~USART_SR_CTS;  // Clear the Break interrupt flag
 8003724:	4a32      	ldr	r2, [pc, #200]	@ (80037f0 <USART1_IRQHandler+0xec>)
 8003726:	6813      	ldr	r3, [r2, #0]
 8003728:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800372c:	6013      	str	r3, [r2, #0]
	if(USART_SR & USART_SR_LBD)
 800372e:	4b31      	ldr	r3, [pc, #196]	@ (80037f4 <USART1_IRQHandler+0xf0>)
 8003730:	881b      	ldrh	r3, [r3, #0]
 8003732:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003736:	d00a      	beq.n	800374e <USART1_IRQHandler+0x4a>
		if (__usart_1_config__ ->ISR_Routines.LIN_Break_Detection_ISR) {
 8003738:	4b2f      	ldr	r3, [pc, #188]	@ (80037f8 <USART1_IRQHandler+0xf4>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003740:	b12b      	cbz	r3, 800374e <USART1_IRQHandler+0x4a>
			__usart_1_config__ ->ISR_Routines.LIN_Break_Detection_ISR();
 8003742:	4798      	blx	r3
			USART1->SR &= ~USART_SR_LBD;  // Clear the Break interrupt flag
 8003744:	4a2a      	ldr	r2, [pc, #168]	@ (80037f0 <USART1_IRQHandler+0xec>)
 8003746:	6813      	ldr	r3, [r2, #0]
 8003748:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800374c:	6013      	str	r3, [r2, #0]
	if(USART_SR & USART_SR_TXE)
 800374e:	4b29      	ldr	r3, [pc, #164]	@ (80037f4 <USART1_IRQHandler+0xf0>)
 8003750:	881b      	ldrh	r3, [r3, #0]
 8003752:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003756:	d00a      	beq.n	800376e <USART1_IRQHandler+0x6a>
		if (__usart_1_config__ ->ISR_Routines.Transmit_Empty_ISR) {
 8003758:	4b27      	ldr	r3, [pc, #156]	@ (80037f8 <USART1_IRQHandler+0xf4>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003760:	b12b      	cbz	r3, 800376e <USART1_IRQHandler+0x6a>
			__usart_1_config__ ->ISR_Routines.Transmit_Empty_ISR();
 8003762:	4798      	blx	r3
			USART1->SR &= ~USART_SR_TXE;  // Clear the Break interrupt flag
 8003764:	4a22      	ldr	r2, [pc, #136]	@ (80037f0 <USART1_IRQHandler+0xec>)
 8003766:	6813      	ldr	r3, [r2, #0]
 8003768:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800376c:	6013      	str	r3, [r2, #0]
	if(USART_SR & USART_SR_TC)
 800376e:	4b21      	ldr	r3, [pc, #132]	@ (80037f4 <USART1_IRQHandler+0xf0>)
 8003770:	881b      	ldrh	r3, [r3, #0]
 8003772:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8003776:	d00a      	beq.n	800378e <USART1_IRQHandler+0x8a>
		if (__usart_1_config__ ->ISR_Routines.Transmission_Complete_ISR) {
 8003778:	4b1f      	ldr	r3, [pc, #124]	@ (80037f8 <USART1_IRQHandler+0xf4>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8003780:	b12b      	cbz	r3, 800378e <USART1_IRQHandler+0x8a>
			__usart_1_config__ ->ISR_Routines.Transmission_Complete_ISR();
 8003782:	4798      	blx	r3
			USART1->SR &= ~USART_SR_TC;  // Clear the Break interrupt flag
 8003784:	4a1a      	ldr	r2, [pc, #104]	@ (80037f0 <USART1_IRQHandler+0xec>)
 8003786:	6813      	ldr	r3, [r2, #0]
 8003788:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800378c:	6013      	str	r3, [r2, #0]
	if(USART_SR & USART_SR_RXNE)
 800378e:	4b19      	ldr	r3, [pc, #100]	@ (80037f4 <USART1_IRQHandler+0xf0>)
 8003790:	881b      	ldrh	r3, [r3, #0]
 8003792:	f013 0f20 	tst.w	r3, #32
 8003796:	d00a      	beq.n	80037ae <USART1_IRQHandler+0xaa>
		if (__usart_1_config__ ->ISR_Routines.Receiver_Empty_ISR) {
 8003798:	4b17      	ldr	r3, [pc, #92]	@ (80037f8 <USART1_IRQHandler+0xf4>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80037a0:	b12b      	cbz	r3, 80037ae <USART1_IRQHandler+0xaa>
			__usart_1_config__ ->ISR_Routines.Receiver_Empty_ISR();
 80037a2:	4798      	blx	r3
			USART1->SR &= ~USART_SR_RXNE;  // Clear the Break interrupt flag
 80037a4:	4a12      	ldr	r2, [pc, #72]	@ (80037f0 <USART1_IRQHandler+0xec>)
 80037a6:	6813      	ldr	r3, [r2, #0]
 80037a8:	f023 0320 	bic.w	r3, r3, #32
 80037ac:	6013      	str	r3, [r2, #0]
	if(USART_SR & USART_SR_IDLE)
 80037ae:	4b11      	ldr	r3, [pc, #68]	@ (80037f4 <USART1_IRQHandler+0xf0>)
 80037b0:	881b      	ldrh	r3, [r3, #0]
 80037b2:	f013 0f10 	tst.w	r3, #16
 80037b6:	d00a      	beq.n	80037ce <USART1_IRQHandler+0xca>
		if (__usart_1_config__ ->ISR_Routines.Idle_Line_ISR) {
 80037b8:	4b0f      	ldr	r3, [pc, #60]	@ (80037f8 <USART1_IRQHandler+0xf4>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80037c0:	b12b      	cbz	r3, 80037ce <USART1_IRQHandler+0xca>
			__usart_1_config__ ->ISR_Routines.Idle_Line_ISR();
 80037c2:	4798      	blx	r3
			USART1->SR &= ~USART_SR_IDLE;  // Clear the Break interrupt flag
 80037c4:	4a0a      	ldr	r2, [pc, #40]	@ (80037f0 <USART1_IRQHandler+0xec>)
 80037c6:	6813      	ldr	r3, [r2, #0]
 80037c8:	f023 0310 	bic.w	r3, r3, #16
 80037cc:	6013      	str	r3, [r2, #0]
	if(USART_SR & USART_SR_PE)
 80037ce:	4b09      	ldr	r3, [pc, #36]	@ (80037f4 <USART1_IRQHandler+0xf0>)
 80037d0:	881b      	ldrh	r3, [r3, #0]
 80037d2:	f013 0f01 	tst.w	r3, #1
 80037d6:	d00a      	beq.n	80037ee <USART1_IRQHandler+0xea>
		if (__usart_1_config__ ->ISR_Routines.Parity_ISR) {
 80037d8:	4b07      	ldr	r3, [pc, #28]	@ (80037f8 <USART1_IRQHandler+0xf4>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80037e0:	b12b      	cbz	r3, 80037ee <USART1_IRQHandler+0xea>
			__usart_1_config__ ->ISR_Routines.Parity_ISR();
 80037e2:	4798      	blx	r3
			USART1->SR &= ~USART_SR_PE;  // Clear the Break interrupt flag
 80037e4:	4a02      	ldr	r2, [pc, #8]	@ (80037f0 <USART1_IRQHandler+0xec>)
 80037e6:	6813      	ldr	r3, [r2, #0]
 80037e8:	f023 0301 	bic.w	r3, r3, #1
 80037ec:	6013      	str	r3, [r2, #0]
}
 80037ee:	bd08      	pop	{r3, pc}
 80037f0:	40011000 	.word	0x40011000
 80037f4:	20000490 	.word	0x20000490
 80037f8:	200004a4 	.word	0x200004a4

080037fc <USART_Get_Instance_Number>:
	if(config->Port == USART1) {return 0;}
 80037fc:	6803      	ldr	r3, [r0, #0]
 80037fe:	4a13      	ldr	r2, [pc, #76]	@ (800384c <USART_Get_Instance_Number+0x50>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d015      	beq.n	8003830 <USART_Get_Instance_Number+0x34>
	else if(config->Port == USART2) {return 1;}
 8003804:	f5a2 424c 	sub.w	r2, r2, #52224	@ 0xcc00
 8003808:	4293      	cmp	r3, r2
 800380a:	d013      	beq.n	8003834 <USART_Get_Instance_Number+0x38>
	else if(config->Port == USART3) {return 2;}
 800380c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003810:	4293      	cmp	r3, r2
 8003812:	d011      	beq.n	8003838 <USART_Get_Instance_Number+0x3c>
	else if(config->Port == UART4) {return 3;}
 8003814:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003818:	4293      	cmp	r3, r2
 800381a:	d00f      	beq.n	800383c <USART_Get_Instance_Number+0x40>
	else if(config->Port == UART5) {return 4;}
 800381c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003820:	4293      	cmp	r3, r2
 8003822:	d00d      	beq.n	8003840 <USART_Get_Instance_Number+0x44>
	else if(config->Port == USART6) {return 5;}
 8003824:	f502 4244 	add.w	r2, r2, #50176	@ 0xc400
 8003828:	4293      	cmp	r3, r2
 800382a:	d10b      	bne.n	8003844 <USART_Get_Instance_Number+0x48>
 800382c:	2005      	movs	r0, #5
 800382e:	4770      	bx	lr
	if(config->Port == USART1) {return 0;}
 8003830:	2000      	movs	r0, #0
 8003832:	4770      	bx	lr
	else if(config->Port == USART2) {return 1;}
 8003834:	2001      	movs	r0, #1
 8003836:	4770      	bx	lr
	else if(config->Port == USART3) {return 2;}
 8003838:	2002      	movs	r0, #2
 800383a:	4770      	bx	lr
	else if(config->Port == UART4) {return 3;}
 800383c:	2003      	movs	r0, #3
 800383e:	4770      	bx	lr
	else if(config->Port == UART5) {return 4;}
 8003840:	2004      	movs	r0, #4
 8003842:	4770      	bx	lr
	else {return -1;}
 8003844:	f04f 30ff 	mov.w	r0, #4294967295
}
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	40011000 	.word	0x40011000

08003850 <USART_Config_Reset>:
	config->mode = USART_Configuration.Mode.Disable;
 8003850:	2300      	movs	r3, #0
 8003852:	7203      	strb	r3, [r0, #8]
	config->hardware_flow = USART_Configuration.Hardware_Flow.Disable;
 8003854:	73c3      	strb	r3, [r0, #15]
	config->baudrate = 9600;
 8003856:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800385a:	6042      	str	r2, [r0, #4]
	config->dma_enable = USART_Configuration.DMA_Enable.RX_Disable | USART_Configuration.DMA_Enable.TX_Disable;
 800385c:	7443      	strb	r3, [r0, #17]
	config->interrupt = USART_Configuration.Interrupt_Type.Disable;
 800385e:	7383      	strb	r3, [r0, #14]
}
 8003860:	4770      	bx	lr
	...

08003864 <USART_Clock_Enable>:
	if(config->Port == USART1)
 8003864:	6803      	ldr	r3, [r0, #0]
 8003866:	4a22      	ldr	r2, [pc, #136]	@ (80038f0 <USART_Clock_Enable+0x8c>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d011      	beq.n	8003890 <USART_Clock_Enable+0x2c>
	else if(config->Port == USART2)
 800386c:	4a21      	ldr	r2, [pc, #132]	@ (80038f4 <USART_Clock_Enable+0x90>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d016      	beq.n	80038a0 <USART_Clock_Enable+0x3c>
	else if(config->Port == USART3)
 8003872:	4a21      	ldr	r2, [pc, #132]	@ (80038f8 <USART_Clock_Enable+0x94>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d01b      	beq.n	80038b0 <USART_Clock_Enable+0x4c>
	else if(config->Port == UART4)
 8003878:	4a20      	ldr	r2, [pc, #128]	@ (80038fc <USART_Clock_Enable+0x98>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d020      	beq.n	80038c0 <USART_Clock_Enable+0x5c>
	else if(config->Port == UART5)
 800387e:	4a20      	ldr	r2, [pc, #128]	@ (8003900 <USART_Clock_Enable+0x9c>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d025      	beq.n	80038d0 <USART_Clock_Enable+0x6c>
	else if(config->Port == USART6)
 8003884:	4a1f      	ldr	r2, [pc, #124]	@ (8003904 <USART_Clock_Enable+0xa0>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d02a      	beq.n	80038e0 <USART_Clock_Enable+0x7c>
		return -1;
 800388a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800388e:	4770      	bx	lr
		RCC -> APB2ENR |= RCC_APB2ENR_USART1EN;
 8003890:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 8003894:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 8003896:	f043 0310 	orr.w	r3, r3, #16
 800389a:	6453      	str	r3, [r2, #68]	@ 0x44
	return 1;
 800389c:	2001      	movs	r0, #1
 800389e:	4770      	bx	lr
		RCC -> APB1ENR |= RCC_APB1ENR_USART2EN;
 80038a0:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 80038a4:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80038a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038aa:	6413      	str	r3, [r2, #64]	@ 0x40
	return 1;
 80038ac:	2001      	movs	r0, #1
 80038ae:	4770      	bx	lr
		RCC -> APB1ENR |= RCC_APB1ENR_USART3EN;
 80038b0:	f502 32f8 	add.w	r2, r2, #126976	@ 0x1f000
 80038b4:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80038b6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038ba:	6413      	str	r3, [r2, #64]	@ 0x40
	return 1;
 80038bc:	2001      	movs	r0, #1
 80038be:	4770      	bx	lr
		RCC -> APB1ENR |= RCC_APB1ENR_UART4EN;
 80038c0:	f502 32f6 	add.w	r2, r2, #125952	@ 0x1ec00
 80038c4:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80038c6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80038ca:	6413      	str	r3, [r2, #64]	@ 0x40
	return 1;
 80038cc:	2001      	movs	r0, #1
 80038ce:	4770      	bx	lr
		RCC -> APB1ENR |= RCC_APB1ENR_UART5EN;
 80038d0:	f502 32f4 	add.w	r2, r2, #124928	@ 0x1e800
 80038d4:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80038d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80038da:	6413      	str	r3, [r2, #64]	@ 0x40
	return 1;
 80038dc:	2001      	movs	r0, #1
 80038de:	4770      	bx	lr
		RCC -> APB2ENR |= RCC_APB2ENR_USART6EN;
 80038e0:	f502 3292 	add.w	r2, r2, #74752	@ 0x12400
 80038e4:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 80038e6:	f043 0320 	orr.w	r3, r3, #32
 80038ea:	6453      	str	r3, [r2, #68]	@ 0x44
	return 1;
 80038ec:	2001      	movs	r0, #1
 80038ee:	4770      	bx	lr
 80038f0:	40011000 	.word	0x40011000
 80038f4:	40004400 	.word	0x40004400
 80038f8:	40004800 	.word	0x40004800
 80038fc:	40004c00 	.word	0x40004c00
 8003900:	40005000 	.word	0x40005000
 8003904:	40011400 	.word	0x40011400

08003908 <USART_Init>:


int8_t USART_Init(USART_Config *config)
{
 8003908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800390c:	4604      	mov	r4, r0
	USART_Clock_Enable(config);
 800390e:	f7ff ffa9 	bl	8003864 <USART_Clock_Enable>
	PIN_Setup(config);
 8003912:	4620      	mov	r0, r4
 8003914:	f7ff faf2 	bl	8002efc <PIN_Setup>

	usart_dma_instance_number = USART_Get_Instance_Number(config);
 8003918:	4620      	mov	r0, r4
 800391a:	f7ff ff6f 	bl	80037fc <USART_Get_Instance_Number>
 800391e:	4b94      	ldr	r3, [pc, #592]	@ (8003b70 <USART_Init+0x268>)
 8003920:	7018      	strb	r0, [r3, #0]
	if(usart_dma_instance_number == -1) return -1;
 8003922:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003926:	f000 8205 	beq.w	8003d34 <USART_Init+0x42c>
	double brr;
	double div_frac, mantissa;
	int div_frac_1;
	int mantissa_1;

	if((config -> Port == USART1) || (config -> Port == USART6))
 800392a:	6825      	ldr	r5, [r4, #0]
 800392c:	4b91      	ldr	r3, [pc, #580]	@ (8003b74 <USART_Init+0x26c>)
 800392e:	429d      	cmp	r5, r3
 8003930:	d03d      	beq.n	80039ae <USART_Init+0xa6>
 8003932:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003936:	429d      	cmp	r5, r3
 8003938:	d039      	beq.n	80039ae <USART_Init+0xa6>
	return (SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800393a:	4b8f      	ldr	r3, [pc, #572]	@ (8003b78 <USART_Init+0x270>)
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003942:	4a8e      	ldr	r2, [pc, #568]	@ (8003b7c <USART_Init+0x274>)
 8003944:	5cd3      	ldrb	r3, [r2, r3]
 8003946:	4a8e      	ldr	r2, [pc, #568]	@ (8003b80 <USART_Init+0x278>)
 8003948:	6810      	ldr	r0, [r2, #0]
		mantissa_1 = (int)(ceil(mantissa));
	}
	else
	{
		uint32_t freq = SystemAPB1_Clock_Speed();
		brr = ((double)freq/ (16.0 * (double)(config->baudrate)));
 800394a:	40d8      	lsrs	r0, r3
 800394c:	f7fc fdda 	bl	8000504 <__aeabi_ui2d>
 8003950:	4606      	mov	r6, r0
 8003952:	460f      	mov	r7, r1
 8003954:	6860      	ldr	r0, [r4, #4]
 8003956:	f7fc fdd5 	bl	8000504 <__aeabi_ui2d>
 800395a:	2200      	movs	r2, #0
 800395c:	4b89      	ldr	r3, [pc, #548]	@ (8003b84 <USART_Init+0x27c>)
 800395e:	f7fc fe4b 	bl	80005f8 <__aeabi_dmul>
 8003962:	4602      	mov	r2, r0
 8003964:	460b      	mov	r3, r1
 8003966:	4630      	mov	r0, r6
 8003968:	4639      	mov	r1, r7
 800396a:	f7fc ff6f 	bl	800084c <__aeabi_ddiv>
 800396e:	4680      	mov	r8, r0
 8003970:	4689      	mov	r9, r1
	temp = (float)(SysTick->VAL / (SystemCoreClock));
	return temp;
}

__STATIC_INLINE	void separateFractionAndIntegral(double number, double *fractionalPart, double *integralPart) {
    *integralPart = (double)((int64_t)number);
 8003972:	f7fd f919 	bl	8000ba8 <__aeabi_d2lz>
 8003976:	f7fc fe11 	bl	800059c <__aeabi_l2d>
 800397a:	4606      	mov	r6, r0
 800397c:	460f      	mov	r7, r1
    *fractionalPart = number - *integralPart;
 800397e:	4602      	mov	r2, r0
 8003980:	460b      	mov	r3, r1
 8003982:	4640      	mov	r0, r8
 8003984:	4649      	mov	r1, r9
 8003986:	f7fc fc7f 	bl	8000288 <__aeabi_dsub>
		separateFractionAndIntegral(brr, &div_frac, &mantissa);
		div_frac_1 = (int)(ceil(div_frac*16.0));
 800398a:	2200      	movs	r2, #0
 800398c:	4b7d      	ldr	r3, [pc, #500]	@ (8003b84 <USART_Init+0x27c>)
 800398e:	f7fc fe33 	bl	80005f8 <__aeabi_dmul>
 8003992:	ec41 0b10 	vmov	d0, r0, r1
 8003996:	f003 fc0f 	bl	80071b8 <ceil>
 800399a:	ec51 0b10 	vmov	r0, r1, d0
 800399e:	f7fd f8db 	bl	8000b58 <__aeabi_d2iz>
 80039a2:	4680      	mov	r8, r0
		mantissa_1 = (int)(ceil(mantissa));
 80039a4:	4630      	mov	r0, r6
 80039a6:	4639      	mov	r1, r7
 80039a8:	f7fd f8d6 	bl	8000b58 <__aeabi_d2iz>
 80039ac:	e038      	b.n	8003a20 <USART_Init+0x118>
	return (SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80039ae:	4b72      	ldr	r3, [pc, #456]	@ (8003b78 <USART_Init+0x270>)
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80039b6:	4a71      	ldr	r2, [pc, #452]	@ (8003b7c <USART_Init+0x274>)
 80039b8:	5cd3      	ldrb	r3, [r2, r3]
 80039ba:	4a71      	ldr	r2, [pc, #452]	@ (8003b80 <USART_Init+0x278>)
 80039bc:	6810      	ldr	r0, [r2, #0]
		brr = (freq/ (16.0 * 2.0 * (double)(config->baudrate)));
 80039be:	40d8      	lsrs	r0, r3
 80039c0:	f7fc fda0 	bl	8000504 <__aeabi_ui2d>
 80039c4:	4606      	mov	r6, r0
 80039c6:	460f      	mov	r7, r1
 80039c8:	6860      	ldr	r0, [r4, #4]
 80039ca:	f7fc fd9b 	bl	8000504 <__aeabi_ui2d>
 80039ce:	2200      	movs	r2, #0
 80039d0:	4b6d      	ldr	r3, [pc, #436]	@ (8003b88 <USART_Init+0x280>)
 80039d2:	f7fc fe11 	bl	80005f8 <__aeabi_dmul>
 80039d6:	4602      	mov	r2, r0
 80039d8:	460b      	mov	r3, r1
 80039da:	4630      	mov	r0, r6
 80039dc:	4639      	mov	r1, r7
 80039de:	f7fc ff35 	bl	800084c <__aeabi_ddiv>
 80039e2:	4680      	mov	r8, r0
 80039e4:	4689      	mov	r9, r1
    *integralPart = (double)((int64_t)number);
 80039e6:	f7fd f8df 	bl	8000ba8 <__aeabi_d2lz>
 80039ea:	f7fc fdd7 	bl	800059c <__aeabi_l2d>
 80039ee:	4606      	mov	r6, r0
 80039f0:	460f      	mov	r7, r1
    *fractionalPart = number - *integralPart;
 80039f2:	4602      	mov	r2, r0
 80039f4:	460b      	mov	r3, r1
 80039f6:	4640      	mov	r0, r8
 80039f8:	4649      	mov	r1, r9
 80039fa:	f7fc fc45 	bl	8000288 <__aeabi_dsub>
		div_frac_1 = (int)(ceil(div_frac*16.0));
 80039fe:	2200      	movs	r2, #0
 8003a00:	4b60      	ldr	r3, [pc, #384]	@ (8003b84 <USART_Init+0x27c>)
 8003a02:	f7fc fdf9 	bl	80005f8 <__aeabi_dmul>
 8003a06:	ec41 0b10 	vmov	d0, r0, r1
 8003a0a:	f003 fbd5 	bl	80071b8 <ceil>
 8003a0e:	ec51 0b10 	vmov	r0, r1, d0
 8003a12:	f7fd f8a1 	bl	8000b58 <__aeabi_d2iz>
 8003a16:	4680      	mov	r8, r0
		mantissa_1 = (int)(ceil(mantissa));
 8003a18:	4630      	mov	r0, r6
 8003a1a:	4639      	mov	r1, r7
 8003a1c:	f7fd f89c 	bl	8000b58 <__aeabi_d2iz>

	}

	config->Port->BRR = (mantissa_1<<4)|(div_frac_1);
 8003a20:	ea48 1000 	orr.w	r0, r8, r0, lsl #4
 8003a24:	60a8      	str	r0, [r5, #8]
	config->Port->CR1 |= config->parity ;
 8003a26:	6822      	ldr	r2, [r4, #0]
 8003a28:	68d3      	ldr	r3, [r2, #12]
 8003a2a:	7ca1      	ldrb	r1, [r4, #18]
 8003a2c:	430b      	orrs	r3, r1
 8003a2e:	60d3      	str	r3, [r2, #12]

	if(config -> interrupt == USART_Configuration.Interrupt_Type.Disable)
 8003a30:	7ba3      	ldrb	r3, [r4, #14]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d13d      	bne.n	8003ab2 <USART_Init+0x1aa>
	{
		config -> Port -> CR1 &= ~(USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE | USART_CR1_RXNEIE | USART_CR1_IDLEIE);
 8003a36:	6822      	ldr	r2, [r4, #0]
 8003a38:	68d3      	ldr	r3, [r2, #12]
 8003a3a:	f423 73f8 	bic.w	r3, r3, #496	@ 0x1f0
 8003a3e:	60d3      	str	r3, [r2, #12]
		config -> Port -> CR2 &= ~(USART_CR2_LBDIE);
 8003a40:	6822      	ldr	r2, [r4, #0]
 8003a42:	6913      	ldr	r3, [r2, #16]
 8003a44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a48:	6113      	str	r3, [r2, #16]
		config -> Port -> CR3 &= ~(USART_CR3_CTSIE | USART_CR3_EIE);
 8003a4a:	6822      	ldr	r2, [r4, #0]
 8003a4c:	6953      	ldr	r3, [r2, #20]
 8003a4e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003a52:	f023 0301 	bic.w	r3, r3, #1
 8003a56:	6153      	str	r3, [r2, #20]
		}

	}


	config->Port->CR2 |= config->stop_bits;
 8003a58:	6822      	ldr	r2, [r4, #0]
 8003a5a:	6913      	ldr	r3, [r2, #16]
 8003a5c:	7c21      	ldrb	r1, [r4, #16]
 8003a5e:	430b      	orrs	r3, r1
 8003a60:	6113      	str	r3, [r2, #16]

	if((config->dma_enable & USART_Configuration.DMA_Enable.RX_Enable) == USART_Configuration.DMA_Enable.RX_Enable)
 8003a62:	7c63      	ldrb	r3, [r4, #17]
 8003a64:	f013 0f02 	tst.w	r3, #2
 8003a68:	f000 8125 	beq.w	8003cb6 <USART_Init+0x3ae>
	{


		if(config->Port == USART1)
 8003a6c:	6823      	ldr	r3, [r4, #0]
 8003a6e:	4a41      	ldr	r2, [pc, #260]	@ (8003b74 <USART_Init+0x26c>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	f000 809d 	beq.w	8003bb0 <USART_Init+0x2a8>
		{
			xUSART_RX[0].Request = DMA_Configuration.Request.USART1_RX;
			xUSART_RX[0].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
			xUSART_RX[0].ISR_Routines.Full_Transfer_Commplete_ISR = USART1_RX_ISR;
		}
		else if(config->Port == USART2)
 8003a76:	4a45      	ldr	r2, [pc, #276]	@ (8003b8c <USART_Init+0x284>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	f000 80e5 	beq.w	8003c48 <USART_Init+0x340>
		{
			xUSART_RX[1].Request = DMA_Configuration.Request.USART2_RX;
			xUSART_RX[1].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
			xUSART_RX[1].ISR_Routines.Full_Transfer_Commplete_ISR = USART2_RX_ISR;
		}
		else if(config->Port == USART3)
 8003a7e:	4a44      	ldr	r2, [pc, #272]	@ (8003b90 <USART_Init+0x288>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	f000 80ee 	beq.w	8003c62 <USART_Init+0x35a>
		{
			xUSART_RX[2].Request = DMA_Configuration.Request.USART3_RX;
			xUSART_RX[2].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
			xUSART_RX[2].ISR_Routines.Full_Transfer_Commplete_ISR = USART3_RX_ISR;
		}
		else if(config->Port == UART4)
 8003a86:	4a43      	ldr	r2, [pc, #268]	@ (8003b94 <USART_Init+0x28c>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	f000 80f8 	beq.w	8003c7e <USART_Init+0x376>
		{
			xUSART_RX[3].Request = DMA_Configuration.Request.UART4_RX;
			xUSART_RX[3].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
			xUSART_RX[3].ISR_Routines.Full_Transfer_Commplete_ISR = USART4_RX_ISR;
		}
		else if(config->Port == UART5)
 8003a8e:	4a42      	ldr	r2, [pc, #264]	@ (8003b98 <USART_Init+0x290>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	f000 8102 	beq.w	8003c9a <USART_Init+0x392>
			xUSART_RX[4].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
			xUSART_RX[4].ISR_Routines.Full_Transfer_Commplete_ISR = USART5_RX_ISR;
		}
		else
		{
			xUSART_RX[5].Request = DMA_Configuration.Request.UART6_RX;
 8003a96:	4b41      	ldr	r3, [pc, #260]	@ (8003b9c <USART_Init+0x294>)
 8003a98:	f503 75dc 	add.w	r5, r3, #440	@ 0x1b8
 8003a9c:	4a40      	ldr	r2, [pc, #256]	@ (8003ba0 <USART_Init+0x298>)
 8003a9e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003aa0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
			xUSART_RX[5].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 8003aa4:	2210      	movs	r2, #16
 8003aa6:	f8c3 21d4 	str.w	r2, [r3, #468]	@ 0x1d4
			xUSART_RX[5].ISR_Routines.Full_Transfer_Commplete_ISR = USART6_RX_ISR;
 8003aaa:	4a3e      	ldr	r2, [pc, #248]	@ (8003ba4 <USART_Init+0x29c>)
 8003aac:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8003ab0:	e087      	b.n	8003bc2 <USART_Init+0x2ba>
		if((config->interrupt & USART_Configuration.Interrupt_Type.Transmit_Empty_Enable) == USART_Configuration.Interrupt_Type.Transmit_Empty_Enable)
 8003ab2:	f994 300e 	ldrsb.w	r3, [r4, #14]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	db3a      	blt.n	8003b30 <USART_Init+0x228>
		if((config->interrupt & USART_Configuration.Interrupt_Type.Transmission_Complete_Enable) == USART_Configuration.Interrupt_Type.Transmission_Complete_Enable)
 8003aba:	7ba3      	ldrb	r3, [r4, #14]
 8003abc:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8003ac0:	d004      	beq.n	8003acc <USART_Init+0x1c4>
			config -> Port -> CR1 |= USART_CR1_TCIE;
 8003ac2:	6822      	ldr	r2, [r4, #0]
 8003ac4:	68d3      	ldr	r3, [r2, #12]
 8003ac6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003aca:	60d3      	str	r3, [r2, #12]
		if((config->interrupt & USART_Configuration.Interrupt_Type.Receiver_Empty_Enable) == USART_Configuration.Interrupt_Type.Receiver_Empty_Enable)
 8003acc:	7ba3      	ldrb	r3, [r4, #14]
 8003ace:	f013 0f20 	tst.w	r3, #32
 8003ad2:	d004      	beq.n	8003ade <USART_Init+0x1d6>
			config -> Port -> CR1 |= USART_CR1_RXNEIE;
 8003ad4:	6822      	ldr	r2, [r4, #0]
 8003ad6:	68d3      	ldr	r3, [r2, #12]
 8003ad8:	f043 0320 	orr.w	r3, r3, #32
 8003adc:	60d3      	str	r3, [r2, #12]
		if((config->interrupt & USART_Configuration.Interrupt_Type.IDLE_Enable) == USART_Configuration.Interrupt_Type.IDLE_Enable)
 8003ade:	7ba3      	ldrb	r3, [r4, #14]
 8003ae0:	f013 0f10 	tst.w	r3, #16
 8003ae4:	d004      	beq.n	8003af0 <USART_Init+0x1e8>
			config -> Port -> CR1 |= USART_CR1_IDLEIE;
 8003ae6:	6822      	ldr	r2, [r4, #0]
 8003ae8:	68d3      	ldr	r3, [r2, #12]
 8003aea:	f043 0310 	orr.w	r3, r3, #16
 8003aee:	60d3      	str	r3, [r2, #12]
		if((config->interrupt & USART_Configuration.Interrupt_Type.Error_Enable) == USART_Configuration.Interrupt_Type.Error_Enable)
 8003af0:	7ba3      	ldrb	r3, [r4, #14]
 8003af2:	f013 0f01 	tst.w	r3, #1
 8003af6:	d004      	beq.n	8003b02 <USART_Init+0x1fa>
			config -> Port -> CR3 |= USART_CR3_EIE;
 8003af8:	6822      	ldr	r2, [r4, #0]
 8003afa:	6953      	ldr	r3, [r2, #20]
 8003afc:	f043 0301 	orr.w	r3, r3, #1
 8003b00:	6153      	str	r3, [r2, #20]
		if(config -> Port == USART1)
 8003b02:	6823      	ldr	r3, [r4, #0]
 8003b04:	4a1b      	ldr	r2, [pc, #108]	@ (8003b74 <USART_Init+0x26c>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d018      	beq.n	8003b3c <USART_Init+0x234>
		else if(config -> Port == USART2)
 8003b0a:	4a20      	ldr	r2, [pc, #128]	@ (8003b8c <USART_Init+0x284>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d01c      	beq.n	8003b4a <USART_Init+0x242>
		else if(config -> Port == USART3)
 8003b10:	4a1f      	ldr	r2, [pc, #124]	@ (8003b90 <USART_Init+0x288>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d01d      	beq.n	8003b52 <USART_Init+0x24a>
		else if(config -> Port == UART4)
 8003b16:	4a1f      	ldr	r2, [pc, #124]	@ (8003b94 <USART_Init+0x28c>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d01e      	beq.n	8003b5a <USART_Init+0x252>
		else if(config -> Port == UART5)
 8003b1c:	4a1e      	ldr	r2, [pc, #120]	@ (8003b98 <USART_Init+0x290>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d020      	beq.n	8003b64 <USART_Init+0x25c>
		else if(config -> Port == USART6)
 8003b22:	4a21      	ldr	r2, [pc, #132]	@ (8003ba8 <USART_Init+0x2a0>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d197      	bne.n	8003a58 <USART_Init+0x150>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b28:	4b20      	ldr	r3, [pc, #128]	@ (8003bac <USART_Init+0x2a4>)
 8003b2a:	2280      	movs	r2, #128	@ 0x80
 8003b2c:	609a      	str	r2, [r3, #8]
  }
}
 8003b2e:	e793      	b.n	8003a58 <USART_Init+0x150>
			config -> Port -> CR1 |= USART_CR1_TXEIE;
 8003b30:	6822      	ldr	r2, [r4, #0]
 8003b32:	68d3      	ldr	r3, [r2, #12]
 8003b34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b38:	60d3      	str	r3, [r2, #12]
 8003b3a:	e7be      	b.n	8003aba <USART_Init+0x1b2>
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b3c:	4b1b      	ldr	r3, [pc, #108]	@ (8003bac <USART_Init+0x2a4>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 2325 	strb.w	r2, [r3, #805]	@ 0x325
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b44:	2220      	movs	r2, #32
 8003b46:	605a      	str	r2, [r3, #4]
    __COMPILER_BARRIER();
 8003b48:	e786      	b.n	8003a58 <USART_Init+0x150>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b4a:	4b18      	ldr	r3, [pc, #96]	@ (8003bac <USART_Init+0x2a4>)
 8003b4c:	2240      	movs	r2, #64	@ 0x40
 8003b4e:	605a      	str	r2, [r3, #4]
}
 8003b50:	e782      	b.n	8003a58 <USART_Init+0x150>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b52:	4b16      	ldr	r3, [pc, #88]	@ (8003bac <USART_Init+0x2a4>)
 8003b54:	2280      	movs	r2, #128	@ 0x80
 8003b56:	605a      	str	r2, [r3, #4]
}
 8003b58:	e77e      	b.n	8003a58 <USART_Init+0x150>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b5a:	4b14      	ldr	r3, [pc, #80]	@ (8003bac <USART_Init+0x2a4>)
 8003b5c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003b60:	605a      	str	r2, [r3, #4]
}
 8003b62:	e779      	b.n	8003a58 <USART_Init+0x150>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b64:	4b11      	ldr	r3, [pc, #68]	@ (8003bac <USART_Init+0x2a4>)
 8003b66:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003b6a:	605a      	str	r2, [r3, #4]
}
 8003b6c:	e774      	b.n	8003a58 <USART_Init+0x150>
 8003b6e:	bf00      	nop
 8003b70:	200004a8 	.word	0x200004a8
 8003b74:	40011000 	.word	0x40011000
 8003b78:	40023800 	.word	0x40023800
 8003b7c:	08007cd8 	.word	0x08007cd8
 8003b80:	20000000 	.word	0x20000000
 8003b84:	40300000 	.word	0x40300000
 8003b88:	40400000 	.word	0x40400000
 8003b8c:	40004400 	.word	0x40004400
 8003b90:	40004800 	.word	0x40004800
 8003b94:	40004c00 	.word	0x40004c00
 8003b98:	40005000 	.word	0x40005000
 8003b9c:	200006bc 	.word	0x200006bc
 8003ba0:	080079f4 	.word	0x080079f4
 8003ba4:	08002ef1 	.word	0x08002ef1
 8003ba8:	40011400 	.word	0x40011400
 8003bac:	e000e100 	.word	0xe000e100
			xUSART_RX[0].Request = DMA_Configuration.Request.USART1_RX;
 8003bb0:	4b86      	ldr	r3, [pc, #536]	@ (8003dcc <USART_Init+0x4c4>)
 8003bb2:	4a87      	ldr	r2, [pc, #540]	@ (8003dd0 <USART_Init+0x4c8>)
 8003bb4:	ca07      	ldmia	r2, {r0, r1, r2}
 8003bb6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			xUSART_RX[0].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 8003bba:	2210      	movs	r2, #16
 8003bbc:	61da      	str	r2, [r3, #28]
			xUSART_RX[0].ISR_Routines.Full_Transfer_Commplete_ISR = USART1_RX_ISR;
 8003bbe:	4a85      	ldr	r2, [pc, #532]	@ (8003dd4 <USART_Init+0x4cc>)
 8003bc0:	64da      	str	r2, [r3, #76]	@ 0x4c
		}

		xUSART_RX[usart_dma_instance_number].circular_mode = DMA_Configuration.Circular_Mode.Disable;
 8003bc2:	4b85      	ldr	r3, [pc, #532]	@ (8003dd8 <USART_Init+0x4d0>)
 8003bc4:	f993 3000 	ldrsb.w	r3, [r3]
 8003bc8:	2258      	movs	r2, #88	@ 0x58
 8003bca:	4d80      	ldr	r5, [pc, #512]	@ (8003dcc <USART_Init+0x4c4>)
 8003bcc:	fb02 5503 	mla	r5, r2, r3, r5
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	61ab      	str	r3, [r5, #24]
		xUSART_RX[usart_dma_instance_number].flow_control = DMA_Configuration.Flow_Control.DMA_Control;
 8003bd4:	60eb      	str	r3, [r5, #12]

		xUSART_RX[usart_dma_instance_number].memory_data_size = DMA_Configuration.Memory_Data_Size.byte;
 8003bd6:	62ab      	str	r3, [r5, #40]	@ 0x28
		xUSART_RX[usart_dma_instance_number].peripheral_data_size = DMA_Configuration.Peripheral_Data_Size.byte;
 8003bd8:	626b      	str	r3, [r5, #36]	@ 0x24
		xUSART_RX[usart_dma_instance_number].peripheral_pointer_increment = DMA_Configuration.Peripheral_Pointer_Increment.Disable;
 8003bda:	846b      	strh	r3, [r5, #34]	@ 0x22
		xUSART_RX[usart_dma_instance_number].memory_pointer_increment = DMA_Configuration.Memory_Pointer_Increment.Enable;
 8003bdc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003be0:	8429      	strh	r1, [r5, #32]
		xUSART_RX[usart_dma_instance_number].priority_level = DMA_Configuration.Priority_Level.High;
 8003be2:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 8003be6:	6169      	str	r1, [r5, #20]
		xUSART_RX[usart_dma_instance_number].transfer_direction = DMA_Configuration.Transfer_Direction.Peripheral_to_memory;
 8003be8:	612b      	str	r3, [r5, #16]
		config ->USART_DMA_Instance_RX = xUSART_RX[usart_dma_instance_number];
 8003bea:	4629      	mov	r1, r5
 8003bec:	f104 006c 	add.w	r0, r4, #108	@ 0x6c
 8003bf0:	f001 fa5f 	bl	80050b2 <memcpy>
		DMA_Init(&xUSART_RX[usart_dma_instance_number]);
 8003bf4:	4628      	mov	r0, r5
 8003bf6:	f7fe fde5 	bl	80027c4 <DMA_Init>
	else
	{
		config -> Port  -> CR3 &= ~USART_CR3_DMAR;
	}

	if((config->dma_enable & USART_Configuration.DMA_Enable.TX_Enable) == USART_Configuration.DMA_Enable.TX_Enable)
 8003bfa:	7c63      	ldrb	r3, [r4, #17]
 8003bfc:	f013 0f01 	tst.w	r3, #1
 8003c00:	f000 80d1 	beq.w	8003da6 <USART_Init+0x49e>
	{



		if(config->Port == USART1)
 8003c04:	6823      	ldr	r3, [r4, #0]
 8003c06:	4a75      	ldr	r2, [pc, #468]	@ (8003ddc <USART_Init+0x4d4>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d05a      	beq.n	8003cc2 <USART_Init+0x3ba>
		{
			xUSART_TX[0].Request = DMA_Configuration.Request.USART1_TX;
			xUSART_TX[0].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
			xUSART_TX[0].ISR_Routines.Full_Transfer_Commplete_ISR = USART1_TX_ISR;
		}
		else if(config->Port == USART2)
 8003c0c:	4a74      	ldr	r2, [pc, #464]	@ (8003de0 <USART_Init+0x4d8>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	f000 8092 	beq.w	8003d38 <USART_Init+0x430>
		{
			xUSART_TX[1].Request = DMA_Configuration.Request.USART2_TX;
			xUSART_TX[1].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
			xUSART_TX[1].ISR_Routines.Full_Transfer_Commplete_ISR = USART2_TX_ISR;
		}
		else if(config->Port == USART3)
 8003c14:	4a73      	ldr	r2, [pc, #460]	@ (8003de4 <USART_Init+0x4dc>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	f000 809b 	beq.w	8003d52 <USART_Init+0x44a>
		{
			xUSART_TX[2].Request = DMA_Configuration.Request.USART3_TX;
			xUSART_TX[2].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
			xUSART_TX[2].ISR_Routines.Full_Transfer_Commplete_ISR = USART3_TX_ISR;
		}
		else if(config->Port == UART4)
 8003c1c:	4a72      	ldr	r2, [pc, #456]	@ (8003de8 <USART_Init+0x4e0>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	f000 80a5 	beq.w	8003d6e <USART_Init+0x466>
		{
			xUSART_TX[3].Request = DMA_Configuration.Request.UART4_TX;
			xUSART_TX[3].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
			xUSART_TX[3].ISR_Routines.Full_Transfer_Commplete_ISR = USART4_TX_ISR;
		}
		else if(config->Port == UART5)
 8003c24:	4a71      	ldr	r2, [pc, #452]	@ (8003dec <USART_Init+0x4e4>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	f000 80af 	beq.w	8003d8a <USART_Init+0x482>
			xUSART_TX[4].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
			xUSART_TX[4].ISR_Routines.Full_Transfer_Commplete_ISR = USART5_TX_ISR;
		}
		else
		{
			xUSART_TX[5].Request = DMA_Configuration.Request.UART6_TX;
 8003c2c:	4b70      	ldr	r3, [pc, #448]	@ (8003df0 <USART_Init+0x4e8>)
 8003c2e:	f503 75dc 	add.w	r5, r3, #440	@ 0x1b8
 8003c32:	4a70      	ldr	r2, [pc, #448]	@ (8003df4 <USART_Init+0x4ec>)
 8003c34:	ca07      	ldmia	r2, {r0, r1, r2}
 8003c36:	e885 0007 	stmia.w	r5, {r0, r1, r2}
			xUSART_TX[5].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 8003c3a:	2210      	movs	r2, #16
 8003c3c:	f8c3 21d4 	str.w	r2, [r3, #468]	@ 0x1d4
			xUSART_TX[5].ISR_Routines.Full_Transfer_Commplete_ISR = USART6_TX_ISR;
 8003c40:	4a6d      	ldr	r2, [pc, #436]	@ (8003df8 <USART_Init+0x4f0>)
 8003c42:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8003c46:	e045      	b.n	8003cd4 <USART_Init+0x3cc>
			xUSART_RX[1].Request = DMA_Configuration.Request.USART2_RX;
 8003c48:	4b60      	ldr	r3, [pc, #384]	@ (8003dcc <USART_Init+0x4c4>)
 8003c4a:	f103 0558 	add.w	r5, r3, #88	@ 0x58
 8003c4e:	4a6b      	ldr	r2, [pc, #428]	@ (8003dfc <USART_Init+0x4f4>)
 8003c50:	ca07      	ldmia	r2, {r0, r1, r2}
 8003c52:	e885 0007 	stmia.w	r5, {r0, r1, r2}
			xUSART_RX[1].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 8003c56:	2210      	movs	r2, #16
 8003c58:	675a      	str	r2, [r3, #116]	@ 0x74
			xUSART_RX[1].ISR_Routines.Full_Transfer_Commplete_ISR = USART2_RX_ISR;
 8003c5a:	4a69      	ldr	r2, [pc, #420]	@ (8003e00 <USART_Init+0x4f8>)
 8003c5c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 8003c60:	e7af      	b.n	8003bc2 <USART_Init+0x2ba>
			xUSART_RX[2].Request = DMA_Configuration.Request.USART3_RX;
 8003c62:	4b5a      	ldr	r3, [pc, #360]	@ (8003dcc <USART_Init+0x4c4>)
 8003c64:	f103 05b0 	add.w	r5, r3, #176	@ 0xb0
 8003c68:	4a66      	ldr	r2, [pc, #408]	@ (8003e04 <USART_Init+0x4fc>)
 8003c6a:	ca07      	ldmia	r2, {r0, r1, r2}
 8003c6c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
			xUSART_RX[2].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 8003c70:	2210      	movs	r2, #16
 8003c72:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
			xUSART_RX[2].ISR_Routines.Full_Transfer_Commplete_ISR = USART3_RX_ISR;
 8003c76:	4a64      	ldr	r2, [pc, #400]	@ (8003e08 <USART_Init+0x500>)
 8003c78:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
 8003c7c:	e7a1      	b.n	8003bc2 <USART_Init+0x2ba>
			xUSART_RX[3].Request = DMA_Configuration.Request.UART4_RX;
 8003c7e:	4b53      	ldr	r3, [pc, #332]	@ (8003dcc <USART_Init+0x4c4>)
 8003c80:	f503 7584 	add.w	r5, r3, #264	@ 0x108
 8003c84:	4a61      	ldr	r2, [pc, #388]	@ (8003e0c <USART_Init+0x504>)
 8003c86:	ca07      	ldmia	r2, {r0, r1, r2}
 8003c88:	e885 0007 	stmia.w	r5, {r0, r1, r2}
			xUSART_RX[3].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 8003c8c:	2210      	movs	r2, #16
 8003c8e:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
			xUSART_RX[3].ISR_Routines.Full_Transfer_Commplete_ISR = USART4_RX_ISR;
 8003c92:	4a5f      	ldr	r2, [pc, #380]	@ (8003e10 <USART_Init+0x508>)
 8003c94:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
 8003c98:	e793      	b.n	8003bc2 <USART_Init+0x2ba>
			xUSART_RX[4].Request = DMA_Configuration.Request.UART5_RX;
 8003c9a:	4b4c      	ldr	r3, [pc, #304]	@ (8003dcc <USART_Init+0x4c4>)
 8003c9c:	f503 75b0 	add.w	r5, r3, #352	@ 0x160
 8003ca0:	4a5c      	ldr	r2, [pc, #368]	@ (8003e14 <USART_Init+0x50c>)
 8003ca2:	ca07      	ldmia	r2, {r0, r1, r2}
 8003ca4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
			xUSART_RX[4].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 8003ca8:	2210      	movs	r2, #16
 8003caa:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
			xUSART_RX[4].ISR_Routines.Full_Transfer_Commplete_ISR = USART5_RX_ISR;
 8003cae:	4a5a      	ldr	r2, [pc, #360]	@ (8003e18 <USART_Init+0x510>)
 8003cb0:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
 8003cb4:	e785      	b.n	8003bc2 <USART_Init+0x2ba>
		config -> Port  -> CR3 &= ~USART_CR3_DMAR;
 8003cb6:	6822      	ldr	r2, [r4, #0]
 8003cb8:	6953      	ldr	r3, [r2, #20]
 8003cba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003cbe:	6153      	str	r3, [r2, #20]
 8003cc0:	e79b      	b.n	8003bfa <USART_Init+0x2f2>
			xUSART_TX[0].Request = DMA_Configuration.Request.USART1_TX;
 8003cc2:	4b4b      	ldr	r3, [pc, #300]	@ (8003df0 <USART_Init+0x4e8>)
 8003cc4:	4a55      	ldr	r2, [pc, #340]	@ (8003e1c <USART_Init+0x514>)
 8003cc6:	ca07      	ldmia	r2, {r0, r1, r2}
 8003cc8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			xUSART_TX[0].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 8003ccc:	2210      	movs	r2, #16
 8003cce:	61da      	str	r2, [r3, #28]
			xUSART_TX[0].ISR_Routines.Full_Transfer_Commplete_ISR = USART1_TX_ISR;
 8003cd0:	4a53      	ldr	r2, [pc, #332]	@ (8003e20 <USART_Init+0x518>)
 8003cd2:	64da      	str	r2, [r3, #76]	@ 0x4c
		}

		xUSART_TX[usart_dma_instance_number].circular_mode = DMA_Configuration.Circular_Mode.Disable;
 8003cd4:	4b40      	ldr	r3, [pc, #256]	@ (8003dd8 <USART_Init+0x4d0>)
 8003cd6:	f993 3000 	ldrsb.w	r3, [r3]
 8003cda:	2258      	movs	r2, #88	@ 0x58
 8003cdc:	4d44      	ldr	r5, [pc, #272]	@ (8003df0 <USART_Init+0x4e8>)
 8003cde:	fb02 5503 	mla	r5, r2, r3, r5
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	61ab      	str	r3, [r5, #24]
		xUSART_TX[usart_dma_instance_number].flow_control = DMA_Configuration.Flow_Control.DMA_Control;
 8003ce6:	60eb      	str	r3, [r5, #12]
		xUSART_TX[usart_dma_instance_number].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 8003ce8:	2110      	movs	r1, #16
 8003cea:	61e9      	str	r1, [r5, #28]
		xUSART_TX[usart_dma_instance_number].memory_data_size = DMA_Configuration.Memory_Data_Size.byte;
 8003cec:	62ab      	str	r3, [r5, #40]	@ 0x28
		xUSART_TX[usart_dma_instance_number].peripheral_data_size = DMA_Configuration.Peripheral_Data_Size.byte;
 8003cee:	626b      	str	r3, [r5, #36]	@ 0x24
		xUSART_TX[usart_dma_instance_number].peripheral_pointer_increment = DMA_Configuration.Peripheral_Pointer_Increment.Disable;
 8003cf0:	846b      	strh	r3, [r5, #34]	@ 0x22
		xUSART_TX[usart_dma_instance_number].memory_pointer_increment = DMA_Configuration.Memory_Pointer_Increment.Enable;
 8003cf2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003cf6:	842b      	strh	r3, [r5, #32]
		xUSART_TX[usart_dma_instance_number].priority_level = DMA_Configuration.Priority_Level.Very_high;
 8003cf8:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8003cfc:	616b      	str	r3, [r5, #20]
		xUSART_TX[usart_dma_instance_number].transfer_direction = DMA_Configuration.Transfer_Direction.Memory_to_peripheral;
 8003cfe:	2340      	movs	r3, #64	@ 0x40
 8003d00:	612b      	str	r3, [r5, #16]
		config ->USART_DMA_Instance_TX = xUSART_TX[usart_dma_instance_number];
 8003d02:	4629      	mov	r1, r5
 8003d04:	f104 0014 	add.w	r0, r4, #20
 8003d08:	f001 f9d3 	bl	80050b2 <memcpy>
		DMA_Init(&xUSART_TX[usart_dma_instance_number]);
 8003d0c:	4628      	mov	r0, r5
 8003d0e:	f7fe fd59 	bl	80027c4 <DMA_Init>
	else
	{
		config -> Port -> CR3 &= ~USART_CR3_DMAT;
	}

	if(config->mode == USART_Configuration.Mode.Single_Wire_Half_Duplex) config -> Port -> CR3 |= USART_CR3_HDSEL;
 8003d12:	7a23      	ldrb	r3, [r4, #8]
 8003d14:	2b03      	cmp	r3, #3
 8003d16:	d04c      	beq.n	8003db2 <USART_Init+0x4aa>
	if(config->mode == USART_Configuration.Mode.LIN) config -> Port -> CR2 |= USART_CR2_LINEN;
 8003d18:	7a23      	ldrb	r3, [r4, #8]
 8003d1a:	2b05      	cmp	r3, #5
 8003d1c:	d04f      	beq.n	8003dbe <USART_Init+0x4b6>


	config->Port->CR1 |= USART_CR1_RE | USART_CR1_TE  ;
 8003d1e:	6822      	ldr	r2, [r4, #0]
 8003d20:	68d3      	ldr	r3, [r2, #12]
 8003d22:	f043 030c 	orr.w	r3, r3, #12
 8003d26:	60d3      	str	r3, [r2, #12]
	config->Port-> CR1 |= USART_CR1_UE;
 8003d28:	6822      	ldr	r2, [r4, #0]
 8003d2a:	68d3      	ldr	r3, [r2, #12]
 8003d2c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003d30:	60d3      	str	r3, [r2, #12]

	return 1;
 8003d32:	2001      	movs	r0, #1
}
 8003d34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			xUSART_TX[1].Request = DMA_Configuration.Request.USART2_TX;
 8003d38:	4b2d      	ldr	r3, [pc, #180]	@ (8003df0 <USART_Init+0x4e8>)
 8003d3a:	f103 0558 	add.w	r5, r3, #88	@ 0x58
 8003d3e:	4a39      	ldr	r2, [pc, #228]	@ (8003e24 <USART_Init+0x51c>)
 8003d40:	ca07      	ldmia	r2, {r0, r1, r2}
 8003d42:	e885 0007 	stmia.w	r5, {r0, r1, r2}
			xUSART_TX[1].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 8003d46:	2210      	movs	r2, #16
 8003d48:	675a      	str	r2, [r3, #116]	@ 0x74
			xUSART_TX[1].ISR_Routines.Full_Transfer_Commplete_ISR = USART2_TX_ISR;
 8003d4a:	4a37      	ldr	r2, [pc, #220]	@ (8003e28 <USART_Init+0x520>)
 8003d4c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 8003d50:	e7c0      	b.n	8003cd4 <USART_Init+0x3cc>
			xUSART_TX[2].Request = DMA_Configuration.Request.USART3_TX;
 8003d52:	4b27      	ldr	r3, [pc, #156]	@ (8003df0 <USART_Init+0x4e8>)
 8003d54:	f103 05b0 	add.w	r5, r3, #176	@ 0xb0
 8003d58:	4a34      	ldr	r2, [pc, #208]	@ (8003e2c <USART_Init+0x524>)
 8003d5a:	ca07      	ldmia	r2, {r0, r1, r2}
 8003d5c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
			xUSART_TX[2].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 8003d60:	2210      	movs	r2, #16
 8003d62:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
			xUSART_TX[2].ISR_Routines.Full_Transfer_Commplete_ISR = USART3_TX_ISR;
 8003d66:	4a32      	ldr	r2, [pc, #200]	@ (8003e30 <USART_Init+0x528>)
 8003d68:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
 8003d6c:	e7b2      	b.n	8003cd4 <USART_Init+0x3cc>
			xUSART_TX[3].Request = DMA_Configuration.Request.UART4_TX;
 8003d6e:	4b20      	ldr	r3, [pc, #128]	@ (8003df0 <USART_Init+0x4e8>)
 8003d70:	f503 7584 	add.w	r5, r3, #264	@ 0x108
 8003d74:	4a2f      	ldr	r2, [pc, #188]	@ (8003e34 <USART_Init+0x52c>)
 8003d76:	ca07      	ldmia	r2, {r0, r1, r2}
 8003d78:	e885 0007 	stmia.w	r5, {r0, r1, r2}
			xUSART_TX[3].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 8003d7c:	2210      	movs	r2, #16
 8003d7e:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
			xUSART_TX[3].ISR_Routines.Full_Transfer_Commplete_ISR = USART4_TX_ISR;
 8003d82:	4a2d      	ldr	r2, [pc, #180]	@ (8003e38 <USART_Init+0x530>)
 8003d84:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
 8003d88:	e7a4      	b.n	8003cd4 <USART_Init+0x3cc>
			xUSART_TX[4].Request = DMA_Configuration.Request.UART5_TX;
 8003d8a:	4b19      	ldr	r3, [pc, #100]	@ (8003df0 <USART_Init+0x4e8>)
 8003d8c:	f503 75b0 	add.w	r5, r3, #352	@ 0x160
 8003d90:	4a2a      	ldr	r2, [pc, #168]	@ (8003e3c <USART_Init+0x534>)
 8003d92:	ca07      	ldmia	r2, {r0, r1, r2}
 8003d94:	e885 0007 	stmia.w	r5, {r0, r1, r2}
			xUSART_TX[4].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 8003d98:	2210      	movs	r2, #16
 8003d9a:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
			xUSART_TX[4].ISR_Routines.Full_Transfer_Commplete_ISR = USART5_TX_ISR;
 8003d9e:	4a28      	ldr	r2, [pc, #160]	@ (8003e40 <USART_Init+0x538>)
 8003da0:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
 8003da4:	e796      	b.n	8003cd4 <USART_Init+0x3cc>
		config -> Port -> CR3 &= ~USART_CR3_DMAT;
 8003da6:	6822      	ldr	r2, [r4, #0]
 8003da8:	6953      	ldr	r3, [r2, #20]
 8003daa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003dae:	6153      	str	r3, [r2, #20]
 8003db0:	e7af      	b.n	8003d12 <USART_Init+0x40a>
	if(config->mode == USART_Configuration.Mode.Single_Wire_Half_Duplex) config -> Port -> CR3 |= USART_CR3_HDSEL;
 8003db2:	6822      	ldr	r2, [r4, #0]
 8003db4:	6953      	ldr	r3, [r2, #20]
 8003db6:	f043 0308 	orr.w	r3, r3, #8
 8003dba:	6153      	str	r3, [r2, #20]
 8003dbc:	e7ac      	b.n	8003d18 <USART_Init+0x410>
	if(config->mode == USART_Configuration.Mode.LIN) config -> Port -> CR2 |= USART_CR2_LINEN;
 8003dbe:	6822      	ldr	r2, [r4, #0]
 8003dc0:	6913      	ldr	r3, [r2, #16]
 8003dc2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003dc6:	6113      	str	r3, [r2, #16]
 8003dc8:	e7a9      	b.n	8003d1e <USART_Init+0x416>
 8003dca:	bf00      	nop
 8003dcc:	200006bc 	.word	0x200006bc
 8003dd0:	0800797c 	.word	0x0800797c
 8003dd4:	08002e79 	.word	0x08002e79
 8003dd8:	200004a8 	.word	0x200004a8
 8003ddc:	40011000 	.word	0x40011000
 8003de0:	40004400 	.word	0x40004400
 8003de4:	40004800 	.word	0x40004800
 8003de8:	40004c00 	.word	0x40004c00
 8003dec:	40005000 	.word	0x40005000
 8003df0:	200004ac 	.word	0x200004ac
 8003df4:	08007a00 	.word	0x08007a00
 8003df8:	08002ee5 	.word	0x08002ee5
 8003dfc:	08007994 	.word	0x08007994
 8003e00:	08002e91 	.word	0x08002e91
 8003e04:	080079ac 	.word	0x080079ac
 8003e08:	08002ea9 	.word	0x08002ea9
 8003e0c:	080079c4 	.word	0x080079c4
 8003e10:	08002ec1 	.word	0x08002ec1
 8003e14:	080079dc 	.word	0x080079dc
 8003e18:	08002ed9 	.word	0x08002ed9
 8003e1c:	08007988 	.word	0x08007988
 8003e20:	08002e6d 	.word	0x08002e6d
 8003e24:	080079a0 	.word	0x080079a0
 8003e28:	08002e85 	.word	0x08002e85
 8003e2c:	080079b8 	.word	0x080079b8
 8003e30:	08002e9d 	.word	0x08002e9d
 8003e34:	080079d0 	.word	0x080079d0
 8003e38:	08002eb5 	.word	0x08002eb5
 8003e3c:	080079e8 	.word	0x080079e8
 8003e40:	08002ecd 	.word	0x08002ecd

08003e44 <USART_TX_Buffer>:

int8_t USART_TX_Buffer(USART_Config *config, uint8_t *tx_buffer, uint16_t length)
{
 8003e44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e48:	4604      	mov	r4, r0
 8003e4a:	460e      	mov	r6, r1
 8003e4c:	4615      	mov	r5, r2
	usart_dma_instance_number = USART_Get_Instance_Number(config);
 8003e4e:	f7ff fcd5 	bl	80037fc <USART_Get_Instance_Number>
 8003e52:	f8df 9104 	ldr.w	r9, [pc, #260]	@ 8003f58 <USART_TX_Buffer+0x114>
 8003e56:	f889 0000 	strb.w	r0, [r9]
	if(config->dma_enable |= USART_Configuration.DMA_Enable.TX_Enable){
 8003e5a:	7c63      	ldrb	r3, [r4, #17]
 8003e5c:	f043 0301 	orr.w	r3, r3, #1
 8003e60:	7463      	strb	r3, [r4, #17]
		config -> Port -> SR &= ~USART_SR_TC;
 8003e62:	6822      	ldr	r2, [r4, #0]
 8003e64:	6813      	ldr	r3, [r2, #0]
 8003e66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e6a:	6013      	str	r3, [r2, #0]
		xUSART_TX[usart_dma_instance_number].memory_address = (uint32_t)tx_buffer;
 8003e6c:	4f2d      	ldr	r7, [pc, #180]	@ (8003f24 <USART_TX_Buffer+0xe0>)
 8003e6e:	f04f 0858 	mov.w	r8, #88	@ 0x58
 8003e72:	fb08 7000 	mla	r0, r8, r0, r7
 8003e76:	6306      	str	r6, [r0, #48]	@ 0x30
		xUSART_TX[usart_dma_instance_number].peripheral_address = (uint32_t)&config->Port->DR;
 8003e78:	6823      	ldr	r3, [r4, #0]
 8003e7a:	3304      	adds	r3, #4
 8003e7c:	62c3      	str	r3, [r0, #44]	@ 0x2c
		xUSART_TX[usart_dma_instance_number].buffer_length = length;
 8003e7e:	8685      	strh	r5, [r0, #52]	@ 0x34
		DMA_Set_Target(&xUSART_TX[usart_dma_instance_number]);
 8003e80:	f7fe fe10 	bl	8002aa4 <DMA_Set_Target>
		DMA_Set_Trigger(&xUSART_TX[usart_dma_instance_number]);
 8003e84:	f999 0000 	ldrsb.w	r0, [r9]
 8003e88:	fb08 7000 	mla	r0, r8, r0, r7
 8003e8c:	f7fe fe3e 	bl	8002b0c <DMA_Set_Trigger>
		config -> Port  -> CR3 |= USART_CR3_DMAT;
 8003e90:	6822      	ldr	r2, [r4, #0]
 8003e92:	6953      	ldr	r3, [r2, #20]
 8003e94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e98:	6153      	str	r3, [r2, #20]

		if(config->Port == USART1)
 8003e9a:	6823      	ldr	r3, [r4, #0]
 8003e9c:	4a22      	ldr	r2, [pc, #136]	@ (8003f28 <USART_TX_Buffer+0xe4>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d016      	beq.n	8003ed0 <USART_TX_Buffer+0x8c>
		{
			while(!U1TX_Complete){}
			U1TX_Complete = 0;

		}
		else if(config->Port == USART2)
 8003ea2:	4a22      	ldr	r2, [pc, #136]	@ (8003f2c <USART_TX_Buffer+0xe8>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d01d      	beq.n	8003ee4 <USART_TX_Buffer+0xa0>
		{
			while(!U2TX_Complete){}
			U2TX_Complete = 0;
		}
		else if(config->Port == USART3)
 8003ea8:	4a21      	ldr	r2, [pc, #132]	@ (8003f30 <USART_TX_Buffer+0xec>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d022      	beq.n	8003ef4 <USART_TX_Buffer+0xb0>
		{
			while(!U3TX_Complete){}
			U3TX_Complete = 0;
		}
		else if(config->Port == UART4)
 8003eae:	4a21      	ldr	r2, [pc, #132]	@ (8003f34 <USART_TX_Buffer+0xf0>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d027      	beq.n	8003f04 <USART_TX_Buffer+0xc0>
		{
			while(!U4TX_Complete){}
			U4TX_Complete = 0;
		}
		else if(config->Port == UART5)
 8003eb4:	4a20      	ldr	r2, [pc, #128]	@ (8003f38 <USART_TX_Buffer+0xf4>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d02c      	beq.n	8003f14 <USART_TX_Buffer+0xd0>
		{
			while(!U5TX_Complete){}
			U5TX_Complete = 0;
		}
		else if(config->Port == USART6)
 8003eba:	4a20      	ldr	r2, [pc, #128]	@ (8003f3c <USART_TX_Buffer+0xf8>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d10e      	bne.n	8003ede <USART_TX_Buffer+0x9a>
		{
			while(!U6TX_Complete){}
 8003ec0:	4b1f      	ldr	r3, [pc, #124]	@ (8003f40 <USART_TX_Buffer+0xfc>)
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d0fb      	beq.n	8003ec0 <USART_TX_Buffer+0x7c>
			U6TX_Complete = 0;
 8003ec8:	4b1d      	ldr	r3, [pc, #116]	@ (8003f40 <USART_TX_Buffer+0xfc>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	701a      	strb	r2, [r3, #0]
 8003ece:	e006      	b.n	8003ede <USART_TX_Buffer+0x9a>
			while(!U1TX_Complete){}
 8003ed0:	4b1c      	ldr	r3, [pc, #112]	@ (8003f44 <USART_TX_Buffer+0x100>)
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d0fb      	beq.n	8003ed0 <USART_TX_Buffer+0x8c>
			U1TX_Complete = 0;
 8003ed8:	4b1a      	ldr	r3, [pc, #104]	@ (8003f44 <USART_TX_Buffer+0x100>)
 8003eda:	2200      	movs	r2, #0
 8003edc:	701a      	strb	r2, [r3, #0]
		}
	}

	return 1;

}
 8003ede:	2001      	movs	r0, #1
 8003ee0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			while(!U2TX_Complete){}
 8003ee4:	4b18      	ldr	r3, [pc, #96]	@ (8003f48 <USART_TX_Buffer+0x104>)
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d0fb      	beq.n	8003ee4 <USART_TX_Buffer+0xa0>
			U2TX_Complete = 0;
 8003eec:	4b16      	ldr	r3, [pc, #88]	@ (8003f48 <USART_TX_Buffer+0x104>)
 8003eee:	2200      	movs	r2, #0
 8003ef0:	701a      	strb	r2, [r3, #0]
 8003ef2:	e7f4      	b.n	8003ede <USART_TX_Buffer+0x9a>
			while(!U3TX_Complete){}
 8003ef4:	4b15      	ldr	r3, [pc, #84]	@ (8003f4c <USART_TX_Buffer+0x108>)
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d0fb      	beq.n	8003ef4 <USART_TX_Buffer+0xb0>
			U3TX_Complete = 0;
 8003efc:	4b13      	ldr	r3, [pc, #76]	@ (8003f4c <USART_TX_Buffer+0x108>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	701a      	strb	r2, [r3, #0]
 8003f02:	e7ec      	b.n	8003ede <USART_TX_Buffer+0x9a>
			while(!U4TX_Complete){}
 8003f04:	4b12      	ldr	r3, [pc, #72]	@ (8003f50 <USART_TX_Buffer+0x10c>)
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d0fb      	beq.n	8003f04 <USART_TX_Buffer+0xc0>
			U4TX_Complete = 0;
 8003f0c:	4b10      	ldr	r3, [pc, #64]	@ (8003f50 <USART_TX_Buffer+0x10c>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	701a      	strb	r2, [r3, #0]
 8003f12:	e7e4      	b.n	8003ede <USART_TX_Buffer+0x9a>
			while(!U5TX_Complete){}
 8003f14:	4b0f      	ldr	r3, [pc, #60]	@ (8003f54 <USART_TX_Buffer+0x110>)
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d0fb      	beq.n	8003f14 <USART_TX_Buffer+0xd0>
			U5TX_Complete = 0;
 8003f1c:	4b0d      	ldr	r3, [pc, #52]	@ (8003f54 <USART_TX_Buffer+0x110>)
 8003f1e:	2200      	movs	r2, #0
 8003f20:	701a      	strb	r2, [r3, #0]
 8003f22:	e7dc      	b.n	8003ede <USART_TX_Buffer+0x9a>
 8003f24:	200004ac 	.word	0x200004ac
 8003f28:	40011000 	.word	0x40011000
 8003f2c:	40004400 	.word	0x40004400
 8003f30:	40004800 	.word	0x40004800
 8003f34:	40004c00 	.word	0x40004c00
 8003f38:	40005000 	.word	0x40005000
 8003f3c:	40011400 	.word	0x40011400
 8003f40:	20000485 	.word	0x20000485
 8003f44:	2000048f 	.word	0x2000048f
 8003f48:	2000048d 	.word	0x2000048d
 8003f4c:	2000048b 	.word	0x2000048b
 8003f50:	20000489 	.word	0x20000489
 8003f54:	20000487 	.word	0x20000487
 8003f58:	200004a8 	.word	0x200004a8

08003f5c <Delay_ms>:
{
 8003f5c:	b082      	sub	sp, #8
 8003f5e:	9001      	str	r0, [sp, #4]
	unsigned long x =0x29040 * (ms);
 8003f60:	9a01      	ldr	r2, [sp, #4]
 8003f62:	4b0a      	ldr	r3, [pc, #40]	@ (8003f8c <Delay_ms+0x30>)
 8003f64:	fb03 f202 	mul.w	r2, r3, r2
	SysTick->LOAD =  x ;
 8003f68:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003f6c:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0;
 8003f6e:	2200      	movs	r2, #0
 8003f70:	619a      	str	r2, [r3, #24]
	SysTick->CTRL |= 1;
 8003f72:	691a      	ldr	r2, [r3, #16]
 8003f74:	f042 0201 	orr.w	r2, r2, #1
 8003f78:	611a      	str	r2, [r3, #16]
	while((SysTick->CTRL & 0x00010000) == 0);
 8003f7a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8003f84:	d0f9      	beq.n	8003f7a <Delay_ms+0x1e>
}
 8003f86:	2000      	movs	r0, #0
 8003f88:	b002      	add	sp, #8
 8003f8a:	4770      	bx	lr
 8003f8c:	00029040 	.word	0x00029040

08003f90 <Delay_milli>:
{
 8003f90:	b508      	push	{r3, lr}
 8003f92:	ed2d 8b02 	vpush	{d8}
 8003f96:	eeb0 8a40 	vmov.f32	s16, s0
	for (; ms>0; ms--)
 8003f9a:	e006      	b.n	8003faa <Delay_milli+0x1a>
		Delay_ms(1);
 8003f9c:	2001      	movs	r0, #1
 8003f9e:	f7ff ffdd 	bl	8003f5c <Delay_ms>
	for (; ms>0; ms--)
 8003fa2:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8003fa6:	ee38 8a67 	vsub.f32	s16, s16, s15
 8003faa:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8003fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fb2:	dcf3      	bgt.n	8003f9c <Delay_milli+0xc>
}
 8003fb4:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 8003fb8:	ee17 0a90 	vmov	r0, s15
 8003fbc:	ecbd 8b02 	vpop	{d8}
 8003fc0:	bd08      	pop	{r3, pc}
	...

08003fc4 <MCU_Clock_Setup>:
{
 8003fc4:	b508      	push	{r3, lr}
	SystemInit();
 8003fc6:	f000 f9db 	bl	8004380 <SystemInit>
	RCC->PLLCFGR = 0x00000000;
 8003fca:	4b30      	ldr	r3, [pc, #192]	@ (800408c <MCU_Clock_Setup+0xc8>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	605a      	str	r2, [r3, #4]
	RCC -> CR |= RCC_CR_HSEON;
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003fd6:	601a      	str	r2, [r3, #0]
	while(!(RCC -> CR & RCC_CR_HSERDY)){}
 8003fd8:	4b2c      	ldr	r3, [pc, #176]	@ (800408c <MCU_Clock_Setup+0xc8>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8003fe0:	d0fa      	beq.n	8003fd8 <MCU_Clock_Setup+0x14>
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 8003fe2:	4b2a      	ldr	r3, [pc, #168]	@ (800408c <MCU_Clock_Setup+0xc8>)
 8003fe4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003fe6:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003fea:	641a      	str	r2, [r3, #64]	@ 0x40
	PWR ->CR |= PWR_CR_VOS;
 8003fec:	4928      	ldr	r1, [pc, #160]	@ (8004090 <MCU_Clock_Setup+0xcc>)
 8003fee:	680a      	ldr	r2, [r1, #0]
 8003ff0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003ff4:	600a      	str	r2, [r1, #0]
	FLASH -> ACR |= FLASH_ACR_ICEN | FLASH_ACR_PRFTEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS;
 8003ff6:	f501 31e6 	add.w	r1, r1, #117760	@ 0x1cc00
 8003ffa:	680a      	ldr	r2, [r1, #0]
 8003ffc:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8004000:	f042 0205 	orr.w	r2, r2, #5
 8004004:	600a      	str	r2, [r1, #0]
	RCC->PLLCFGR |= (pll_q << 24) | (pll_p << 16) | (pll_n << 6) | (pll_m << 0);
 8004006:	6859      	ldr	r1, [r3, #4]
 8004008:	4a22      	ldr	r2, [pc, #136]	@ (8004094 <MCU_Clock_Setup+0xd0>)
 800400a:	430a      	orrs	r2, r1
 800400c:	605a      	str	r2, [r3, #4]
	RCC ->PLLCFGR |= 1 << 22;
 800400e:	685a      	ldr	r2, [r3, #4]
 8004010:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8004014:	605a      	str	r2, [r3, #4]
	RCC -> CFGR |= RCC_CFGR_HPRE_DIV1;
 8004016:	689a      	ldr	r2, [r3, #8]
 8004018:	609a      	str	r2, [r3, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE1_DIV4;
 800401a:	689a      	ldr	r2, [r3, #8]
 800401c:	f442 52a0 	orr.w	r2, r2, #5120	@ 0x1400
 8004020:	609a      	str	r2, [r3, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE2_DIV2;
 8004022:	689a      	ldr	r2, [r3, #8]
 8004024:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004028:	609a      	str	r2, [r3, #8]
	RCC -> CR |= RCC_CR_PLLON;
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8004030:	601a      	str	r2, [r3, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY)){}
 8004032:	4b16      	ldr	r3, [pc, #88]	@ (800408c <MCU_Clock_Setup+0xc8>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800403a:	d0fa      	beq.n	8004032 <MCU_Clock_Setup+0x6e>
	RCC -> CFGR |= RCC_CFGR_SW_PLL;
 800403c:	4a13      	ldr	r2, [pc, #76]	@ (800408c <MCU_Clock_Setup+0xc8>)
 800403e:	6893      	ldr	r3, [r2, #8]
 8004040:	f043 0302 	orr.w	r3, r3, #2
 8004044:	6093      	str	r3, [r2, #8]
	while((RCC -> CFGR & RCC_CFGR_SWS_PLL) != RCC_CFGR_SWS_PLL);
 8004046:	4b11      	ldr	r3, [pc, #68]	@ (800408c <MCU_Clock_Setup+0xc8>)
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f013 0f08 	tst.w	r3, #8
 800404e:	d0fa      	beq.n	8004046 <MCU_Clock_Setup+0x82>
	SystemCoreClockUpdate();
 8004050:	f000 f9a0 	bl	8004394 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock/168);
 8004054:	4b10      	ldr	r3, [pc, #64]	@ (8004098 <MCU_Clock_Setup+0xd4>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	08db      	lsrs	r3, r3, #3
 800405a:	4a10      	ldr	r2, [pc, #64]	@ (800409c <MCU_Clock_Setup+0xd8>)
 800405c:	fba2 2303 	umull	r2, r3, r2, r3
 8004060:	085b      	lsrs	r3, r3, #1
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004062:	3b01      	subs	r3, #1
 8004064:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004068:	d20a      	bcs.n	8004080 <MCU_Clock_Setup+0xbc>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800406a:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 800406e:	6153      	str	r3, [r2, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004070:	4b0b      	ldr	r3, [pc, #44]	@ (80040a0 <MCU_Clock_Setup+0xdc>)
 8004072:	21f0      	movs	r1, #240	@ 0xf0
 8004074:	f883 1023 	strb.w	r1, [r3, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004078:	2300      	movs	r3, #0
 800407a:	6193      	str	r3, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800407c:	2307      	movs	r3, #7
 800407e:	6113      	str	r3, [r2, #16]
	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8004080:	4a02      	ldr	r2, [pc, #8]	@ (800408c <MCU_Clock_Setup+0xc8>)
 8004082:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 8004084:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004088:	6453      	str	r3, [r2, #68]	@ 0x44
}
 800408a:	bd08      	pop	{r3, pc}
 800408c:	40023800 	.word	0x40023800
 8004090:	40007000 	.word	0x40007000
 8004094:	07005408 	.word	0x07005408
 8004098:	20000000 	.word	0x20000000
 800409c:	18618619 	.word	0x18618619
 80040a0:	e000ed00 	.word	0xe000ed00

080040a4 <Thermistor_GetTempC>:
{
	return(((float)digital*3.3)/4096.0);
}

float Thermistor_GetTempC(uint16_t adcValue)
{
 80040a4:	b508      	push	{r3, lr}
 80040a6:	ed2d 8b02 	vpush	{d8}
 80040aa:	ee07 0a90 	vmov	s15, r0
    // 1) Convert ADC reading to voltage across thermistor
    float vTherm = (adcValue / ADC_MAX) * VREF;
 80040ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040b2:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8004100 <Thermistor_GetTempC+0x5c>
 80040b6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80040ba:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8004104 <Thermistor_GetTempC+0x60>
 80040be:	ee27 7a26 	vmul.f32	s14, s14, s13

    // 2) Compute thermistor resistance from divider: V = VREF * (Rtherm / (Rtherm + R_FIXED))
    float rTherm = R_FIXED * (VREF / vTherm - 1.0f);
 80040c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040c6:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 80040ca:	ee77 7ac8 	vsub.f32	s15, s15, s16
 80040ce:	ed9f 0a0e 	vldr	s0, [pc, #56]	@ 8004108 <Thermistor_GetTempC+0x64>
 80040d2:	ee67 7a80 	vmul.f32	s15, s15, s0

    // 3) Apply B-parameter equation: 1/T = 1/T0 + (1/B) * ln(R/R0)
    float lnTerm = logf(rTherm / R0);
 80040d6:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80040da:	f003 f837 	bl	800714c <logf>
    float invT  = (1.0f / T0_KELVIN) + (lnTerm / B_COEF);
 80040de:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 800410c <Thermistor_GetTempC+0x68>
 80040e2:	eec0 7a07 	vdiv.f32	s15, s0, s14
 80040e6:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8004110 <Thermistor_GetTempC+0x6c>
 80040ea:	ee77 7a87 	vadd.f32	s15, s15, s14

    // 4) Convert Kelvin back to °C
    float tempK = 1.0f / invT;
 80040ee:	ee88 0a27 	vdiv.f32	s0, s16, s15
    float tempC = tempK - 273.15f;

    return tempC;
}
 80040f2:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8004114 <Thermistor_GetTempC+0x70>
 80040f6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80040fa:	ecbd 8b02 	vpop	{d8}
 80040fe:	bd08      	pop	{r3, pc}
 8004100:	457ff000 	.word	0x457ff000
 8004104:	40533333 	.word	0x40533333
 8004108:	461c4000 	.word	0x461c4000
 800410c:	4576e000 	.word	0x4576e000
 8004110:	3b5bcf0f 	.word	0x3b5bcf0f
 8004114:	43889333 	.word	0x43889333

08004118 <main>:

int main(void)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b088      	sub	sp, #32
	MCU_Clock_Setup();
 800411c:	f7ff ff52 	bl	8003fc4 <MCU_Clock_Setup>
	SysTick->CTRL = 0;
 8004120:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004124:	2500      	movs	r5, #0
 8004126:	611d      	str	r5, [r3, #16]
	SysTick->LOAD = 0x00FFFFFF;
 8004128:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 800412c:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0;
 800412e:	619d      	str	r5, [r3, #24]
	SysTick->CTRL = 5;
 8004130:	2205      	movs	r2, #5
 8004132:	611a      	str	r2, [r3, #16]
	Delay_Config();
	Console_Init(115200);
 8004134:	f44f 30e1 	mov.w	r0, #115200	@ 0x1c200
 8004138:	f7fd faf0 	bl	800171c <Console_Init>


	GPIO_Pin_Init(GPIOD, 12, GPIO_Configuration.Mode.General_Purpose_Output,
 800413c:	4f5a      	ldr	r7, [pc, #360]	@ (80042a8 <main+0x190>)
 800413e:	9502      	str	r5, [sp, #8]
 8004140:	f04f 0802 	mov.w	r8, #2
 8004144:	f8cd 8004 	str.w	r8, [sp, #4]
 8004148:	2603      	movs	r6, #3
 800414a:	9600      	str	r6, [sp, #0]
 800414c:	462b      	mov	r3, r5
 800414e:	2201      	movs	r2, #1
 8004150:	210c      	movs	r1, #12
 8004152:	4638      	mov	r0, r7
 8004154:	f7fe fe28 	bl	8002da8 <GPIO_Pin_Init>
			GPIO_Configuration.Output_Type.Push_Pull,
			GPIO_Configuration.Speed.Very_High_Speed,
			GPIO_Configuration.Pull.Pull_Down,
			GPIO_Configuration.Alternate_Functions.None);

	GPIO_Pin_Init(GPIOD, 13, GPIO_Configuration.Mode.General_Purpose_Output,
 8004158:	9502      	str	r5, [sp, #8]
 800415a:	f8cd 8004 	str.w	r8, [sp, #4]
 800415e:	9600      	str	r6, [sp, #0]
 8004160:	462b      	mov	r3, r5
 8004162:	2201      	movs	r2, #1
 8004164:	210d      	movs	r1, #13
 8004166:	4638      	mov	r0, r7
 8004168:	f7fe fe1e 	bl	8002da8 <GPIO_Pin_Init>
			GPIO_Configuration.Output_Type.Push_Pull,
			GPIO_Configuration.Speed.Very_High_Speed,
			GPIO_Configuration.Pull.Pull_Down,
			GPIO_Configuration.Alternate_Functions.None);
	GPIO_Pin_Init(GPIOD, 14, GPIO_Configuration.Mode.General_Purpose_Output,
 800416c:	9502      	str	r5, [sp, #8]
 800416e:	f8cd 8004 	str.w	r8, [sp, #4]
 8004172:	9600      	str	r6, [sp, #0]
 8004174:	462b      	mov	r3, r5
 8004176:	2201      	movs	r2, #1
 8004178:	210e      	movs	r1, #14
 800417a:	4638      	mov	r0, r7
 800417c:	f7fe fe14 	bl	8002da8 <GPIO_Pin_Init>
			GPIO_Configuration.Output_Type.Push_Pull,
			GPIO_Configuration.Speed.Very_High_Speed,
			GPIO_Configuration.Pull.Pull_Down,
			GPIO_Configuration.Alternate_Functions.None);
	GPIO_Pin_Init(GPIOD, 15, GPIO_Configuration.Mode.General_Purpose_Output,
 8004180:	9502      	str	r5, [sp, #8]
 8004182:	f8cd 8004 	str.w	r8, [sp, #4]
 8004186:	9600      	str	r6, [sp, #0]
 8004188:	462b      	mov	r3, r5
 800418a:	2201      	movs	r2, #1
 800418c:	210f      	movs	r1, #15
 800418e:	4638      	mov	r0, r7
 8004190:	f7fe fe0a 	bl	8002da8 <GPIO_Pin_Init>
			GPIO_Configuration.Speed.Very_High_Speed,
			GPIO_Configuration.Pull.Pull_Down,
			GPIO_Configuration.Alternate_Functions.None);


	thermistor_config.Channel_0.Enable = ADC_Configuration.Channel.Enable.Enable;
 8004194:	4c45      	ldr	r4, [pc, #276]	@ (80042ac <main+0x194>)
 8004196:	2301      	movs	r3, #1
 8004198:	72a3      	strb	r3, [r4, #10]
	thermistor_config.Channel_0.Sample_Time = ADC_Configuration.Channel.Sample_Time._56_Cycles;
 800419a:	7326      	strb	r6, [r4, #12]
	thermistor_config.Channel_0.Sequence_Number = ADC_Configuration.Channel.Sequence_Number.Sequence_1;
 800419c:	72e5      	strb	r5, [r4, #11]

	thermistor_config.Channel_1.Enable = ADC_Configuration.Channel.Enable.Enable;
 800419e:	7363      	strb	r3, [r4, #13]
	thermistor_config.Channel_1.Sample_Time = ADC_Configuration.Channel.Sample_Time._56_Cycles;
 80041a0:	73e6      	strb	r6, [r4, #15]
	thermistor_config.Channel_1.Sequence_Number = ADC_Configuration.Channel.Sequence_Number.Sequence_2;
 80041a2:	73a3      	strb	r3, [r4, #14]

	thermistor_config.Channel_2.Enable = ADC_Configuration.Channel.Enable.Enable;
 80041a4:	7423      	strb	r3, [r4, #16]
	thermistor_config.Channel_2.Sample_Time = ADC_Configuration.Channel.Sample_Time._56_Cycles;
 80041a6:	74a6      	strb	r6, [r4, #18]
	thermistor_config.Channel_2.Sequence_Number = ADC_Configuration.Channel.Sequence_Number.Sequence_3;
 80041a8:	f884 8011 	strb.w	r8, [r4, #17]

	thermistor_config.Channel_3.Enable = ADC_Configuration.Channel.Enable.Enable;
 80041ac:	74e3      	strb	r3, [r4, #19]
	thermistor_config.Channel_3.Sample_Time = ADC_Configuration.Channel.Sample_Time._56_Cycles;
 80041ae:	7566      	strb	r6, [r4, #21]
	thermistor_config.Channel_3.Sequence_Number = ADC_Configuration.Channel.Sequence_Number.Sequence_4;
 80041b0:	7526      	strb	r6, [r4, #20]

	thermistor_config.Channel_4.Enable = ADC_Configuration.Channel.Enable.Enable;
 80041b2:	75a3      	strb	r3, [r4, #22]
	thermistor_config.Channel_4.Sample_Time = ADC_Configuration.Channel.Sample_Time._56_Cycles;
 80041b4:	7626      	strb	r6, [r4, #24]
	thermistor_config.Channel_4.Sequence_Number = ADC_Configuration.Channel.Sequence_Number.Sequence_5;
 80041b6:	2204      	movs	r2, #4
 80041b8:	75e2      	strb	r2, [r4, #23]

	thermistor_config.Port = ADC_Configuration.Port._ADC1_;
 80041ba:	4a3d      	ldr	r2, [pc, #244]	@ (80042b0 <main+0x198>)
 80041bc:	6022      	str	r2, [r4, #0]
	thermistor_config.Channel_Type = ADC_Configuration.Channel_Type.Regular;
 80041be:	71a5      	strb	r5, [r4, #6]
	thermistor_config.Conversion_Mode = ADC_Configuration.Conversion_Mode.Single;
 80041c0:	7163      	strb	r3, [r4, #5]
	thermistor_config.Data_Alignment = ADC_Configuration.Data_Alignment.Right_Justified;
 80041c2:	7125      	strb	r5, [r4, #4]
	thermistor_config.Resolution = ADC_Configuration.Resolution.Bit_12;
 80041c4:	f884 503a 	strb.w	r5, [r4, #58]	@ 0x3a
	thermistor_config.Watchdog_Analog.Enable = ADC_Configuration._Watchdog_Analog_.Disable;
 80041c8:	f884 503c 	strb.w	r5, [r4, #60]	@ 0x3c
	thermistor_config.External_Trigger.Enable = ADC_Configuration.Regular_External_Trigger_Enable.Trigger_On_Rising_Edge;
 80041cc:	71e3      	strb	r3, [r4, #7]
	thermistor_config.External_Trigger.Sampling_Frequency = 100;
 80041ce:	2364      	movs	r3, #100	@ 0x64
 80041d0:	7263      	strb	r3, [r4, #9]
	thermistor_config.External_Trigger.Trigger_Event = ADC_Configuration.Regular_External_Trigger_Event.Timer_2_CC2;
 80041d2:	7226      	strb	r6, [r4, #8]

	ADC_Init(&thermistor_config);
 80041d4:	4620      	mov	r0, r4
 80041d6:	f7fd f963 	bl	80014a0 <ADC_Init>
	ADC_Start_Capture(&thermistor_config, (uint16_t*)&thermistor_buffer);
 80041da:	4936      	ldr	r1, [pc, #216]	@ (80042b4 <main+0x19c>)
 80041dc:	4620      	mov	r0, r4
 80041de:	f7fd fa43 	bl	8001668 <ADC_Start_Capture>
}


__STATIC_INLINE  void GPIO_Pin_Toggle(GPIO_TypeDef *Port, int pin)
{
	Port -> ODR ^= (1 << pin);
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80041e8:	617b      	str	r3, [r7, #20]
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	f483 4380 	eor.w	r3, r3, #16384	@ 0x4000
 80041f0:	617b      	str	r3, [r7, #20]



	for(;;)
	{
		thermistor[0] = Thermistor_GetTempC(thermistor_buffer[0]);
 80041f2:	4d30      	ldr	r5, [pc, #192]	@ (80042b4 <main+0x19c>)
 80041f4:	8828      	ldrh	r0, [r5, #0]
 80041f6:	b280      	uxth	r0, r0
 80041f8:	f7ff ff54 	bl	80040a4 <Thermistor_GetTempC>
 80041fc:	4c2e      	ldr	r4, [pc, #184]	@ (80042b8 <main+0x1a0>)
 80041fe:	ed84 0a00 	vstr	s0, [r4]
		thermistor[1] = Thermistor_GetTempC(thermistor_buffer[1]);
 8004202:	8868      	ldrh	r0, [r5, #2]
 8004204:	b280      	uxth	r0, r0
 8004206:	f7ff ff4d 	bl	80040a4 <Thermistor_GetTempC>
 800420a:	ed84 0a01 	vstr	s0, [r4, #4]
		thermistor[2] = Thermistor_GetTempC(thermistor_buffer[2]);
 800420e:	88a8      	ldrh	r0, [r5, #4]
 8004210:	b280      	uxth	r0, r0
 8004212:	f7ff ff47 	bl	80040a4 <Thermistor_GetTempC>
 8004216:	ed84 0a02 	vstr	s0, [r4, #8]
		thermistor[3] = Thermistor_GetTempC(thermistor_buffer[3]);
 800421a:	88e8      	ldrh	r0, [r5, #6]
 800421c:	b280      	uxth	r0, r0
 800421e:	f7ff ff41 	bl	80040a4 <Thermistor_GetTempC>
 8004222:	ed84 0a03 	vstr	s0, [r4, #12]
		thermistor[4] = Thermistor_GetTempC(thermistor_buffer[4]);
 8004226:	8928      	ldrh	r0, [r5, #8]
 8004228:	b280      	uxth	r0, r0
 800422a:	f7ff ff3b 	bl	80040a4 <Thermistor_GetTempC>
 800422e:	ed84 0a04 	vstr	s0, [r4, #16]



		printConsole("%f, %f, %f, %f, %f \r\n",thermistor[0],thermistor[1],thermistor[2],thermistor[3],
 8004232:	6820      	ldr	r0, [r4, #0]
 8004234:	6866      	ldr	r6, [r4, #4]
 8004236:	68a7      	ldr	r7, [r4, #8]
 8004238:	f8d4 800c 	ldr.w	r8, [r4, #12]
				thermistor[4]);
 800423c:	f8d4 9010 	ldr.w	r9, [r4, #16]
		printConsole("%f, %f, %f, %f, %f \r\n",thermistor[0],thermistor[1],thermistor[2],thermistor[3],
 8004240:	f7fc f982 	bl	8000548 <__aeabi_f2d>
 8004244:	4604      	mov	r4, r0
 8004246:	460d      	mov	r5, r1
 8004248:	4648      	mov	r0, r9
 800424a:	f7fc f97d 	bl	8000548 <__aeabi_f2d>
 800424e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004252:	4640      	mov	r0, r8
 8004254:	f7fc f978 	bl	8000548 <__aeabi_f2d>
 8004258:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800425c:	4638      	mov	r0, r7
 800425e:	f7fc f973 	bl	8000548 <__aeabi_f2d>
 8004262:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004266:	4630      	mov	r0, r6
 8004268:	f7fc f96e 	bl	8000548 <__aeabi_f2d>
 800426c:	e9cd 0100 	strd	r0, r1, [sp]
 8004270:	4622      	mov	r2, r4
 8004272:	462b      	mov	r3, r5
 8004274:	4811      	ldr	r0, [pc, #68]	@ (80042bc <main+0x1a4>)
 8004276:	f7fd fa73 	bl	8001760 <printConsole>
 800427a:	4b0b      	ldr	r3, [pc, #44]	@ (80042a8 <main+0x190>)
 800427c:	695a      	ldr	r2, [r3, #20]
 800427e:	f482 5280 	eor.w	r2, r2, #4096	@ 0x1000
 8004282:	615a      	str	r2, [r3, #20]
 8004284:	695a      	ldr	r2, [r3, #20]
 8004286:	f482 5200 	eor.w	r2, r2, #8192	@ 0x2000
 800428a:	615a      	str	r2, [r3, #20]
 800428c:	695a      	ldr	r2, [r3, #20]
 800428e:	f482 4280 	eor.w	r2, r2, #16384	@ 0x4000
 8004292:	615a      	str	r2, [r3, #20]
 8004294:	695a      	ldr	r2, [r3, #20]
 8004296:	f482 4200 	eor.w	r2, r2, #32768	@ 0x8000
 800429a:	615a      	str	r2, [r3, #20]

		GPIO_Pin_Toggle(GPIOD, 12);
		GPIO_Pin_Toggle(GPIOD, 13);
		GPIO_Pin_Toggle(GPIOD, 14);
		GPIO_Pin_Toggle(GPIOD, 15);
		Delay_milli(100);
 800429c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80042c0 <main+0x1a8>
 80042a0:	f7ff fe76 	bl	8003f90 <Delay_milli>
	for(;;)
 80042a4:	e7a5      	b.n	80041f2 <main+0xda>
 80042a6:	bf00      	nop
 80042a8:	40020c00 	.word	0x40020c00
 80042ac:	200008ec 	.word	0x200008ec
 80042b0:	40012000 	.word	0x40012000
 80042b4:	200008e0 	.word	0x200008e0
 80042b8:	200008cc 	.word	0x200008cc
 80042bc:	08007cc0 	.word	0x08007cc0
 80042c0:	42c80000 	.word	0x42c80000

080042c4 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80042c4:	2001      	movs	r0, #1
 80042c6:	4770      	bx	lr

080042c8 <_kill>:

int _kill(int pid, int sig)
{
 80042c8:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80042ca:	f000 fec5 	bl	8005058 <__errno>
 80042ce:	2316      	movs	r3, #22
 80042d0:	6003      	str	r3, [r0, #0]
  return -1;
}
 80042d2:	f04f 30ff 	mov.w	r0, #4294967295
 80042d6:	bd08      	pop	{r3, pc}

080042d8 <_exit>:

void _exit (int status)
{
 80042d8:	b508      	push	{r3, lr}
  _kill(status, -1);
 80042da:	f04f 31ff 	mov.w	r1, #4294967295
 80042de:	f7ff fff3 	bl	80042c8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80042e2:	e7fe      	b.n	80042e2 <_exit+0xa>

080042e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80042e4:	b570      	push	{r4, r5, r6, lr}
 80042e6:	460c      	mov	r4, r1
 80042e8:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042ea:	2500      	movs	r5, #0
 80042ec:	e006      	b.n	80042fc <_read+0x18>
  {
    *ptr++ = __io_getchar();
 80042ee:	f3af 8000 	nop.w
 80042f2:	4621      	mov	r1, r4
 80042f4:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042f8:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 80042fa:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042fc:	42b5      	cmp	r5, r6
 80042fe:	dbf6      	blt.n	80042ee <_read+0xa>
  }

  return len;
}
 8004300:	4630      	mov	r0, r6
 8004302:	bd70      	pop	{r4, r5, r6, pc}

08004304 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004304:	b570      	push	{r4, r5, r6, lr}
 8004306:	460c      	mov	r4, r1
 8004308:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800430a:	2500      	movs	r5, #0
 800430c:	e004      	b.n	8004318 <_write+0x14>
  {
    __io_putchar(*ptr++);
 800430e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8004312:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004316:	3501      	adds	r5, #1
 8004318:	42b5      	cmp	r5, r6
 800431a:	dbf8      	blt.n	800430e <_write+0xa>
  }
  return len;
}
 800431c:	4630      	mov	r0, r6
 800431e:	bd70      	pop	{r4, r5, r6, pc}

08004320 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8004320:	f04f 30ff 	mov.w	r0, #4294967295
 8004324:	4770      	bx	lr

08004326 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8004326:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800432a:	604b      	str	r3, [r1, #4]
  return 0;
}
 800432c:	2000      	movs	r0, #0
 800432e:	4770      	bx	lr

08004330 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8004330:	2001      	movs	r0, #1
 8004332:	4770      	bx	lr

08004334 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8004334:	2000      	movs	r0, #0
 8004336:	4770      	bx	lr

08004338 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004338:	b510      	push	{r4, lr}
 800433a:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800433c:	4a0c      	ldr	r2, [pc, #48]	@ (8004370 <_sbrk+0x38>)
 800433e:	490d      	ldr	r1, [pc, #52]	@ (8004374 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004340:	480d      	ldr	r0, [pc, #52]	@ (8004378 <_sbrk+0x40>)
 8004342:	6800      	ldr	r0, [r0, #0]
 8004344:	b140      	cbz	r0, 8004358 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004346:	480c      	ldr	r0, [pc, #48]	@ (8004378 <_sbrk+0x40>)
 8004348:	6800      	ldr	r0, [r0, #0]
 800434a:	4403      	add	r3, r0
 800434c:	1a52      	subs	r2, r2, r1
 800434e:	4293      	cmp	r3, r2
 8004350:	d806      	bhi.n	8004360 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8004352:	4a09      	ldr	r2, [pc, #36]	@ (8004378 <_sbrk+0x40>)
 8004354:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8004356:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8004358:	4807      	ldr	r0, [pc, #28]	@ (8004378 <_sbrk+0x40>)
 800435a:	4c08      	ldr	r4, [pc, #32]	@ (800437c <_sbrk+0x44>)
 800435c:	6004      	str	r4, [r0, #0]
 800435e:	e7f2      	b.n	8004346 <_sbrk+0xe>
    errno = ENOMEM;
 8004360:	f000 fe7a 	bl	8005058 <__errno>
 8004364:	230c      	movs	r3, #12
 8004366:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8004368:	f04f 30ff 	mov.w	r0, #4294967295
 800436c:	e7f3      	b.n	8004356 <_sbrk+0x1e>
 800436e:	bf00      	nop
 8004370:	20020000 	.word	0x20020000
 8004374:	00000400 	.word	0x00000400
 8004378:	20000930 	.word	0x20000930
 800437c:	20000a80 	.word	0x20000a80

08004380 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004380:	4a03      	ldr	r2, [pc, #12]	@ (8004390 <SystemInit+0x10>)
 8004382:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8004386:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800438a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800438e:	4770      	bx	lr
 8004390:	e000ed00 	.word	0xe000ed00

08004394 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8004394:	4b22      	ldr	r3, [pc, #136]	@ (8004420 <SystemCoreClockUpdate+0x8c>)
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f003 030c 	and.w	r3, r3, #12

  switch (tmp)
 800439c:	2b04      	cmp	r3, #4
 800439e:	d011      	beq.n	80043c4 <SystemCoreClockUpdate+0x30>
 80043a0:	2b08      	cmp	r3, #8
 80043a2:	d013      	beq.n	80043cc <SystemCoreClockUpdate+0x38>
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d137      	bne.n	8004418 <SystemCoreClockUpdate+0x84>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80043a8:	4b1e      	ldr	r3, [pc, #120]	@ (8004424 <SystemCoreClockUpdate+0x90>)
 80043aa:	4a1f      	ldr	r2, [pc, #124]	@ (8004428 <SystemCoreClockUpdate+0x94>)
 80043ac:	601a      	str	r2, [r3, #0]
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80043ae:	4b1c      	ldr	r3, [pc, #112]	@ (8004420 <SystemCoreClockUpdate+0x8c>)
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80043b6:	4a1d      	ldr	r2, [pc, #116]	@ (800442c <SystemCoreClockUpdate+0x98>)
 80043b8:	5cd1      	ldrb	r1, [r2, r3]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80043ba:	4a1a      	ldr	r2, [pc, #104]	@ (8004424 <SystemCoreClockUpdate+0x90>)
 80043bc:	6813      	ldr	r3, [r2, #0]
 80043be:	40cb      	lsrs	r3, r1
 80043c0:	6013      	str	r3, [r2, #0]
}
 80043c2:	4770      	bx	lr
      SystemCoreClock = HSE_VALUE;
 80043c4:	4b17      	ldr	r3, [pc, #92]	@ (8004424 <SystemCoreClockUpdate+0x90>)
 80043c6:	4a1a      	ldr	r2, [pc, #104]	@ (8004430 <SystemCoreClockUpdate+0x9c>)
 80043c8:	601a      	str	r2, [r3, #0]
      break;
 80043ca:	e7f0      	b.n	80043ae <SystemCoreClockUpdate+0x1a>
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80043cc:	4b14      	ldr	r3, [pc, #80]	@ (8004420 <SystemCoreClockUpdate+0x8c>)
 80043ce:	6859      	ldr	r1, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043d0:	685a      	ldr	r2, [r3, #4]
 80043d2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (pllsource != 0)
 80043d6:	f411 0f80 	tst.w	r1, #4194304	@ 0x400000
 80043da:	d013      	beq.n	8004404 <SystemCoreClockUpdate+0x70>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80043dc:	4b14      	ldr	r3, [pc, #80]	@ (8004430 <SystemCoreClockUpdate+0x9c>)
 80043de:	fbb3 f3f2 	udiv	r3, r3, r2
 80043e2:	4a0f      	ldr	r2, [pc, #60]	@ (8004420 <SystemCoreClockUpdate+0x8c>)
 80043e4:	6852      	ldr	r2, [r2, #4]
 80043e6:	f3c2 1288 	ubfx	r2, r2, #6, #9
 80043ea:	fb02 f303 	mul.w	r3, r2, r3
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80043ee:	4a0c      	ldr	r2, [pc, #48]	@ (8004420 <SystemCoreClockUpdate+0x8c>)
 80043f0:	6852      	ldr	r2, [r2, #4]
 80043f2:	f3c2 4201 	ubfx	r2, r2, #16, #2
 80043f6:	3201      	adds	r2, #1
 80043f8:	0052      	lsls	r2, r2, #1
      SystemCoreClock = pllvco/pllp;
 80043fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80043fe:	4a09      	ldr	r2, [pc, #36]	@ (8004424 <SystemCoreClockUpdate+0x90>)
 8004400:	6013      	str	r3, [r2, #0]
      break;
 8004402:	e7d4      	b.n	80043ae <SystemCoreClockUpdate+0x1a>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8004404:	4b08      	ldr	r3, [pc, #32]	@ (8004428 <SystemCoreClockUpdate+0x94>)
 8004406:	fbb3 f3f2 	udiv	r3, r3, r2
 800440a:	4a05      	ldr	r2, [pc, #20]	@ (8004420 <SystemCoreClockUpdate+0x8c>)
 800440c:	6852      	ldr	r2, [r2, #4]
 800440e:	f3c2 1288 	ubfx	r2, r2, #6, #9
 8004412:	fb02 f303 	mul.w	r3, r2, r3
 8004416:	e7ea      	b.n	80043ee <SystemCoreClockUpdate+0x5a>
      SystemCoreClock = HSI_VALUE;
 8004418:	4b02      	ldr	r3, [pc, #8]	@ (8004424 <SystemCoreClockUpdate+0x90>)
 800441a:	4a03      	ldr	r2, [pc, #12]	@ (8004428 <SystemCoreClockUpdate+0x94>)
 800441c:	601a      	str	r2, [r3, #0]
      break;
 800441e:	e7c6      	b.n	80043ae <SystemCoreClockUpdate+0x1a>
 8004420:	40023800 	.word	0x40023800
 8004424:	20000000 	.word	0x20000000
 8004428:	00f42400 	.word	0x00f42400
 800442c:	08007ce0 	.word	0x08007ce0
 8004430:	007a1200 	.word	0x007a1200

08004434 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004434:	480d      	ldr	r0, [pc, #52]	@ (800446c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004436:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004438:	f7ff ffa2 	bl	8004380 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800443c:	480c      	ldr	r0, [pc, #48]	@ (8004470 <LoopForever+0x6>)
  ldr r1, =_edata
 800443e:	490d      	ldr	r1, [pc, #52]	@ (8004474 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004440:	4a0d      	ldr	r2, [pc, #52]	@ (8004478 <LoopForever+0xe>)
  movs r3, #0
 8004442:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004444:	e002      	b.n	800444c <LoopCopyDataInit>

08004446 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004446:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004448:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800444a:	3304      	adds	r3, #4

0800444c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800444c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800444e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004450:	d3f9      	bcc.n	8004446 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004452:	4a0a      	ldr	r2, [pc, #40]	@ (800447c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004454:	4c0a      	ldr	r4, [pc, #40]	@ (8004480 <LoopForever+0x16>)
  movs r3, #0
 8004456:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004458:	e001      	b.n	800445e <LoopFillZerobss>

0800445a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800445a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800445c:	3204      	adds	r2, #4

0800445e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800445e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004460:	d3fb      	bcc.n	800445a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004462:	f000 fdff 	bl	8005064 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004466:	f7ff fe57 	bl	8004118 <main>

0800446a <LoopForever>:

LoopForever:
  b LoopForever
 800446a:	e7fe      	b.n	800446a <LoopForever>
  ldr   r0, =_estack
 800446c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004470:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004474:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 8004478:	08008074 	.word	0x08008074
  ldr r2, =_sbss
 800447c:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8004480:	20000a80 	.word	0x20000a80

08004484 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004484:	e7fe      	b.n	8004484 <ADC_IRQHandler>

08004486 <__cvt>:
 8004486:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800448a:	ec57 6b10 	vmov	r6, r7, d0
 800448e:	2f00      	cmp	r7, #0
 8004490:	460c      	mov	r4, r1
 8004492:	4619      	mov	r1, r3
 8004494:	463b      	mov	r3, r7
 8004496:	bfbb      	ittet	lt
 8004498:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800449c:	461f      	movlt	r7, r3
 800449e:	2300      	movge	r3, #0
 80044a0:	232d      	movlt	r3, #45	@ 0x2d
 80044a2:	700b      	strb	r3, [r1, #0]
 80044a4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80044a6:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80044aa:	4691      	mov	r9, r2
 80044ac:	f023 0820 	bic.w	r8, r3, #32
 80044b0:	bfbc      	itt	lt
 80044b2:	4632      	movlt	r2, r6
 80044b4:	4616      	movlt	r6, r2
 80044b6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80044ba:	d005      	beq.n	80044c8 <__cvt+0x42>
 80044bc:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80044c0:	d100      	bne.n	80044c4 <__cvt+0x3e>
 80044c2:	3401      	adds	r4, #1
 80044c4:	2102      	movs	r1, #2
 80044c6:	e000      	b.n	80044ca <__cvt+0x44>
 80044c8:	2103      	movs	r1, #3
 80044ca:	ab03      	add	r3, sp, #12
 80044cc:	9301      	str	r3, [sp, #4]
 80044ce:	ab02      	add	r3, sp, #8
 80044d0:	9300      	str	r3, [sp, #0]
 80044d2:	ec47 6b10 	vmov	d0, r6, r7
 80044d6:	4653      	mov	r3, sl
 80044d8:	4622      	mov	r2, r4
 80044da:	f000 fe81 	bl	80051e0 <_dtoa_r>
 80044de:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80044e2:	4605      	mov	r5, r0
 80044e4:	d119      	bne.n	800451a <__cvt+0x94>
 80044e6:	f019 0f01 	tst.w	r9, #1
 80044ea:	d00e      	beq.n	800450a <__cvt+0x84>
 80044ec:	eb00 0904 	add.w	r9, r0, r4
 80044f0:	2200      	movs	r2, #0
 80044f2:	2300      	movs	r3, #0
 80044f4:	4630      	mov	r0, r6
 80044f6:	4639      	mov	r1, r7
 80044f8:	f7fc fae6 	bl	8000ac8 <__aeabi_dcmpeq>
 80044fc:	b108      	cbz	r0, 8004502 <__cvt+0x7c>
 80044fe:	f8cd 900c 	str.w	r9, [sp, #12]
 8004502:	2230      	movs	r2, #48	@ 0x30
 8004504:	9b03      	ldr	r3, [sp, #12]
 8004506:	454b      	cmp	r3, r9
 8004508:	d31e      	bcc.n	8004548 <__cvt+0xc2>
 800450a:	9b03      	ldr	r3, [sp, #12]
 800450c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800450e:	1b5b      	subs	r3, r3, r5
 8004510:	4628      	mov	r0, r5
 8004512:	6013      	str	r3, [r2, #0]
 8004514:	b004      	add	sp, #16
 8004516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800451a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800451e:	eb00 0904 	add.w	r9, r0, r4
 8004522:	d1e5      	bne.n	80044f0 <__cvt+0x6a>
 8004524:	7803      	ldrb	r3, [r0, #0]
 8004526:	2b30      	cmp	r3, #48	@ 0x30
 8004528:	d10a      	bne.n	8004540 <__cvt+0xba>
 800452a:	2200      	movs	r2, #0
 800452c:	2300      	movs	r3, #0
 800452e:	4630      	mov	r0, r6
 8004530:	4639      	mov	r1, r7
 8004532:	f7fc fac9 	bl	8000ac8 <__aeabi_dcmpeq>
 8004536:	b918      	cbnz	r0, 8004540 <__cvt+0xba>
 8004538:	f1c4 0401 	rsb	r4, r4, #1
 800453c:	f8ca 4000 	str.w	r4, [sl]
 8004540:	f8da 3000 	ldr.w	r3, [sl]
 8004544:	4499      	add	r9, r3
 8004546:	e7d3      	b.n	80044f0 <__cvt+0x6a>
 8004548:	1c59      	adds	r1, r3, #1
 800454a:	9103      	str	r1, [sp, #12]
 800454c:	701a      	strb	r2, [r3, #0]
 800454e:	e7d9      	b.n	8004504 <__cvt+0x7e>

08004550 <__exponent>:
 8004550:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004552:	2900      	cmp	r1, #0
 8004554:	bfba      	itte	lt
 8004556:	4249      	neglt	r1, r1
 8004558:	232d      	movlt	r3, #45	@ 0x2d
 800455a:	232b      	movge	r3, #43	@ 0x2b
 800455c:	2909      	cmp	r1, #9
 800455e:	7002      	strb	r2, [r0, #0]
 8004560:	7043      	strb	r3, [r0, #1]
 8004562:	dd29      	ble.n	80045b8 <__exponent+0x68>
 8004564:	f10d 0307 	add.w	r3, sp, #7
 8004568:	461d      	mov	r5, r3
 800456a:	270a      	movs	r7, #10
 800456c:	461a      	mov	r2, r3
 800456e:	fbb1 f6f7 	udiv	r6, r1, r7
 8004572:	fb07 1416 	mls	r4, r7, r6, r1
 8004576:	3430      	adds	r4, #48	@ 0x30
 8004578:	f802 4c01 	strb.w	r4, [r2, #-1]
 800457c:	460c      	mov	r4, r1
 800457e:	2c63      	cmp	r4, #99	@ 0x63
 8004580:	f103 33ff 	add.w	r3, r3, #4294967295
 8004584:	4631      	mov	r1, r6
 8004586:	dcf1      	bgt.n	800456c <__exponent+0x1c>
 8004588:	3130      	adds	r1, #48	@ 0x30
 800458a:	1e94      	subs	r4, r2, #2
 800458c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004590:	1c41      	adds	r1, r0, #1
 8004592:	4623      	mov	r3, r4
 8004594:	42ab      	cmp	r3, r5
 8004596:	d30a      	bcc.n	80045ae <__exponent+0x5e>
 8004598:	f10d 0309 	add.w	r3, sp, #9
 800459c:	1a9b      	subs	r3, r3, r2
 800459e:	42ac      	cmp	r4, r5
 80045a0:	bf88      	it	hi
 80045a2:	2300      	movhi	r3, #0
 80045a4:	3302      	adds	r3, #2
 80045a6:	4403      	add	r3, r0
 80045a8:	1a18      	subs	r0, r3, r0
 80045aa:	b003      	add	sp, #12
 80045ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045ae:	f813 6b01 	ldrb.w	r6, [r3], #1
 80045b2:	f801 6f01 	strb.w	r6, [r1, #1]!
 80045b6:	e7ed      	b.n	8004594 <__exponent+0x44>
 80045b8:	2330      	movs	r3, #48	@ 0x30
 80045ba:	3130      	adds	r1, #48	@ 0x30
 80045bc:	7083      	strb	r3, [r0, #2]
 80045be:	70c1      	strb	r1, [r0, #3]
 80045c0:	1d03      	adds	r3, r0, #4
 80045c2:	e7f1      	b.n	80045a8 <__exponent+0x58>

080045c4 <_printf_float>:
 80045c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045c8:	b08d      	sub	sp, #52	@ 0x34
 80045ca:	460c      	mov	r4, r1
 80045cc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80045d0:	4616      	mov	r6, r2
 80045d2:	461f      	mov	r7, r3
 80045d4:	4605      	mov	r5, r0
 80045d6:	f000 fcf5 	bl	8004fc4 <_localeconv_r>
 80045da:	6803      	ldr	r3, [r0, #0]
 80045dc:	9304      	str	r3, [sp, #16]
 80045de:	4618      	mov	r0, r3
 80045e0:	f7fb fe46 	bl	8000270 <strlen>
 80045e4:	2300      	movs	r3, #0
 80045e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80045e8:	f8d8 3000 	ldr.w	r3, [r8]
 80045ec:	9005      	str	r0, [sp, #20]
 80045ee:	3307      	adds	r3, #7
 80045f0:	f023 0307 	bic.w	r3, r3, #7
 80045f4:	f103 0208 	add.w	r2, r3, #8
 80045f8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80045fc:	f8d4 b000 	ldr.w	fp, [r4]
 8004600:	f8c8 2000 	str.w	r2, [r8]
 8004604:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004608:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800460c:	9307      	str	r3, [sp, #28]
 800460e:	f8cd 8018 	str.w	r8, [sp, #24]
 8004612:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004616:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800461a:	4b9c      	ldr	r3, [pc, #624]	@ (800488c <_printf_float+0x2c8>)
 800461c:	f04f 32ff 	mov.w	r2, #4294967295
 8004620:	f7fc fa84 	bl	8000b2c <__aeabi_dcmpun>
 8004624:	bb70      	cbnz	r0, 8004684 <_printf_float+0xc0>
 8004626:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800462a:	4b98      	ldr	r3, [pc, #608]	@ (800488c <_printf_float+0x2c8>)
 800462c:	f04f 32ff 	mov.w	r2, #4294967295
 8004630:	f7fc fa5e 	bl	8000af0 <__aeabi_dcmple>
 8004634:	bb30      	cbnz	r0, 8004684 <_printf_float+0xc0>
 8004636:	2200      	movs	r2, #0
 8004638:	2300      	movs	r3, #0
 800463a:	4640      	mov	r0, r8
 800463c:	4649      	mov	r1, r9
 800463e:	f7fc fa4d 	bl	8000adc <__aeabi_dcmplt>
 8004642:	b110      	cbz	r0, 800464a <_printf_float+0x86>
 8004644:	232d      	movs	r3, #45	@ 0x2d
 8004646:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800464a:	4a91      	ldr	r2, [pc, #580]	@ (8004890 <_printf_float+0x2cc>)
 800464c:	4b91      	ldr	r3, [pc, #580]	@ (8004894 <_printf_float+0x2d0>)
 800464e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004652:	bf8c      	ite	hi
 8004654:	4690      	movhi	r8, r2
 8004656:	4698      	movls	r8, r3
 8004658:	2303      	movs	r3, #3
 800465a:	6123      	str	r3, [r4, #16]
 800465c:	f02b 0304 	bic.w	r3, fp, #4
 8004660:	6023      	str	r3, [r4, #0]
 8004662:	f04f 0900 	mov.w	r9, #0
 8004666:	9700      	str	r7, [sp, #0]
 8004668:	4633      	mov	r3, r6
 800466a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800466c:	4621      	mov	r1, r4
 800466e:	4628      	mov	r0, r5
 8004670:	f000 f9d2 	bl	8004a18 <_printf_common>
 8004674:	3001      	adds	r0, #1
 8004676:	f040 808d 	bne.w	8004794 <_printf_float+0x1d0>
 800467a:	f04f 30ff 	mov.w	r0, #4294967295
 800467e:	b00d      	add	sp, #52	@ 0x34
 8004680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004684:	4642      	mov	r2, r8
 8004686:	464b      	mov	r3, r9
 8004688:	4640      	mov	r0, r8
 800468a:	4649      	mov	r1, r9
 800468c:	f7fc fa4e 	bl	8000b2c <__aeabi_dcmpun>
 8004690:	b140      	cbz	r0, 80046a4 <_printf_float+0xe0>
 8004692:	464b      	mov	r3, r9
 8004694:	2b00      	cmp	r3, #0
 8004696:	bfbc      	itt	lt
 8004698:	232d      	movlt	r3, #45	@ 0x2d
 800469a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800469e:	4a7e      	ldr	r2, [pc, #504]	@ (8004898 <_printf_float+0x2d4>)
 80046a0:	4b7e      	ldr	r3, [pc, #504]	@ (800489c <_printf_float+0x2d8>)
 80046a2:	e7d4      	b.n	800464e <_printf_float+0x8a>
 80046a4:	6863      	ldr	r3, [r4, #4]
 80046a6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80046aa:	9206      	str	r2, [sp, #24]
 80046ac:	1c5a      	adds	r2, r3, #1
 80046ae:	d13b      	bne.n	8004728 <_printf_float+0x164>
 80046b0:	2306      	movs	r3, #6
 80046b2:	6063      	str	r3, [r4, #4]
 80046b4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80046b8:	2300      	movs	r3, #0
 80046ba:	6022      	str	r2, [r4, #0]
 80046bc:	9303      	str	r3, [sp, #12]
 80046be:	ab0a      	add	r3, sp, #40	@ 0x28
 80046c0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80046c4:	ab09      	add	r3, sp, #36	@ 0x24
 80046c6:	9300      	str	r3, [sp, #0]
 80046c8:	6861      	ldr	r1, [r4, #4]
 80046ca:	ec49 8b10 	vmov	d0, r8, r9
 80046ce:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80046d2:	4628      	mov	r0, r5
 80046d4:	f7ff fed7 	bl	8004486 <__cvt>
 80046d8:	9b06      	ldr	r3, [sp, #24]
 80046da:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80046dc:	2b47      	cmp	r3, #71	@ 0x47
 80046de:	4680      	mov	r8, r0
 80046e0:	d129      	bne.n	8004736 <_printf_float+0x172>
 80046e2:	1cc8      	adds	r0, r1, #3
 80046e4:	db02      	blt.n	80046ec <_printf_float+0x128>
 80046e6:	6863      	ldr	r3, [r4, #4]
 80046e8:	4299      	cmp	r1, r3
 80046ea:	dd41      	ble.n	8004770 <_printf_float+0x1ac>
 80046ec:	f1aa 0a02 	sub.w	sl, sl, #2
 80046f0:	fa5f fa8a 	uxtb.w	sl, sl
 80046f4:	3901      	subs	r1, #1
 80046f6:	4652      	mov	r2, sl
 80046f8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80046fc:	9109      	str	r1, [sp, #36]	@ 0x24
 80046fe:	f7ff ff27 	bl	8004550 <__exponent>
 8004702:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004704:	1813      	adds	r3, r2, r0
 8004706:	2a01      	cmp	r2, #1
 8004708:	4681      	mov	r9, r0
 800470a:	6123      	str	r3, [r4, #16]
 800470c:	dc02      	bgt.n	8004714 <_printf_float+0x150>
 800470e:	6822      	ldr	r2, [r4, #0]
 8004710:	07d2      	lsls	r2, r2, #31
 8004712:	d501      	bpl.n	8004718 <_printf_float+0x154>
 8004714:	3301      	adds	r3, #1
 8004716:	6123      	str	r3, [r4, #16]
 8004718:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800471c:	2b00      	cmp	r3, #0
 800471e:	d0a2      	beq.n	8004666 <_printf_float+0xa2>
 8004720:	232d      	movs	r3, #45	@ 0x2d
 8004722:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004726:	e79e      	b.n	8004666 <_printf_float+0xa2>
 8004728:	9a06      	ldr	r2, [sp, #24]
 800472a:	2a47      	cmp	r2, #71	@ 0x47
 800472c:	d1c2      	bne.n	80046b4 <_printf_float+0xf0>
 800472e:	2b00      	cmp	r3, #0
 8004730:	d1c0      	bne.n	80046b4 <_printf_float+0xf0>
 8004732:	2301      	movs	r3, #1
 8004734:	e7bd      	b.n	80046b2 <_printf_float+0xee>
 8004736:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800473a:	d9db      	bls.n	80046f4 <_printf_float+0x130>
 800473c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004740:	d118      	bne.n	8004774 <_printf_float+0x1b0>
 8004742:	2900      	cmp	r1, #0
 8004744:	6863      	ldr	r3, [r4, #4]
 8004746:	dd0b      	ble.n	8004760 <_printf_float+0x19c>
 8004748:	6121      	str	r1, [r4, #16]
 800474a:	b913      	cbnz	r3, 8004752 <_printf_float+0x18e>
 800474c:	6822      	ldr	r2, [r4, #0]
 800474e:	07d0      	lsls	r0, r2, #31
 8004750:	d502      	bpl.n	8004758 <_printf_float+0x194>
 8004752:	3301      	adds	r3, #1
 8004754:	440b      	add	r3, r1
 8004756:	6123      	str	r3, [r4, #16]
 8004758:	65a1      	str	r1, [r4, #88]	@ 0x58
 800475a:	f04f 0900 	mov.w	r9, #0
 800475e:	e7db      	b.n	8004718 <_printf_float+0x154>
 8004760:	b913      	cbnz	r3, 8004768 <_printf_float+0x1a4>
 8004762:	6822      	ldr	r2, [r4, #0]
 8004764:	07d2      	lsls	r2, r2, #31
 8004766:	d501      	bpl.n	800476c <_printf_float+0x1a8>
 8004768:	3302      	adds	r3, #2
 800476a:	e7f4      	b.n	8004756 <_printf_float+0x192>
 800476c:	2301      	movs	r3, #1
 800476e:	e7f2      	b.n	8004756 <_printf_float+0x192>
 8004770:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004774:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004776:	4299      	cmp	r1, r3
 8004778:	db05      	blt.n	8004786 <_printf_float+0x1c2>
 800477a:	6823      	ldr	r3, [r4, #0]
 800477c:	6121      	str	r1, [r4, #16]
 800477e:	07d8      	lsls	r0, r3, #31
 8004780:	d5ea      	bpl.n	8004758 <_printf_float+0x194>
 8004782:	1c4b      	adds	r3, r1, #1
 8004784:	e7e7      	b.n	8004756 <_printf_float+0x192>
 8004786:	2900      	cmp	r1, #0
 8004788:	bfd4      	ite	le
 800478a:	f1c1 0202 	rsble	r2, r1, #2
 800478e:	2201      	movgt	r2, #1
 8004790:	4413      	add	r3, r2
 8004792:	e7e0      	b.n	8004756 <_printf_float+0x192>
 8004794:	6823      	ldr	r3, [r4, #0]
 8004796:	055a      	lsls	r2, r3, #21
 8004798:	d407      	bmi.n	80047aa <_printf_float+0x1e6>
 800479a:	6923      	ldr	r3, [r4, #16]
 800479c:	4642      	mov	r2, r8
 800479e:	4631      	mov	r1, r6
 80047a0:	4628      	mov	r0, r5
 80047a2:	47b8      	blx	r7
 80047a4:	3001      	adds	r0, #1
 80047a6:	d12b      	bne.n	8004800 <_printf_float+0x23c>
 80047a8:	e767      	b.n	800467a <_printf_float+0xb6>
 80047aa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80047ae:	f240 80dd 	bls.w	800496c <_printf_float+0x3a8>
 80047b2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80047b6:	2200      	movs	r2, #0
 80047b8:	2300      	movs	r3, #0
 80047ba:	f7fc f985 	bl	8000ac8 <__aeabi_dcmpeq>
 80047be:	2800      	cmp	r0, #0
 80047c0:	d033      	beq.n	800482a <_printf_float+0x266>
 80047c2:	4a37      	ldr	r2, [pc, #220]	@ (80048a0 <_printf_float+0x2dc>)
 80047c4:	2301      	movs	r3, #1
 80047c6:	4631      	mov	r1, r6
 80047c8:	4628      	mov	r0, r5
 80047ca:	47b8      	blx	r7
 80047cc:	3001      	adds	r0, #1
 80047ce:	f43f af54 	beq.w	800467a <_printf_float+0xb6>
 80047d2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80047d6:	4543      	cmp	r3, r8
 80047d8:	db02      	blt.n	80047e0 <_printf_float+0x21c>
 80047da:	6823      	ldr	r3, [r4, #0]
 80047dc:	07d8      	lsls	r0, r3, #31
 80047de:	d50f      	bpl.n	8004800 <_printf_float+0x23c>
 80047e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80047e4:	4631      	mov	r1, r6
 80047e6:	4628      	mov	r0, r5
 80047e8:	47b8      	blx	r7
 80047ea:	3001      	adds	r0, #1
 80047ec:	f43f af45 	beq.w	800467a <_printf_float+0xb6>
 80047f0:	f04f 0900 	mov.w	r9, #0
 80047f4:	f108 38ff 	add.w	r8, r8, #4294967295
 80047f8:	f104 0a1a 	add.w	sl, r4, #26
 80047fc:	45c8      	cmp	r8, r9
 80047fe:	dc09      	bgt.n	8004814 <_printf_float+0x250>
 8004800:	6823      	ldr	r3, [r4, #0]
 8004802:	079b      	lsls	r3, r3, #30
 8004804:	f100 8103 	bmi.w	8004a0e <_printf_float+0x44a>
 8004808:	68e0      	ldr	r0, [r4, #12]
 800480a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800480c:	4298      	cmp	r0, r3
 800480e:	bfb8      	it	lt
 8004810:	4618      	movlt	r0, r3
 8004812:	e734      	b.n	800467e <_printf_float+0xba>
 8004814:	2301      	movs	r3, #1
 8004816:	4652      	mov	r2, sl
 8004818:	4631      	mov	r1, r6
 800481a:	4628      	mov	r0, r5
 800481c:	47b8      	blx	r7
 800481e:	3001      	adds	r0, #1
 8004820:	f43f af2b 	beq.w	800467a <_printf_float+0xb6>
 8004824:	f109 0901 	add.w	r9, r9, #1
 8004828:	e7e8      	b.n	80047fc <_printf_float+0x238>
 800482a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800482c:	2b00      	cmp	r3, #0
 800482e:	dc39      	bgt.n	80048a4 <_printf_float+0x2e0>
 8004830:	4a1b      	ldr	r2, [pc, #108]	@ (80048a0 <_printf_float+0x2dc>)
 8004832:	2301      	movs	r3, #1
 8004834:	4631      	mov	r1, r6
 8004836:	4628      	mov	r0, r5
 8004838:	47b8      	blx	r7
 800483a:	3001      	adds	r0, #1
 800483c:	f43f af1d 	beq.w	800467a <_printf_float+0xb6>
 8004840:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004844:	ea59 0303 	orrs.w	r3, r9, r3
 8004848:	d102      	bne.n	8004850 <_printf_float+0x28c>
 800484a:	6823      	ldr	r3, [r4, #0]
 800484c:	07d9      	lsls	r1, r3, #31
 800484e:	d5d7      	bpl.n	8004800 <_printf_float+0x23c>
 8004850:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004854:	4631      	mov	r1, r6
 8004856:	4628      	mov	r0, r5
 8004858:	47b8      	blx	r7
 800485a:	3001      	adds	r0, #1
 800485c:	f43f af0d 	beq.w	800467a <_printf_float+0xb6>
 8004860:	f04f 0a00 	mov.w	sl, #0
 8004864:	f104 0b1a 	add.w	fp, r4, #26
 8004868:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800486a:	425b      	negs	r3, r3
 800486c:	4553      	cmp	r3, sl
 800486e:	dc01      	bgt.n	8004874 <_printf_float+0x2b0>
 8004870:	464b      	mov	r3, r9
 8004872:	e793      	b.n	800479c <_printf_float+0x1d8>
 8004874:	2301      	movs	r3, #1
 8004876:	465a      	mov	r2, fp
 8004878:	4631      	mov	r1, r6
 800487a:	4628      	mov	r0, r5
 800487c:	47b8      	blx	r7
 800487e:	3001      	adds	r0, #1
 8004880:	f43f aefb 	beq.w	800467a <_printf_float+0xb6>
 8004884:	f10a 0a01 	add.w	sl, sl, #1
 8004888:	e7ee      	b.n	8004868 <_printf_float+0x2a4>
 800488a:	bf00      	nop
 800488c:	7fefffff 	.word	0x7fefffff
 8004890:	08007cf4 	.word	0x08007cf4
 8004894:	08007cf0 	.word	0x08007cf0
 8004898:	08007cfc 	.word	0x08007cfc
 800489c:	08007cf8 	.word	0x08007cf8
 80048a0:	08007d00 	.word	0x08007d00
 80048a4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80048a6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80048aa:	4553      	cmp	r3, sl
 80048ac:	bfa8      	it	ge
 80048ae:	4653      	movge	r3, sl
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	4699      	mov	r9, r3
 80048b4:	dc36      	bgt.n	8004924 <_printf_float+0x360>
 80048b6:	f04f 0b00 	mov.w	fp, #0
 80048ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80048be:	f104 021a 	add.w	r2, r4, #26
 80048c2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80048c4:	9306      	str	r3, [sp, #24]
 80048c6:	eba3 0309 	sub.w	r3, r3, r9
 80048ca:	455b      	cmp	r3, fp
 80048cc:	dc31      	bgt.n	8004932 <_printf_float+0x36e>
 80048ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80048d0:	459a      	cmp	sl, r3
 80048d2:	dc3a      	bgt.n	800494a <_printf_float+0x386>
 80048d4:	6823      	ldr	r3, [r4, #0]
 80048d6:	07da      	lsls	r2, r3, #31
 80048d8:	d437      	bmi.n	800494a <_printf_float+0x386>
 80048da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80048dc:	ebaa 0903 	sub.w	r9, sl, r3
 80048e0:	9b06      	ldr	r3, [sp, #24]
 80048e2:	ebaa 0303 	sub.w	r3, sl, r3
 80048e6:	4599      	cmp	r9, r3
 80048e8:	bfa8      	it	ge
 80048ea:	4699      	movge	r9, r3
 80048ec:	f1b9 0f00 	cmp.w	r9, #0
 80048f0:	dc33      	bgt.n	800495a <_printf_float+0x396>
 80048f2:	f04f 0800 	mov.w	r8, #0
 80048f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80048fa:	f104 0b1a 	add.w	fp, r4, #26
 80048fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004900:	ebaa 0303 	sub.w	r3, sl, r3
 8004904:	eba3 0309 	sub.w	r3, r3, r9
 8004908:	4543      	cmp	r3, r8
 800490a:	f77f af79 	ble.w	8004800 <_printf_float+0x23c>
 800490e:	2301      	movs	r3, #1
 8004910:	465a      	mov	r2, fp
 8004912:	4631      	mov	r1, r6
 8004914:	4628      	mov	r0, r5
 8004916:	47b8      	blx	r7
 8004918:	3001      	adds	r0, #1
 800491a:	f43f aeae 	beq.w	800467a <_printf_float+0xb6>
 800491e:	f108 0801 	add.w	r8, r8, #1
 8004922:	e7ec      	b.n	80048fe <_printf_float+0x33a>
 8004924:	4642      	mov	r2, r8
 8004926:	4631      	mov	r1, r6
 8004928:	4628      	mov	r0, r5
 800492a:	47b8      	blx	r7
 800492c:	3001      	adds	r0, #1
 800492e:	d1c2      	bne.n	80048b6 <_printf_float+0x2f2>
 8004930:	e6a3      	b.n	800467a <_printf_float+0xb6>
 8004932:	2301      	movs	r3, #1
 8004934:	4631      	mov	r1, r6
 8004936:	4628      	mov	r0, r5
 8004938:	9206      	str	r2, [sp, #24]
 800493a:	47b8      	blx	r7
 800493c:	3001      	adds	r0, #1
 800493e:	f43f ae9c 	beq.w	800467a <_printf_float+0xb6>
 8004942:	9a06      	ldr	r2, [sp, #24]
 8004944:	f10b 0b01 	add.w	fp, fp, #1
 8004948:	e7bb      	b.n	80048c2 <_printf_float+0x2fe>
 800494a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800494e:	4631      	mov	r1, r6
 8004950:	4628      	mov	r0, r5
 8004952:	47b8      	blx	r7
 8004954:	3001      	adds	r0, #1
 8004956:	d1c0      	bne.n	80048da <_printf_float+0x316>
 8004958:	e68f      	b.n	800467a <_printf_float+0xb6>
 800495a:	9a06      	ldr	r2, [sp, #24]
 800495c:	464b      	mov	r3, r9
 800495e:	4442      	add	r2, r8
 8004960:	4631      	mov	r1, r6
 8004962:	4628      	mov	r0, r5
 8004964:	47b8      	blx	r7
 8004966:	3001      	adds	r0, #1
 8004968:	d1c3      	bne.n	80048f2 <_printf_float+0x32e>
 800496a:	e686      	b.n	800467a <_printf_float+0xb6>
 800496c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004970:	f1ba 0f01 	cmp.w	sl, #1
 8004974:	dc01      	bgt.n	800497a <_printf_float+0x3b6>
 8004976:	07db      	lsls	r3, r3, #31
 8004978:	d536      	bpl.n	80049e8 <_printf_float+0x424>
 800497a:	2301      	movs	r3, #1
 800497c:	4642      	mov	r2, r8
 800497e:	4631      	mov	r1, r6
 8004980:	4628      	mov	r0, r5
 8004982:	47b8      	blx	r7
 8004984:	3001      	adds	r0, #1
 8004986:	f43f ae78 	beq.w	800467a <_printf_float+0xb6>
 800498a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800498e:	4631      	mov	r1, r6
 8004990:	4628      	mov	r0, r5
 8004992:	47b8      	blx	r7
 8004994:	3001      	adds	r0, #1
 8004996:	f43f ae70 	beq.w	800467a <_printf_float+0xb6>
 800499a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800499e:	2200      	movs	r2, #0
 80049a0:	2300      	movs	r3, #0
 80049a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80049a6:	f7fc f88f 	bl	8000ac8 <__aeabi_dcmpeq>
 80049aa:	b9c0      	cbnz	r0, 80049de <_printf_float+0x41a>
 80049ac:	4653      	mov	r3, sl
 80049ae:	f108 0201 	add.w	r2, r8, #1
 80049b2:	4631      	mov	r1, r6
 80049b4:	4628      	mov	r0, r5
 80049b6:	47b8      	blx	r7
 80049b8:	3001      	adds	r0, #1
 80049ba:	d10c      	bne.n	80049d6 <_printf_float+0x412>
 80049bc:	e65d      	b.n	800467a <_printf_float+0xb6>
 80049be:	2301      	movs	r3, #1
 80049c0:	465a      	mov	r2, fp
 80049c2:	4631      	mov	r1, r6
 80049c4:	4628      	mov	r0, r5
 80049c6:	47b8      	blx	r7
 80049c8:	3001      	adds	r0, #1
 80049ca:	f43f ae56 	beq.w	800467a <_printf_float+0xb6>
 80049ce:	f108 0801 	add.w	r8, r8, #1
 80049d2:	45d0      	cmp	r8, sl
 80049d4:	dbf3      	blt.n	80049be <_printf_float+0x3fa>
 80049d6:	464b      	mov	r3, r9
 80049d8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80049dc:	e6df      	b.n	800479e <_printf_float+0x1da>
 80049de:	f04f 0800 	mov.w	r8, #0
 80049e2:	f104 0b1a 	add.w	fp, r4, #26
 80049e6:	e7f4      	b.n	80049d2 <_printf_float+0x40e>
 80049e8:	2301      	movs	r3, #1
 80049ea:	4642      	mov	r2, r8
 80049ec:	e7e1      	b.n	80049b2 <_printf_float+0x3ee>
 80049ee:	2301      	movs	r3, #1
 80049f0:	464a      	mov	r2, r9
 80049f2:	4631      	mov	r1, r6
 80049f4:	4628      	mov	r0, r5
 80049f6:	47b8      	blx	r7
 80049f8:	3001      	adds	r0, #1
 80049fa:	f43f ae3e 	beq.w	800467a <_printf_float+0xb6>
 80049fe:	f108 0801 	add.w	r8, r8, #1
 8004a02:	68e3      	ldr	r3, [r4, #12]
 8004a04:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004a06:	1a5b      	subs	r3, r3, r1
 8004a08:	4543      	cmp	r3, r8
 8004a0a:	dcf0      	bgt.n	80049ee <_printf_float+0x42a>
 8004a0c:	e6fc      	b.n	8004808 <_printf_float+0x244>
 8004a0e:	f04f 0800 	mov.w	r8, #0
 8004a12:	f104 0919 	add.w	r9, r4, #25
 8004a16:	e7f4      	b.n	8004a02 <_printf_float+0x43e>

08004a18 <_printf_common>:
 8004a18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a1c:	4616      	mov	r6, r2
 8004a1e:	4698      	mov	r8, r3
 8004a20:	688a      	ldr	r2, [r1, #8]
 8004a22:	690b      	ldr	r3, [r1, #16]
 8004a24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	bfb8      	it	lt
 8004a2c:	4613      	movlt	r3, r2
 8004a2e:	6033      	str	r3, [r6, #0]
 8004a30:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004a34:	4607      	mov	r7, r0
 8004a36:	460c      	mov	r4, r1
 8004a38:	b10a      	cbz	r2, 8004a3e <_printf_common+0x26>
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	6033      	str	r3, [r6, #0]
 8004a3e:	6823      	ldr	r3, [r4, #0]
 8004a40:	0699      	lsls	r1, r3, #26
 8004a42:	bf42      	ittt	mi
 8004a44:	6833      	ldrmi	r3, [r6, #0]
 8004a46:	3302      	addmi	r3, #2
 8004a48:	6033      	strmi	r3, [r6, #0]
 8004a4a:	6825      	ldr	r5, [r4, #0]
 8004a4c:	f015 0506 	ands.w	r5, r5, #6
 8004a50:	d106      	bne.n	8004a60 <_printf_common+0x48>
 8004a52:	f104 0a19 	add.w	sl, r4, #25
 8004a56:	68e3      	ldr	r3, [r4, #12]
 8004a58:	6832      	ldr	r2, [r6, #0]
 8004a5a:	1a9b      	subs	r3, r3, r2
 8004a5c:	42ab      	cmp	r3, r5
 8004a5e:	dc26      	bgt.n	8004aae <_printf_common+0x96>
 8004a60:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004a64:	6822      	ldr	r2, [r4, #0]
 8004a66:	3b00      	subs	r3, #0
 8004a68:	bf18      	it	ne
 8004a6a:	2301      	movne	r3, #1
 8004a6c:	0692      	lsls	r2, r2, #26
 8004a6e:	d42b      	bmi.n	8004ac8 <_printf_common+0xb0>
 8004a70:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004a74:	4641      	mov	r1, r8
 8004a76:	4638      	mov	r0, r7
 8004a78:	47c8      	blx	r9
 8004a7a:	3001      	adds	r0, #1
 8004a7c:	d01e      	beq.n	8004abc <_printf_common+0xa4>
 8004a7e:	6823      	ldr	r3, [r4, #0]
 8004a80:	6922      	ldr	r2, [r4, #16]
 8004a82:	f003 0306 	and.w	r3, r3, #6
 8004a86:	2b04      	cmp	r3, #4
 8004a88:	bf02      	ittt	eq
 8004a8a:	68e5      	ldreq	r5, [r4, #12]
 8004a8c:	6833      	ldreq	r3, [r6, #0]
 8004a8e:	1aed      	subeq	r5, r5, r3
 8004a90:	68a3      	ldr	r3, [r4, #8]
 8004a92:	bf0c      	ite	eq
 8004a94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a98:	2500      	movne	r5, #0
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	bfc4      	itt	gt
 8004a9e:	1a9b      	subgt	r3, r3, r2
 8004aa0:	18ed      	addgt	r5, r5, r3
 8004aa2:	2600      	movs	r6, #0
 8004aa4:	341a      	adds	r4, #26
 8004aa6:	42b5      	cmp	r5, r6
 8004aa8:	d11a      	bne.n	8004ae0 <_printf_common+0xc8>
 8004aaa:	2000      	movs	r0, #0
 8004aac:	e008      	b.n	8004ac0 <_printf_common+0xa8>
 8004aae:	2301      	movs	r3, #1
 8004ab0:	4652      	mov	r2, sl
 8004ab2:	4641      	mov	r1, r8
 8004ab4:	4638      	mov	r0, r7
 8004ab6:	47c8      	blx	r9
 8004ab8:	3001      	adds	r0, #1
 8004aba:	d103      	bne.n	8004ac4 <_printf_common+0xac>
 8004abc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ac4:	3501      	adds	r5, #1
 8004ac6:	e7c6      	b.n	8004a56 <_printf_common+0x3e>
 8004ac8:	18e1      	adds	r1, r4, r3
 8004aca:	1c5a      	adds	r2, r3, #1
 8004acc:	2030      	movs	r0, #48	@ 0x30
 8004ace:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004ad2:	4422      	add	r2, r4
 8004ad4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004ad8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004adc:	3302      	adds	r3, #2
 8004ade:	e7c7      	b.n	8004a70 <_printf_common+0x58>
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	4622      	mov	r2, r4
 8004ae4:	4641      	mov	r1, r8
 8004ae6:	4638      	mov	r0, r7
 8004ae8:	47c8      	blx	r9
 8004aea:	3001      	adds	r0, #1
 8004aec:	d0e6      	beq.n	8004abc <_printf_common+0xa4>
 8004aee:	3601      	adds	r6, #1
 8004af0:	e7d9      	b.n	8004aa6 <_printf_common+0x8e>
	...

08004af4 <_printf_i>:
 8004af4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004af8:	7e0f      	ldrb	r7, [r1, #24]
 8004afa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004afc:	2f78      	cmp	r7, #120	@ 0x78
 8004afe:	4691      	mov	r9, r2
 8004b00:	4680      	mov	r8, r0
 8004b02:	460c      	mov	r4, r1
 8004b04:	469a      	mov	sl, r3
 8004b06:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004b0a:	d807      	bhi.n	8004b1c <_printf_i+0x28>
 8004b0c:	2f62      	cmp	r7, #98	@ 0x62
 8004b0e:	d80a      	bhi.n	8004b26 <_printf_i+0x32>
 8004b10:	2f00      	cmp	r7, #0
 8004b12:	f000 80d1 	beq.w	8004cb8 <_printf_i+0x1c4>
 8004b16:	2f58      	cmp	r7, #88	@ 0x58
 8004b18:	f000 80b8 	beq.w	8004c8c <_printf_i+0x198>
 8004b1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b20:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004b24:	e03a      	b.n	8004b9c <_printf_i+0xa8>
 8004b26:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004b2a:	2b15      	cmp	r3, #21
 8004b2c:	d8f6      	bhi.n	8004b1c <_printf_i+0x28>
 8004b2e:	a101      	add	r1, pc, #4	@ (adr r1, 8004b34 <_printf_i+0x40>)
 8004b30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b34:	08004b8d 	.word	0x08004b8d
 8004b38:	08004ba1 	.word	0x08004ba1
 8004b3c:	08004b1d 	.word	0x08004b1d
 8004b40:	08004b1d 	.word	0x08004b1d
 8004b44:	08004b1d 	.word	0x08004b1d
 8004b48:	08004b1d 	.word	0x08004b1d
 8004b4c:	08004ba1 	.word	0x08004ba1
 8004b50:	08004b1d 	.word	0x08004b1d
 8004b54:	08004b1d 	.word	0x08004b1d
 8004b58:	08004b1d 	.word	0x08004b1d
 8004b5c:	08004b1d 	.word	0x08004b1d
 8004b60:	08004c9f 	.word	0x08004c9f
 8004b64:	08004bcb 	.word	0x08004bcb
 8004b68:	08004c59 	.word	0x08004c59
 8004b6c:	08004b1d 	.word	0x08004b1d
 8004b70:	08004b1d 	.word	0x08004b1d
 8004b74:	08004cc1 	.word	0x08004cc1
 8004b78:	08004b1d 	.word	0x08004b1d
 8004b7c:	08004bcb 	.word	0x08004bcb
 8004b80:	08004b1d 	.word	0x08004b1d
 8004b84:	08004b1d 	.word	0x08004b1d
 8004b88:	08004c61 	.word	0x08004c61
 8004b8c:	6833      	ldr	r3, [r6, #0]
 8004b8e:	1d1a      	adds	r2, r3, #4
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	6032      	str	r2, [r6, #0]
 8004b94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b98:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e09c      	b.n	8004cda <_printf_i+0x1e6>
 8004ba0:	6833      	ldr	r3, [r6, #0]
 8004ba2:	6820      	ldr	r0, [r4, #0]
 8004ba4:	1d19      	adds	r1, r3, #4
 8004ba6:	6031      	str	r1, [r6, #0]
 8004ba8:	0606      	lsls	r6, r0, #24
 8004baa:	d501      	bpl.n	8004bb0 <_printf_i+0xbc>
 8004bac:	681d      	ldr	r5, [r3, #0]
 8004bae:	e003      	b.n	8004bb8 <_printf_i+0xc4>
 8004bb0:	0645      	lsls	r5, r0, #25
 8004bb2:	d5fb      	bpl.n	8004bac <_printf_i+0xb8>
 8004bb4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004bb8:	2d00      	cmp	r5, #0
 8004bba:	da03      	bge.n	8004bc4 <_printf_i+0xd0>
 8004bbc:	232d      	movs	r3, #45	@ 0x2d
 8004bbe:	426d      	negs	r5, r5
 8004bc0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004bc4:	4858      	ldr	r0, [pc, #352]	@ (8004d28 <_printf_i+0x234>)
 8004bc6:	230a      	movs	r3, #10
 8004bc8:	e011      	b.n	8004bee <_printf_i+0xfa>
 8004bca:	6821      	ldr	r1, [r4, #0]
 8004bcc:	6833      	ldr	r3, [r6, #0]
 8004bce:	0608      	lsls	r0, r1, #24
 8004bd0:	f853 5b04 	ldr.w	r5, [r3], #4
 8004bd4:	d402      	bmi.n	8004bdc <_printf_i+0xe8>
 8004bd6:	0649      	lsls	r1, r1, #25
 8004bd8:	bf48      	it	mi
 8004bda:	b2ad      	uxthmi	r5, r5
 8004bdc:	2f6f      	cmp	r7, #111	@ 0x6f
 8004bde:	4852      	ldr	r0, [pc, #328]	@ (8004d28 <_printf_i+0x234>)
 8004be0:	6033      	str	r3, [r6, #0]
 8004be2:	bf14      	ite	ne
 8004be4:	230a      	movne	r3, #10
 8004be6:	2308      	moveq	r3, #8
 8004be8:	2100      	movs	r1, #0
 8004bea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004bee:	6866      	ldr	r6, [r4, #4]
 8004bf0:	60a6      	str	r6, [r4, #8]
 8004bf2:	2e00      	cmp	r6, #0
 8004bf4:	db05      	blt.n	8004c02 <_printf_i+0x10e>
 8004bf6:	6821      	ldr	r1, [r4, #0]
 8004bf8:	432e      	orrs	r6, r5
 8004bfa:	f021 0104 	bic.w	r1, r1, #4
 8004bfe:	6021      	str	r1, [r4, #0]
 8004c00:	d04b      	beq.n	8004c9a <_printf_i+0x1a6>
 8004c02:	4616      	mov	r6, r2
 8004c04:	fbb5 f1f3 	udiv	r1, r5, r3
 8004c08:	fb03 5711 	mls	r7, r3, r1, r5
 8004c0c:	5dc7      	ldrb	r7, [r0, r7]
 8004c0e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004c12:	462f      	mov	r7, r5
 8004c14:	42bb      	cmp	r3, r7
 8004c16:	460d      	mov	r5, r1
 8004c18:	d9f4      	bls.n	8004c04 <_printf_i+0x110>
 8004c1a:	2b08      	cmp	r3, #8
 8004c1c:	d10b      	bne.n	8004c36 <_printf_i+0x142>
 8004c1e:	6823      	ldr	r3, [r4, #0]
 8004c20:	07df      	lsls	r7, r3, #31
 8004c22:	d508      	bpl.n	8004c36 <_printf_i+0x142>
 8004c24:	6923      	ldr	r3, [r4, #16]
 8004c26:	6861      	ldr	r1, [r4, #4]
 8004c28:	4299      	cmp	r1, r3
 8004c2a:	bfde      	ittt	le
 8004c2c:	2330      	movle	r3, #48	@ 0x30
 8004c2e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004c32:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004c36:	1b92      	subs	r2, r2, r6
 8004c38:	6122      	str	r2, [r4, #16]
 8004c3a:	f8cd a000 	str.w	sl, [sp]
 8004c3e:	464b      	mov	r3, r9
 8004c40:	aa03      	add	r2, sp, #12
 8004c42:	4621      	mov	r1, r4
 8004c44:	4640      	mov	r0, r8
 8004c46:	f7ff fee7 	bl	8004a18 <_printf_common>
 8004c4a:	3001      	adds	r0, #1
 8004c4c:	d14a      	bne.n	8004ce4 <_printf_i+0x1f0>
 8004c4e:	f04f 30ff 	mov.w	r0, #4294967295
 8004c52:	b004      	add	sp, #16
 8004c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c58:	6823      	ldr	r3, [r4, #0]
 8004c5a:	f043 0320 	orr.w	r3, r3, #32
 8004c5e:	6023      	str	r3, [r4, #0]
 8004c60:	4832      	ldr	r0, [pc, #200]	@ (8004d2c <_printf_i+0x238>)
 8004c62:	2778      	movs	r7, #120	@ 0x78
 8004c64:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004c68:	6823      	ldr	r3, [r4, #0]
 8004c6a:	6831      	ldr	r1, [r6, #0]
 8004c6c:	061f      	lsls	r7, r3, #24
 8004c6e:	f851 5b04 	ldr.w	r5, [r1], #4
 8004c72:	d402      	bmi.n	8004c7a <_printf_i+0x186>
 8004c74:	065f      	lsls	r7, r3, #25
 8004c76:	bf48      	it	mi
 8004c78:	b2ad      	uxthmi	r5, r5
 8004c7a:	6031      	str	r1, [r6, #0]
 8004c7c:	07d9      	lsls	r1, r3, #31
 8004c7e:	bf44      	itt	mi
 8004c80:	f043 0320 	orrmi.w	r3, r3, #32
 8004c84:	6023      	strmi	r3, [r4, #0]
 8004c86:	b11d      	cbz	r5, 8004c90 <_printf_i+0x19c>
 8004c88:	2310      	movs	r3, #16
 8004c8a:	e7ad      	b.n	8004be8 <_printf_i+0xf4>
 8004c8c:	4826      	ldr	r0, [pc, #152]	@ (8004d28 <_printf_i+0x234>)
 8004c8e:	e7e9      	b.n	8004c64 <_printf_i+0x170>
 8004c90:	6823      	ldr	r3, [r4, #0]
 8004c92:	f023 0320 	bic.w	r3, r3, #32
 8004c96:	6023      	str	r3, [r4, #0]
 8004c98:	e7f6      	b.n	8004c88 <_printf_i+0x194>
 8004c9a:	4616      	mov	r6, r2
 8004c9c:	e7bd      	b.n	8004c1a <_printf_i+0x126>
 8004c9e:	6833      	ldr	r3, [r6, #0]
 8004ca0:	6825      	ldr	r5, [r4, #0]
 8004ca2:	6961      	ldr	r1, [r4, #20]
 8004ca4:	1d18      	adds	r0, r3, #4
 8004ca6:	6030      	str	r0, [r6, #0]
 8004ca8:	062e      	lsls	r6, r5, #24
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	d501      	bpl.n	8004cb2 <_printf_i+0x1be>
 8004cae:	6019      	str	r1, [r3, #0]
 8004cb0:	e002      	b.n	8004cb8 <_printf_i+0x1c4>
 8004cb2:	0668      	lsls	r0, r5, #25
 8004cb4:	d5fb      	bpl.n	8004cae <_printf_i+0x1ba>
 8004cb6:	8019      	strh	r1, [r3, #0]
 8004cb8:	2300      	movs	r3, #0
 8004cba:	6123      	str	r3, [r4, #16]
 8004cbc:	4616      	mov	r6, r2
 8004cbe:	e7bc      	b.n	8004c3a <_printf_i+0x146>
 8004cc0:	6833      	ldr	r3, [r6, #0]
 8004cc2:	1d1a      	adds	r2, r3, #4
 8004cc4:	6032      	str	r2, [r6, #0]
 8004cc6:	681e      	ldr	r6, [r3, #0]
 8004cc8:	6862      	ldr	r2, [r4, #4]
 8004cca:	2100      	movs	r1, #0
 8004ccc:	4630      	mov	r0, r6
 8004cce:	f7fb fa7f 	bl	80001d0 <memchr>
 8004cd2:	b108      	cbz	r0, 8004cd8 <_printf_i+0x1e4>
 8004cd4:	1b80      	subs	r0, r0, r6
 8004cd6:	6060      	str	r0, [r4, #4]
 8004cd8:	6863      	ldr	r3, [r4, #4]
 8004cda:	6123      	str	r3, [r4, #16]
 8004cdc:	2300      	movs	r3, #0
 8004cde:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ce2:	e7aa      	b.n	8004c3a <_printf_i+0x146>
 8004ce4:	6923      	ldr	r3, [r4, #16]
 8004ce6:	4632      	mov	r2, r6
 8004ce8:	4649      	mov	r1, r9
 8004cea:	4640      	mov	r0, r8
 8004cec:	47d0      	blx	sl
 8004cee:	3001      	adds	r0, #1
 8004cf0:	d0ad      	beq.n	8004c4e <_printf_i+0x15a>
 8004cf2:	6823      	ldr	r3, [r4, #0]
 8004cf4:	079b      	lsls	r3, r3, #30
 8004cf6:	d413      	bmi.n	8004d20 <_printf_i+0x22c>
 8004cf8:	68e0      	ldr	r0, [r4, #12]
 8004cfa:	9b03      	ldr	r3, [sp, #12]
 8004cfc:	4298      	cmp	r0, r3
 8004cfe:	bfb8      	it	lt
 8004d00:	4618      	movlt	r0, r3
 8004d02:	e7a6      	b.n	8004c52 <_printf_i+0x15e>
 8004d04:	2301      	movs	r3, #1
 8004d06:	4632      	mov	r2, r6
 8004d08:	4649      	mov	r1, r9
 8004d0a:	4640      	mov	r0, r8
 8004d0c:	47d0      	blx	sl
 8004d0e:	3001      	adds	r0, #1
 8004d10:	d09d      	beq.n	8004c4e <_printf_i+0x15a>
 8004d12:	3501      	adds	r5, #1
 8004d14:	68e3      	ldr	r3, [r4, #12]
 8004d16:	9903      	ldr	r1, [sp, #12]
 8004d18:	1a5b      	subs	r3, r3, r1
 8004d1a:	42ab      	cmp	r3, r5
 8004d1c:	dcf2      	bgt.n	8004d04 <_printf_i+0x210>
 8004d1e:	e7eb      	b.n	8004cf8 <_printf_i+0x204>
 8004d20:	2500      	movs	r5, #0
 8004d22:	f104 0619 	add.w	r6, r4, #25
 8004d26:	e7f5      	b.n	8004d14 <_printf_i+0x220>
 8004d28:	08007d02 	.word	0x08007d02
 8004d2c:	08007d13 	.word	0x08007d13

08004d30 <std>:
 8004d30:	2300      	movs	r3, #0
 8004d32:	b510      	push	{r4, lr}
 8004d34:	4604      	mov	r4, r0
 8004d36:	e9c0 3300 	strd	r3, r3, [r0]
 8004d3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004d3e:	6083      	str	r3, [r0, #8]
 8004d40:	8181      	strh	r1, [r0, #12]
 8004d42:	6643      	str	r3, [r0, #100]	@ 0x64
 8004d44:	81c2      	strh	r2, [r0, #14]
 8004d46:	6183      	str	r3, [r0, #24]
 8004d48:	4619      	mov	r1, r3
 8004d4a:	2208      	movs	r2, #8
 8004d4c:	305c      	adds	r0, #92	@ 0x5c
 8004d4e:	f000 f931 	bl	8004fb4 <memset>
 8004d52:	4b0d      	ldr	r3, [pc, #52]	@ (8004d88 <std+0x58>)
 8004d54:	6263      	str	r3, [r4, #36]	@ 0x24
 8004d56:	4b0d      	ldr	r3, [pc, #52]	@ (8004d8c <std+0x5c>)
 8004d58:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8004d90 <std+0x60>)
 8004d5c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8004d94 <std+0x64>)
 8004d60:	6323      	str	r3, [r4, #48]	@ 0x30
 8004d62:	4b0d      	ldr	r3, [pc, #52]	@ (8004d98 <std+0x68>)
 8004d64:	6224      	str	r4, [r4, #32]
 8004d66:	429c      	cmp	r4, r3
 8004d68:	d006      	beq.n	8004d78 <std+0x48>
 8004d6a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004d6e:	4294      	cmp	r4, r2
 8004d70:	d002      	beq.n	8004d78 <std+0x48>
 8004d72:	33d0      	adds	r3, #208	@ 0xd0
 8004d74:	429c      	cmp	r4, r3
 8004d76:	d105      	bne.n	8004d84 <std+0x54>
 8004d78:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004d7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d80:	f000 b994 	b.w	80050ac <__retarget_lock_init_recursive>
 8004d84:	bd10      	pop	{r4, pc}
 8004d86:	bf00      	nop
 8004d88:	08004eb5 	.word	0x08004eb5
 8004d8c:	08004ed7 	.word	0x08004ed7
 8004d90:	08004f0f 	.word	0x08004f0f
 8004d94:	08004f33 	.word	0x08004f33
 8004d98:	20000934 	.word	0x20000934

08004d9c <stdio_exit_handler>:
 8004d9c:	4a02      	ldr	r2, [pc, #8]	@ (8004da8 <stdio_exit_handler+0xc>)
 8004d9e:	4903      	ldr	r1, [pc, #12]	@ (8004dac <stdio_exit_handler+0x10>)
 8004da0:	4803      	ldr	r0, [pc, #12]	@ (8004db0 <stdio_exit_handler+0x14>)
 8004da2:	f000 b869 	b.w	8004e78 <_fwalk_sglue>
 8004da6:	bf00      	nop
 8004da8:	20000004 	.word	0x20000004
 8004dac:	08006a2d 	.word	0x08006a2d
 8004db0:	20000014 	.word	0x20000014

08004db4 <cleanup_stdio>:
 8004db4:	6841      	ldr	r1, [r0, #4]
 8004db6:	4b0c      	ldr	r3, [pc, #48]	@ (8004de8 <cleanup_stdio+0x34>)
 8004db8:	4299      	cmp	r1, r3
 8004dba:	b510      	push	{r4, lr}
 8004dbc:	4604      	mov	r4, r0
 8004dbe:	d001      	beq.n	8004dc4 <cleanup_stdio+0x10>
 8004dc0:	f001 fe34 	bl	8006a2c <_fflush_r>
 8004dc4:	68a1      	ldr	r1, [r4, #8]
 8004dc6:	4b09      	ldr	r3, [pc, #36]	@ (8004dec <cleanup_stdio+0x38>)
 8004dc8:	4299      	cmp	r1, r3
 8004dca:	d002      	beq.n	8004dd2 <cleanup_stdio+0x1e>
 8004dcc:	4620      	mov	r0, r4
 8004dce:	f001 fe2d 	bl	8006a2c <_fflush_r>
 8004dd2:	68e1      	ldr	r1, [r4, #12]
 8004dd4:	4b06      	ldr	r3, [pc, #24]	@ (8004df0 <cleanup_stdio+0x3c>)
 8004dd6:	4299      	cmp	r1, r3
 8004dd8:	d004      	beq.n	8004de4 <cleanup_stdio+0x30>
 8004dda:	4620      	mov	r0, r4
 8004ddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004de0:	f001 be24 	b.w	8006a2c <_fflush_r>
 8004de4:	bd10      	pop	{r4, pc}
 8004de6:	bf00      	nop
 8004de8:	20000934 	.word	0x20000934
 8004dec:	2000099c 	.word	0x2000099c
 8004df0:	20000a04 	.word	0x20000a04

08004df4 <global_stdio_init.part.0>:
 8004df4:	b510      	push	{r4, lr}
 8004df6:	4b0b      	ldr	r3, [pc, #44]	@ (8004e24 <global_stdio_init.part.0+0x30>)
 8004df8:	4c0b      	ldr	r4, [pc, #44]	@ (8004e28 <global_stdio_init.part.0+0x34>)
 8004dfa:	4a0c      	ldr	r2, [pc, #48]	@ (8004e2c <global_stdio_init.part.0+0x38>)
 8004dfc:	601a      	str	r2, [r3, #0]
 8004dfe:	4620      	mov	r0, r4
 8004e00:	2200      	movs	r2, #0
 8004e02:	2104      	movs	r1, #4
 8004e04:	f7ff ff94 	bl	8004d30 <std>
 8004e08:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	2109      	movs	r1, #9
 8004e10:	f7ff ff8e 	bl	8004d30 <std>
 8004e14:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004e18:	2202      	movs	r2, #2
 8004e1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e1e:	2112      	movs	r1, #18
 8004e20:	f7ff bf86 	b.w	8004d30 <std>
 8004e24:	20000a6c 	.word	0x20000a6c
 8004e28:	20000934 	.word	0x20000934
 8004e2c:	08004d9d 	.word	0x08004d9d

08004e30 <__sfp_lock_acquire>:
 8004e30:	4801      	ldr	r0, [pc, #4]	@ (8004e38 <__sfp_lock_acquire+0x8>)
 8004e32:	f000 b93c 	b.w	80050ae <__retarget_lock_acquire_recursive>
 8004e36:	bf00      	nop
 8004e38:	20000a75 	.word	0x20000a75

08004e3c <__sfp_lock_release>:
 8004e3c:	4801      	ldr	r0, [pc, #4]	@ (8004e44 <__sfp_lock_release+0x8>)
 8004e3e:	f000 b937 	b.w	80050b0 <__retarget_lock_release_recursive>
 8004e42:	bf00      	nop
 8004e44:	20000a75 	.word	0x20000a75

08004e48 <__sinit>:
 8004e48:	b510      	push	{r4, lr}
 8004e4a:	4604      	mov	r4, r0
 8004e4c:	f7ff fff0 	bl	8004e30 <__sfp_lock_acquire>
 8004e50:	6a23      	ldr	r3, [r4, #32]
 8004e52:	b11b      	cbz	r3, 8004e5c <__sinit+0x14>
 8004e54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e58:	f7ff bff0 	b.w	8004e3c <__sfp_lock_release>
 8004e5c:	4b04      	ldr	r3, [pc, #16]	@ (8004e70 <__sinit+0x28>)
 8004e5e:	6223      	str	r3, [r4, #32]
 8004e60:	4b04      	ldr	r3, [pc, #16]	@ (8004e74 <__sinit+0x2c>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d1f5      	bne.n	8004e54 <__sinit+0xc>
 8004e68:	f7ff ffc4 	bl	8004df4 <global_stdio_init.part.0>
 8004e6c:	e7f2      	b.n	8004e54 <__sinit+0xc>
 8004e6e:	bf00      	nop
 8004e70:	08004db5 	.word	0x08004db5
 8004e74:	20000a6c 	.word	0x20000a6c

08004e78 <_fwalk_sglue>:
 8004e78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e7c:	4607      	mov	r7, r0
 8004e7e:	4688      	mov	r8, r1
 8004e80:	4614      	mov	r4, r2
 8004e82:	2600      	movs	r6, #0
 8004e84:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004e88:	f1b9 0901 	subs.w	r9, r9, #1
 8004e8c:	d505      	bpl.n	8004e9a <_fwalk_sglue+0x22>
 8004e8e:	6824      	ldr	r4, [r4, #0]
 8004e90:	2c00      	cmp	r4, #0
 8004e92:	d1f7      	bne.n	8004e84 <_fwalk_sglue+0xc>
 8004e94:	4630      	mov	r0, r6
 8004e96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e9a:	89ab      	ldrh	r3, [r5, #12]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d907      	bls.n	8004eb0 <_fwalk_sglue+0x38>
 8004ea0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ea4:	3301      	adds	r3, #1
 8004ea6:	d003      	beq.n	8004eb0 <_fwalk_sglue+0x38>
 8004ea8:	4629      	mov	r1, r5
 8004eaa:	4638      	mov	r0, r7
 8004eac:	47c0      	blx	r8
 8004eae:	4306      	orrs	r6, r0
 8004eb0:	3568      	adds	r5, #104	@ 0x68
 8004eb2:	e7e9      	b.n	8004e88 <_fwalk_sglue+0x10>

08004eb4 <__sread>:
 8004eb4:	b510      	push	{r4, lr}
 8004eb6:	460c      	mov	r4, r1
 8004eb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ebc:	f000 f8a8 	bl	8005010 <_read_r>
 8004ec0:	2800      	cmp	r0, #0
 8004ec2:	bfab      	itete	ge
 8004ec4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004ec6:	89a3      	ldrhlt	r3, [r4, #12]
 8004ec8:	181b      	addge	r3, r3, r0
 8004eca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004ece:	bfac      	ite	ge
 8004ed0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004ed2:	81a3      	strhlt	r3, [r4, #12]
 8004ed4:	bd10      	pop	{r4, pc}

08004ed6 <__swrite>:
 8004ed6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004eda:	461f      	mov	r7, r3
 8004edc:	898b      	ldrh	r3, [r1, #12]
 8004ede:	05db      	lsls	r3, r3, #23
 8004ee0:	4605      	mov	r5, r0
 8004ee2:	460c      	mov	r4, r1
 8004ee4:	4616      	mov	r6, r2
 8004ee6:	d505      	bpl.n	8004ef4 <__swrite+0x1e>
 8004ee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004eec:	2302      	movs	r3, #2
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f000 f87c 	bl	8004fec <_lseek_r>
 8004ef4:	89a3      	ldrh	r3, [r4, #12]
 8004ef6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004efa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004efe:	81a3      	strh	r3, [r4, #12]
 8004f00:	4632      	mov	r2, r6
 8004f02:	463b      	mov	r3, r7
 8004f04:	4628      	mov	r0, r5
 8004f06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f0a:	f000 b893 	b.w	8005034 <_write_r>

08004f0e <__sseek>:
 8004f0e:	b510      	push	{r4, lr}
 8004f10:	460c      	mov	r4, r1
 8004f12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f16:	f000 f869 	bl	8004fec <_lseek_r>
 8004f1a:	1c43      	adds	r3, r0, #1
 8004f1c:	89a3      	ldrh	r3, [r4, #12]
 8004f1e:	bf15      	itete	ne
 8004f20:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004f22:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004f26:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004f2a:	81a3      	strheq	r3, [r4, #12]
 8004f2c:	bf18      	it	ne
 8004f2e:	81a3      	strhne	r3, [r4, #12]
 8004f30:	bd10      	pop	{r4, pc}

08004f32 <__sclose>:
 8004f32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f36:	f000 b849 	b.w	8004fcc <_close_r>

08004f3a <_vsniprintf_r>:
 8004f3a:	b530      	push	{r4, r5, lr}
 8004f3c:	4614      	mov	r4, r2
 8004f3e:	2c00      	cmp	r4, #0
 8004f40:	b09b      	sub	sp, #108	@ 0x6c
 8004f42:	4605      	mov	r5, r0
 8004f44:	461a      	mov	r2, r3
 8004f46:	da05      	bge.n	8004f54 <_vsniprintf_r+0x1a>
 8004f48:	238b      	movs	r3, #139	@ 0x8b
 8004f4a:	6003      	str	r3, [r0, #0]
 8004f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f50:	b01b      	add	sp, #108	@ 0x6c
 8004f52:	bd30      	pop	{r4, r5, pc}
 8004f54:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004f58:	f8ad 300c 	strh.w	r3, [sp, #12]
 8004f5c:	f04f 0300 	mov.w	r3, #0
 8004f60:	9319      	str	r3, [sp, #100]	@ 0x64
 8004f62:	bf14      	ite	ne
 8004f64:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004f68:	4623      	moveq	r3, r4
 8004f6a:	9302      	str	r3, [sp, #8]
 8004f6c:	9305      	str	r3, [sp, #20]
 8004f6e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004f72:	9100      	str	r1, [sp, #0]
 8004f74:	9104      	str	r1, [sp, #16]
 8004f76:	f8ad 300e 	strh.w	r3, [sp, #14]
 8004f7a:	4669      	mov	r1, sp
 8004f7c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8004f7e:	f001 fbd5 	bl	800672c <_svfiprintf_r>
 8004f82:	1c43      	adds	r3, r0, #1
 8004f84:	bfbc      	itt	lt
 8004f86:	238b      	movlt	r3, #139	@ 0x8b
 8004f88:	602b      	strlt	r3, [r5, #0]
 8004f8a:	2c00      	cmp	r4, #0
 8004f8c:	d0e0      	beq.n	8004f50 <_vsniprintf_r+0x16>
 8004f8e:	9b00      	ldr	r3, [sp, #0]
 8004f90:	2200      	movs	r2, #0
 8004f92:	701a      	strb	r2, [r3, #0]
 8004f94:	e7dc      	b.n	8004f50 <_vsniprintf_r+0x16>
	...

08004f98 <vsniprintf>:
 8004f98:	b507      	push	{r0, r1, r2, lr}
 8004f9a:	9300      	str	r3, [sp, #0]
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	460a      	mov	r2, r1
 8004fa0:	4601      	mov	r1, r0
 8004fa2:	4803      	ldr	r0, [pc, #12]	@ (8004fb0 <vsniprintf+0x18>)
 8004fa4:	6800      	ldr	r0, [r0, #0]
 8004fa6:	f7ff ffc8 	bl	8004f3a <_vsniprintf_r>
 8004faa:	b003      	add	sp, #12
 8004fac:	f85d fb04 	ldr.w	pc, [sp], #4
 8004fb0:	20000010 	.word	0x20000010

08004fb4 <memset>:
 8004fb4:	4402      	add	r2, r0
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d100      	bne.n	8004fbe <memset+0xa>
 8004fbc:	4770      	bx	lr
 8004fbe:	f803 1b01 	strb.w	r1, [r3], #1
 8004fc2:	e7f9      	b.n	8004fb8 <memset+0x4>

08004fc4 <_localeconv_r>:
 8004fc4:	4800      	ldr	r0, [pc, #0]	@ (8004fc8 <_localeconv_r+0x4>)
 8004fc6:	4770      	bx	lr
 8004fc8:	20000150 	.word	0x20000150

08004fcc <_close_r>:
 8004fcc:	b538      	push	{r3, r4, r5, lr}
 8004fce:	4d06      	ldr	r5, [pc, #24]	@ (8004fe8 <_close_r+0x1c>)
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	4604      	mov	r4, r0
 8004fd4:	4608      	mov	r0, r1
 8004fd6:	602b      	str	r3, [r5, #0]
 8004fd8:	f7ff f9a2 	bl	8004320 <_close>
 8004fdc:	1c43      	adds	r3, r0, #1
 8004fde:	d102      	bne.n	8004fe6 <_close_r+0x1a>
 8004fe0:	682b      	ldr	r3, [r5, #0]
 8004fe2:	b103      	cbz	r3, 8004fe6 <_close_r+0x1a>
 8004fe4:	6023      	str	r3, [r4, #0]
 8004fe6:	bd38      	pop	{r3, r4, r5, pc}
 8004fe8:	20000a70 	.word	0x20000a70

08004fec <_lseek_r>:
 8004fec:	b538      	push	{r3, r4, r5, lr}
 8004fee:	4d07      	ldr	r5, [pc, #28]	@ (800500c <_lseek_r+0x20>)
 8004ff0:	4604      	mov	r4, r0
 8004ff2:	4608      	mov	r0, r1
 8004ff4:	4611      	mov	r1, r2
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	602a      	str	r2, [r5, #0]
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	f7ff f99a 	bl	8004334 <_lseek>
 8005000:	1c43      	adds	r3, r0, #1
 8005002:	d102      	bne.n	800500a <_lseek_r+0x1e>
 8005004:	682b      	ldr	r3, [r5, #0]
 8005006:	b103      	cbz	r3, 800500a <_lseek_r+0x1e>
 8005008:	6023      	str	r3, [r4, #0]
 800500a:	bd38      	pop	{r3, r4, r5, pc}
 800500c:	20000a70 	.word	0x20000a70

08005010 <_read_r>:
 8005010:	b538      	push	{r3, r4, r5, lr}
 8005012:	4d07      	ldr	r5, [pc, #28]	@ (8005030 <_read_r+0x20>)
 8005014:	4604      	mov	r4, r0
 8005016:	4608      	mov	r0, r1
 8005018:	4611      	mov	r1, r2
 800501a:	2200      	movs	r2, #0
 800501c:	602a      	str	r2, [r5, #0]
 800501e:	461a      	mov	r2, r3
 8005020:	f7ff f960 	bl	80042e4 <_read>
 8005024:	1c43      	adds	r3, r0, #1
 8005026:	d102      	bne.n	800502e <_read_r+0x1e>
 8005028:	682b      	ldr	r3, [r5, #0]
 800502a:	b103      	cbz	r3, 800502e <_read_r+0x1e>
 800502c:	6023      	str	r3, [r4, #0]
 800502e:	bd38      	pop	{r3, r4, r5, pc}
 8005030:	20000a70 	.word	0x20000a70

08005034 <_write_r>:
 8005034:	b538      	push	{r3, r4, r5, lr}
 8005036:	4d07      	ldr	r5, [pc, #28]	@ (8005054 <_write_r+0x20>)
 8005038:	4604      	mov	r4, r0
 800503a:	4608      	mov	r0, r1
 800503c:	4611      	mov	r1, r2
 800503e:	2200      	movs	r2, #0
 8005040:	602a      	str	r2, [r5, #0]
 8005042:	461a      	mov	r2, r3
 8005044:	f7ff f95e 	bl	8004304 <_write>
 8005048:	1c43      	adds	r3, r0, #1
 800504a:	d102      	bne.n	8005052 <_write_r+0x1e>
 800504c:	682b      	ldr	r3, [r5, #0]
 800504e:	b103      	cbz	r3, 8005052 <_write_r+0x1e>
 8005050:	6023      	str	r3, [r4, #0]
 8005052:	bd38      	pop	{r3, r4, r5, pc}
 8005054:	20000a70 	.word	0x20000a70

08005058 <__errno>:
 8005058:	4b01      	ldr	r3, [pc, #4]	@ (8005060 <__errno+0x8>)
 800505a:	6818      	ldr	r0, [r3, #0]
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	20000010 	.word	0x20000010

08005064 <__libc_init_array>:
 8005064:	b570      	push	{r4, r5, r6, lr}
 8005066:	4d0d      	ldr	r5, [pc, #52]	@ (800509c <__libc_init_array+0x38>)
 8005068:	4c0d      	ldr	r4, [pc, #52]	@ (80050a0 <__libc_init_array+0x3c>)
 800506a:	1b64      	subs	r4, r4, r5
 800506c:	10a4      	asrs	r4, r4, #2
 800506e:	2600      	movs	r6, #0
 8005070:	42a6      	cmp	r6, r4
 8005072:	d109      	bne.n	8005088 <__libc_init_array+0x24>
 8005074:	4d0b      	ldr	r5, [pc, #44]	@ (80050a4 <__libc_init_array+0x40>)
 8005076:	4c0c      	ldr	r4, [pc, #48]	@ (80050a8 <__libc_init_array+0x44>)
 8005078:	f002 fa0c 	bl	8007494 <_init>
 800507c:	1b64      	subs	r4, r4, r5
 800507e:	10a4      	asrs	r4, r4, #2
 8005080:	2600      	movs	r6, #0
 8005082:	42a6      	cmp	r6, r4
 8005084:	d105      	bne.n	8005092 <__libc_init_array+0x2e>
 8005086:	bd70      	pop	{r4, r5, r6, pc}
 8005088:	f855 3b04 	ldr.w	r3, [r5], #4
 800508c:	4798      	blx	r3
 800508e:	3601      	adds	r6, #1
 8005090:	e7ee      	b.n	8005070 <__libc_init_array+0xc>
 8005092:	f855 3b04 	ldr.w	r3, [r5], #4
 8005096:	4798      	blx	r3
 8005098:	3601      	adds	r6, #1
 800509a:	e7f2      	b.n	8005082 <__libc_init_array+0x1e>
 800509c:	0800806c 	.word	0x0800806c
 80050a0:	0800806c 	.word	0x0800806c
 80050a4:	0800806c 	.word	0x0800806c
 80050a8:	08008070 	.word	0x08008070

080050ac <__retarget_lock_init_recursive>:
 80050ac:	4770      	bx	lr

080050ae <__retarget_lock_acquire_recursive>:
 80050ae:	4770      	bx	lr

080050b0 <__retarget_lock_release_recursive>:
 80050b0:	4770      	bx	lr

080050b2 <memcpy>:
 80050b2:	440a      	add	r2, r1
 80050b4:	4291      	cmp	r1, r2
 80050b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80050ba:	d100      	bne.n	80050be <memcpy+0xc>
 80050bc:	4770      	bx	lr
 80050be:	b510      	push	{r4, lr}
 80050c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050c8:	4291      	cmp	r1, r2
 80050ca:	d1f9      	bne.n	80050c0 <memcpy+0xe>
 80050cc:	bd10      	pop	{r4, pc}

080050ce <quorem>:
 80050ce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050d2:	6903      	ldr	r3, [r0, #16]
 80050d4:	690c      	ldr	r4, [r1, #16]
 80050d6:	42a3      	cmp	r3, r4
 80050d8:	4607      	mov	r7, r0
 80050da:	db7e      	blt.n	80051da <quorem+0x10c>
 80050dc:	3c01      	subs	r4, #1
 80050de:	f101 0814 	add.w	r8, r1, #20
 80050e2:	00a3      	lsls	r3, r4, #2
 80050e4:	f100 0514 	add.w	r5, r0, #20
 80050e8:	9300      	str	r3, [sp, #0]
 80050ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80050ee:	9301      	str	r3, [sp, #4]
 80050f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80050f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80050f8:	3301      	adds	r3, #1
 80050fa:	429a      	cmp	r2, r3
 80050fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005100:	fbb2 f6f3 	udiv	r6, r2, r3
 8005104:	d32e      	bcc.n	8005164 <quorem+0x96>
 8005106:	f04f 0a00 	mov.w	sl, #0
 800510a:	46c4      	mov	ip, r8
 800510c:	46ae      	mov	lr, r5
 800510e:	46d3      	mov	fp, sl
 8005110:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005114:	b298      	uxth	r0, r3
 8005116:	fb06 a000 	mla	r0, r6, r0, sl
 800511a:	0c02      	lsrs	r2, r0, #16
 800511c:	0c1b      	lsrs	r3, r3, #16
 800511e:	fb06 2303 	mla	r3, r6, r3, r2
 8005122:	f8de 2000 	ldr.w	r2, [lr]
 8005126:	b280      	uxth	r0, r0
 8005128:	b292      	uxth	r2, r2
 800512a:	1a12      	subs	r2, r2, r0
 800512c:	445a      	add	r2, fp
 800512e:	f8de 0000 	ldr.w	r0, [lr]
 8005132:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005136:	b29b      	uxth	r3, r3
 8005138:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800513c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005140:	b292      	uxth	r2, r2
 8005142:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005146:	45e1      	cmp	r9, ip
 8005148:	f84e 2b04 	str.w	r2, [lr], #4
 800514c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005150:	d2de      	bcs.n	8005110 <quorem+0x42>
 8005152:	9b00      	ldr	r3, [sp, #0]
 8005154:	58eb      	ldr	r3, [r5, r3]
 8005156:	b92b      	cbnz	r3, 8005164 <quorem+0x96>
 8005158:	9b01      	ldr	r3, [sp, #4]
 800515a:	3b04      	subs	r3, #4
 800515c:	429d      	cmp	r5, r3
 800515e:	461a      	mov	r2, r3
 8005160:	d32f      	bcc.n	80051c2 <quorem+0xf4>
 8005162:	613c      	str	r4, [r7, #16]
 8005164:	4638      	mov	r0, r7
 8005166:	f001 f97d 	bl	8006464 <__mcmp>
 800516a:	2800      	cmp	r0, #0
 800516c:	db25      	blt.n	80051ba <quorem+0xec>
 800516e:	4629      	mov	r1, r5
 8005170:	2000      	movs	r0, #0
 8005172:	f858 2b04 	ldr.w	r2, [r8], #4
 8005176:	f8d1 c000 	ldr.w	ip, [r1]
 800517a:	fa1f fe82 	uxth.w	lr, r2
 800517e:	fa1f f38c 	uxth.w	r3, ip
 8005182:	eba3 030e 	sub.w	r3, r3, lr
 8005186:	4403      	add	r3, r0
 8005188:	0c12      	lsrs	r2, r2, #16
 800518a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800518e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005192:	b29b      	uxth	r3, r3
 8005194:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005198:	45c1      	cmp	r9, r8
 800519a:	f841 3b04 	str.w	r3, [r1], #4
 800519e:	ea4f 4022 	mov.w	r0, r2, asr #16
 80051a2:	d2e6      	bcs.n	8005172 <quorem+0xa4>
 80051a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80051a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80051ac:	b922      	cbnz	r2, 80051b8 <quorem+0xea>
 80051ae:	3b04      	subs	r3, #4
 80051b0:	429d      	cmp	r5, r3
 80051b2:	461a      	mov	r2, r3
 80051b4:	d30b      	bcc.n	80051ce <quorem+0x100>
 80051b6:	613c      	str	r4, [r7, #16]
 80051b8:	3601      	adds	r6, #1
 80051ba:	4630      	mov	r0, r6
 80051bc:	b003      	add	sp, #12
 80051be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051c2:	6812      	ldr	r2, [r2, #0]
 80051c4:	3b04      	subs	r3, #4
 80051c6:	2a00      	cmp	r2, #0
 80051c8:	d1cb      	bne.n	8005162 <quorem+0x94>
 80051ca:	3c01      	subs	r4, #1
 80051cc:	e7c6      	b.n	800515c <quorem+0x8e>
 80051ce:	6812      	ldr	r2, [r2, #0]
 80051d0:	3b04      	subs	r3, #4
 80051d2:	2a00      	cmp	r2, #0
 80051d4:	d1ef      	bne.n	80051b6 <quorem+0xe8>
 80051d6:	3c01      	subs	r4, #1
 80051d8:	e7ea      	b.n	80051b0 <quorem+0xe2>
 80051da:	2000      	movs	r0, #0
 80051dc:	e7ee      	b.n	80051bc <quorem+0xee>
	...

080051e0 <_dtoa_r>:
 80051e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051e4:	69c7      	ldr	r7, [r0, #28]
 80051e6:	b097      	sub	sp, #92	@ 0x5c
 80051e8:	ed8d 0b04 	vstr	d0, [sp, #16]
 80051ec:	ec55 4b10 	vmov	r4, r5, d0
 80051f0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80051f2:	9107      	str	r1, [sp, #28]
 80051f4:	4681      	mov	r9, r0
 80051f6:	920c      	str	r2, [sp, #48]	@ 0x30
 80051f8:	9311      	str	r3, [sp, #68]	@ 0x44
 80051fa:	b97f      	cbnz	r7, 800521c <_dtoa_r+0x3c>
 80051fc:	2010      	movs	r0, #16
 80051fe:	f000 fe09 	bl	8005e14 <malloc>
 8005202:	4602      	mov	r2, r0
 8005204:	f8c9 001c 	str.w	r0, [r9, #28]
 8005208:	b920      	cbnz	r0, 8005214 <_dtoa_r+0x34>
 800520a:	4ba9      	ldr	r3, [pc, #676]	@ (80054b0 <_dtoa_r+0x2d0>)
 800520c:	21ef      	movs	r1, #239	@ 0xef
 800520e:	48a9      	ldr	r0, [pc, #676]	@ (80054b4 <_dtoa_r+0x2d4>)
 8005210:	f001 fc5e 	bl	8006ad0 <__assert_func>
 8005214:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005218:	6007      	str	r7, [r0, #0]
 800521a:	60c7      	str	r7, [r0, #12]
 800521c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005220:	6819      	ldr	r1, [r3, #0]
 8005222:	b159      	cbz	r1, 800523c <_dtoa_r+0x5c>
 8005224:	685a      	ldr	r2, [r3, #4]
 8005226:	604a      	str	r2, [r1, #4]
 8005228:	2301      	movs	r3, #1
 800522a:	4093      	lsls	r3, r2
 800522c:	608b      	str	r3, [r1, #8]
 800522e:	4648      	mov	r0, r9
 8005230:	f000 fee6 	bl	8006000 <_Bfree>
 8005234:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005238:	2200      	movs	r2, #0
 800523a:	601a      	str	r2, [r3, #0]
 800523c:	1e2b      	subs	r3, r5, #0
 800523e:	bfb9      	ittee	lt
 8005240:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005244:	9305      	strlt	r3, [sp, #20]
 8005246:	2300      	movge	r3, #0
 8005248:	6033      	strge	r3, [r6, #0]
 800524a:	9f05      	ldr	r7, [sp, #20]
 800524c:	4b9a      	ldr	r3, [pc, #616]	@ (80054b8 <_dtoa_r+0x2d8>)
 800524e:	bfbc      	itt	lt
 8005250:	2201      	movlt	r2, #1
 8005252:	6032      	strlt	r2, [r6, #0]
 8005254:	43bb      	bics	r3, r7
 8005256:	d112      	bne.n	800527e <_dtoa_r+0x9e>
 8005258:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800525a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800525e:	6013      	str	r3, [r2, #0]
 8005260:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005264:	4323      	orrs	r3, r4
 8005266:	f000 855a 	beq.w	8005d1e <_dtoa_r+0xb3e>
 800526a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800526c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80054cc <_dtoa_r+0x2ec>
 8005270:	2b00      	cmp	r3, #0
 8005272:	f000 855c 	beq.w	8005d2e <_dtoa_r+0xb4e>
 8005276:	f10a 0303 	add.w	r3, sl, #3
 800527a:	f000 bd56 	b.w	8005d2a <_dtoa_r+0xb4a>
 800527e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8005282:	2200      	movs	r2, #0
 8005284:	ec51 0b17 	vmov	r0, r1, d7
 8005288:	2300      	movs	r3, #0
 800528a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800528e:	f7fb fc1b 	bl	8000ac8 <__aeabi_dcmpeq>
 8005292:	4680      	mov	r8, r0
 8005294:	b158      	cbz	r0, 80052ae <_dtoa_r+0xce>
 8005296:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005298:	2301      	movs	r3, #1
 800529a:	6013      	str	r3, [r2, #0]
 800529c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800529e:	b113      	cbz	r3, 80052a6 <_dtoa_r+0xc6>
 80052a0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80052a2:	4b86      	ldr	r3, [pc, #536]	@ (80054bc <_dtoa_r+0x2dc>)
 80052a4:	6013      	str	r3, [r2, #0]
 80052a6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80054d0 <_dtoa_r+0x2f0>
 80052aa:	f000 bd40 	b.w	8005d2e <_dtoa_r+0xb4e>
 80052ae:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80052b2:	aa14      	add	r2, sp, #80	@ 0x50
 80052b4:	a915      	add	r1, sp, #84	@ 0x54
 80052b6:	4648      	mov	r0, r9
 80052b8:	f001 f984 	bl	80065c4 <__d2b>
 80052bc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80052c0:	9002      	str	r0, [sp, #8]
 80052c2:	2e00      	cmp	r6, #0
 80052c4:	d078      	beq.n	80053b8 <_dtoa_r+0x1d8>
 80052c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80052c8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80052cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80052d4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80052d8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80052dc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80052e0:	4619      	mov	r1, r3
 80052e2:	2200      	movs	r2, #0
 80052e4:	4b76      	ldr	r3, [pc, #472]	@ (80054c0 <_dtoa_r+0x2e0>)
 80052e6:	f7fa ffcf 	bl	8000288 <__aeabi_dsub>
 80052ea:	a36b      	add	r3, pc, #428	@ (adr r3, 8005498 <_dtoa_r+0x2b8>)
 80052ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f0:	f7fb f982 	bl	80005f8 <__aeabi_dmul>
 80052f4:	a36a      	add	r3, pc, #424	@ (adr r3, 80054a0 <_dtoa_r+0x2c0>)
 80052f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052fa:	f7fa ffc7 	bl	800028c <__adddf3>
 80052fe:	4604      	mov	r4, r0
 8005300:	4630      	mov	r0, r6
 8005302:	460d      	mov	r5, r1
 8005304:	f7fb f90e 	bl	8000524 <__aeabi_i2d>
 8005308:	a367      	add	r3, pc, #412	@ (adr r3, 80054a8 <_dtoa_r+0x2c8>)
 800530a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800530e:	f7fb f973 	bl	80005f8 <__aeabi_dmul>
 8005312:	4602      	mov	r2, r0
 8005314:	460b      	mov	r3, r1
 8005316:	4620      	mov	r0, r4
 8005318:	4629      	mov	r1, r5
 800531a:	f7fa ffb7 	bl	800028c <__adddf3>
 800531e:	4604      	mov	r4, r0
 8005320:	460d      	mov	r5, r1
 8005322:	f7fb fc19 	bl	8000b58 <__aeabi_d2iz>
 8005326:	2200      	movs	r2, #0
 8005328:	4607      	mov	r7, r0
 800532a:	2300      	movs	r3, #0
 800532c:	4620      	mov	r0, r4
 800532e:	4629      	mov	r1, r5
 8005330:	f7fb fbd4 	bl	8000adc <__aeabi_dcmplt>
 8005334:	b140      	cbz	r0, 8005348 <_dtoa_r+0x168>
 8005336:	4638      	mov	r0, r7
 8005338:	f7fb f8f4 	bl	8000524 <__aeabi_i2d>
 800533c:	4622      	mov	r2, r4
 800533e:	462b      	mov	r3, r5
 8005340:	f7fb fbc2 	bl	8000ac8 <__aeabi_dcmpeq>
 8005344:	b900      	cbnz	r0, 8005348 <_dtoa_r+0x168>
 8005346:	3f01      	subs	r7, #1
 8005348:	2f16      	cmp	r7, #22
 800534a:	d852      	bhi.n	80053f2 <_dtoa_r+0x212>
 800534c:	4b5d      	ldr	r3, [pc, #372]	@ (80054c4 <_dtoa_r+0x2e4>)
 800534e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005356:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800535a:	f7fb fbbf 	bl	8000adc <__aeabi_dcmplt>
 800535e:	2800      	cmp	r0, #0
 8005360:	d049      	beq.n	80053f6 <_dtoa_r+0x216>
 8005362:	3f01      	subs	r7, #1
 8005364:	2300      	movs	r3, #0
 8005366:	9310      	str	r3, [sp, #64]	@ 0x40
 8005368:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800536a:	1b9b      	subs	r3, r3, r6
 800536c:	1e5a      	subs	r2, r3, #1
 800536e:	bf45      	ittet	mi
 8005370:	f1c3 0301 	rsbmi	r3, r3, #1
 8005374:	9300      	strmi	r3, [sp, #0]
 8005376:	2300      	movpl	r3, #0
 8005378:	2300      	movmi	r3, #0
 800537a:	9206      	str	r2, [sp, #24]
 800537c:	bf54      	ite	pl
 800537e:	9300      	strpl	r3, [sp, #0]
 8005380:	9306      	strmi	r3, [sp, #24]
 8005382:	2f00      	cmp	r7, #0
 8005384:	db39      	blt.n	80053fa <_dtoa_r+0x21a>
 8005386:	9b06      	ldr	r3, [sp, #24]
 8005388:	970d      	str	r7, [sp, #52]	@ 0x34
 800538a:	443b      	add	r3, r7
 800538c:	9306      	str	r3, [sp, #24]
 800538e:	2300      	movs	r3, #0
 8005390:	9308      	str	r3, [sp, #32]
 8005392:	9b07      	ldr	r3, [sp, #28]
 8005394:	2b09      	cmp	r3, #9
 8005396:	d863      	bhi.n	8005460 <_dtoa_r+0x280>
 8005398:	2b05      	cmp	r3, #5
 800539a:	bfc4      	itt	gt
 800539c:	3b04      	subgt	r3, #4
 800539e:	9307      	strgt	r3, [sp, #28]
 80053a0:	9b07      	ldr	r3, [sp, #28]
 80053a2:	f1a3 0302 	sub.w	r3, r3, #2
 80053a6:	bfcc      	ite	gt
 80053a8:	2400      	movgt	r4, #0
 80053aa:	2401      	movle	r4, #1
 80053ac:	2b03      	cmp	r3, #3
 80053ae:	d863      	bhi.n	8005478 <_dtoa_r+0x298>
 80053b0:	e8df f003 	tbb	[pc, r3]
 80053b4:	2b375452 	.word	0x2b375452
 80053b8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80053bc:	441e      	add	r6, r3
 80053be:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80053c2:	2b20      	cmp	r3, #32
 80053c4:	bfc1      	itttt	gt
 80053c6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80053ca:	409f      	lslgt	r7, r3
 80053cc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80053d0:	fa24 f303 	lsrgt.w	r3, r4, r3
 80053d4:	bfd6      	itet	le
 80053d6:	f1c3 0320 	rsble	r3, r3, #32
 80053da:	ea47 0003 	orrgt.w	r0, r7, r3
 80053de:	fa04 f003 	lslle.w	r0, r4, r3
 80053e2:	f7fb f88f 	bl	8000504 <__aeabi_ui2d>
 80053e6:	2201      	movs	r2, #1
 80053e8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80053ec:	3e01      	subs	r6, #1
 80053ee:	9212      	str	r2, [sp, #72]	@ 0x48
 80053f0:	e776      	b.n	80052e0 <_dtoa_r+0x100>
 80053f2:	2301      	movs	r3, #1
 80053f4:	e7b7      	b.n	8005366 <_dtoa_r+0x186>
 80053f6:	9010      	str	r0, [sp, #64]	@ 0x40
 80053f8:	e7b6      	b.n	8005368 <_dtoa_r+0x188>
 80053fa:	9b00      	ldr	r3, [sp, #0]
 80053fc:	1bdb      	subs	r3, r3, r7
 80053fe:	9300      	str	r3, [sp, #0]
 8005400:	427b      	negs	r3, r7
 8005402:	9308      	str	r3, [sp, #32]
 8005404:	2300      	movs	r3, #0
 8005406:	930d      	str	r3, [sp, #52]	@ 0x34
 8005408:	e7c3      	b.n	8005392 <_dtoa_r+0x1b2>
 800540a:	2301      	movs	r3, #1
 800540c:	9309      	str	r3, [sp, #36]	@ 0x24
 800540e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005410:	eb07 0b03 	add.w	fp, r7, r3
 8005414:	f10b 0301 	add.w	r3, fp, #1
 8005418:	2b01      	cmp	r3, #1
 800541a:	9303      	str	r3, [sp, #12]
 800541c:	bfb8      	it	lt
 800541e:	2301      	movlt	r3, #1
 8005420:	e006      	b.n	8005430 <_dtoa_r+0x250>
 8005422:	2301      	movs	r3, #1
 8005424:	9309      	str	r3, [sp, #36]	@ 0x24
 8005426:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005428:	2b00      	cmp	r3, #0
 800542a:	dd28      	ble.n	800547e <_dtoa_r+0x29e>
 800542c:	469b      	mov	fp, r3
 800542e:	9303      	str	r3, [sp, #12]
 8005430:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8005434:	2100      	movs	r1, #0
 8005436:	2204      	movs	r2, #4
 8005438:	f102 0514 	add.w	r5, r2, #20
 800543c:	429d      	cmp	r5, r3
 800543e:	d926      	bls.n	800548e <_dtoa_r+0x2ae>
 8005440:	6041      	str	r1, [r0, #4]
 8005442:	4648      	mov	r0, r9
 8005444:	f000 fd9c 	bl	8005f80 <_Balloc>
 8005448:	4682      	mov	sl, r0
 800544a:	2800      	cmp	r0, #0
 800544c:	d142      	bne.n	80054d4 <_dtoa_r+0x2f4>
 800544e:	4b1e      	ldr	r3, [pc, #120]	@ (80054c8 <_dtoa_r+0x2e8>)
 8005450:	4602      	mov	r2, r0
 8005452:	f240 11af 	movw	r1, #431	@ 0x1af
 8005456:	e6da      	b.n	800520e <_dtoa_r+0x2e>
 8005458:	2300      	movs	r3, #0
 800545a:	e7e3      	b.n	8005424 <_dtoa_r+0x244>
 800545c:	2300      	movs	r3, #0
 800545e:	e7d5      	b.n	800540c <_dtoa_r+0x22c>
 8005460:	2401      	movs	r4, #1
 8005462:	2300      	movs	r3, #0
 8005464:	9307      	str	r3, [sp, #28]
 8005466:	9409      	str	r4, [sp, #36]	@ 0x24
 8005468:	f04f 3bff 	mov.w	fp, #4294967295
 800546c:	2200      	movs	r2, #0
 800546e:	f8cd b00c 	str.w	fp, [sp, #12]
 8005472:	2312      	movs	r3, #18
 8005474:	920c      	str	r2, [sp, #48]	@ 0x30
 8005476:	e7db      	b.n	8005430 <_dtoa_r+0x250>
 8005478:	2301      	movs	r3, #1
 800547a:	9309      	str	r3, [sp, #36]	@ 0x24
 800547c:	e7f4      	b.n	8005468 <_dtoa_r+0x288>
 800547e:	f04f 0b01 	mov.w	fp, #1
 8005482:	f8cd b00c 	str.w	fp, [sp, #12]
 8005486:	465b      	mov	r3, fp
 8005488:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800548c:	e7d0      	b.n	8005430 <_dtoa_r+0x250>
 800548e:	3101      	adds	r1, #1
 8005490:	0052      	lsls	r2, r2, #1
 8005492:	e7d1      	b.n	8005438 <_dtoa_r+0x258>
 8005494:	f3af 8000 	nop.w
 8005498:	636f4361 	.word	0x636f4361
 800549c:	3fd287a7 	.word	0x3fd287a7
 80054a0:	8b60c8b3 	.word	0x8b60c8b3
 80054a4:	3fc68a28 	.word	0x3fc68a28
 80054a8:	509f79fb 	.word	0x509f79fb
 80054ac:	3fd34413 	.word	0x3fd34413
 80054b0:	08007d31 	.word	0x08007d31
 80054b4:	08007d48 	.word	0x08007d48
 80054b8:	7ff00000 	.word	0x7ff00000
 80054bc:	08007d01 	.word	0x08007d01
 80054c0:	3ff80000 	.word	0x3ff80000
 80054c4:	08007e98 	.word	0x08007e98
 80054c8:	08007da0 	.word	0x08007da0
 80054cc:	08007d2d 	.word	0x08007d2d
 80054d0:	08007d00 	.word	0x08007d00
 80054d4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80054d8:	6018      	str	r0, [r3, #0]
 80054da:	9b03      	ldr	r3, [sp, #12]
 80054dc:	2b0e      	cmp	r3, #14
 80054de:	f200 80a1 	bhi.w	8005624 <_dtoa_r+0x444>
 80054e2:	2c00      	cmp	r4, #0
 80054e4:	f000 809e 	beq.w	8005624 <_dtoa_r+0x444>
 80054e8:	2f00      	cmp	r7, #0
 80054ea:	dd33      	ble.n	8005554 <_dtoa_r+0x374>
 80054ec:	4b9c      	ldr	r3, [pc, #624]	@ (8005760 <_dtoa_r+0x580>)
 80054ee:	f007 020f 	and.w	r2, r7, #15
 80054f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80054f6:	ed93 7b00 	vldr	d7, [r3]
 80054fa:	05f8      	lsls	r0, r7, #23
 80054fc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8005500:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005504:	d516      	bpl.n	8005534 <_dtoa_r+0x354>
 8005506:	4b97      	ldr	r3, [pc, #604]	@ (8005764 <_dtoa_r+0x584>)
 8005508:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800550c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005510:	f7fb f99c 	bl	800084c <__aeabi_ddiv>
 8005514:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005518:	f004 040f 	and.w	r4, r4, #15
 800551c:	2603      	movs	r6, #3
 800551e:	4d91      	ldr	r5, [pc, #580]	@ (8005764 <_dtoa_r+0x584>)
 8005520:	b954      	cbnz	r4, 8005538 <_dtoa_r+0x358>
 8005522:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005526:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800552a:	f7fb f98f 	bl	800084c <__aeabi_ddiv>
 800552e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005532:	e028      	b.n	8005586 <_dtoa_r+0x3a6>
 8005534:	2602      	movs	r6, #2
 8005536:	e7f2      	b.n	800551e <_dtoa_r+0x33e>
 8005538:	07e1      	lsls	r1, r4, #31
 800553a:	d508      	bpl.n	800554e <_dtoa_r+0x36e>
 800553c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005540:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005544:	f7fb f858 	bl	80005f8 <__aeabi_dmul>
 8005548:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800554c:	3601      	adds	r6, #1
 800554e:	1064      	asrs	r4, r4, #1
 8005550:	3508      	adds	r5, #8
 8005552:	e7e5      	b.n	8005520 <_dtoa_r+0x340>
 8005554:	f000 80af 	beq.w	80056b6 <_dtoa_r+0x4d6>
 8005558:	427c      	negs	r4, r7
 800555a:	4b81      	ldr	r3, [pc, #516]	@ (8005760 <_dtoa_r+0x580>)
 800555c:	4d81      	ldr	r5, [pc, #516]	@ (8005764 <_dtoa_r+0x584>)
 800555e:	f004 020f 	and.w	r2, r4, #15
 8005562:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800556a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800556e:	f7fb f843 	bl	80005f8 <__aeabi_dmul>
 8005572:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005576:	1124      	asrs	r4, r4, #4
 8005578:	2300      	movs	r3, #0
 800557a:	2602      	movs	r6, #2
 800557c:	2c00      	cmp	r4, #0
 800557e:	f040 808f 	bne.w	80056a0 <_dtoa_r+0x4c0>
 8005582:	2b00      	cmp	r3, #0
 8005584:	d1d3      	bne.n	800552e <_dtoa_r+0x34e>
 8005586:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005588:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800558c:	2b00      	cmp	r3, #0
 800558e:	f000 8094 	beq.w	80056ba <_dtoa_r+0x4da>
 8005592:	4b75      	ldr	r3, [pc, #468]	@ (8005768 <_dtoa_r+0x588>)
 8005594:	2200      	movs	r2, #0
 8005596:	4620      	mov	r0, r4
 8005598:	4629      	mov	r1, r5
 800559a:	f7fb fa9f 	bl	8000adc <__aeabi_dcmplt>
 800559e:	2800      	cmp	r0, #0
 80055a0:	f000 808b 	beq.w	80056ba <_dtoa_r+0x4da>
 80055a4:	9b03      	ldr	r3, [sp, #12]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	f000 8087 	beq.w	80056ba <_dtoa_r+0x4da>
 80055ac:	f1bb 0f00 	cmp.w	fp, #0
 80055b0:	dd34      	ble.n	800561c <_dtoa_r+0x43c>
 80055b2:	4620      	mov	r0, r4
 80055b4:	4b6d      	ldr	r3, [pc, #436]	@ (800576c <_dtoa_r+0x58c>)
 80055b6:	2200      	movs	r2, #0
 80055b8:	4629      	mov	r1, r5
 80055ba:	f7fb f81d 	bl	80005f8 <__aeabi_dmul>
 80055be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80055c2:	f107 38ff 	add.w	r8, r7, #4294967295
 80055c6:	3601      	adds	r6, #1
 80055c8:	465c      	mov	r4, fp
 80055ca:	4630      	mov	r0, r6
 80055cc:	f7fa ffaa 	bl	8000524 <__aeabi_i2d>
 80055d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055d4:	f7fb f810 	bl	80005f8 <__aeabi_dmul>
 80055d8:	4b65      	ldr	r3, [pc, #404]	@ (8005770 <_dtoa_r+0x590>)
 80055da:	2200      	movs	r2, #0
 80055dc:	f7fa fe56 	bl	800028c <__adddf3>
 80055e0:	4605      	mov	r5, r0
 80055e2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80055e6:	2c00      	cmp	r4, #0
 80055e8:	d16a      	bne.n	80056c0 <_dtoa_r+0x4e0>
 80055ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80055ee:	4b61      	ldr	r3, [pc, #388]	@ (8005774 <_dtoa_r+0x594>)
 80055f0:	2200      	movs	r2, #0
 80055f2:	f7fa fe49 	bl	8000288 <__aeabi_dsub>
 80055f6:	4602      	mov	r2, r0
 80055f8:	460b      	mov	r3, r1
 80055fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80055fe:	462a      	mov	r2, r5
 8005600:	4633      	mov	r3, r6
 8005602:	f7fb fa89 	bl	8000b18 <__aeabi_dcmpgt>
 8005606:	2800      	cmp	r0, #0
 8005608:	f040 8298 	bne.w	8005b3c <_dtoa_r+0x95c>
 800560c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005610:	462a      	mov	r2, r5
 8005612:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005616:	f7fb fa61 	bl	8000adc <__aeabi_dcmplt>
 800561a:	bb38      	cbnz	r0, 800566c <_dtoa_r+0x48c>
 800561c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8005620:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005624:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005626:	2b00      	cmp	r3, #0
 8005628:	f2c0 8157 	blt.w	80058da <_dtoa_r+0x6fa>
 800562c:	2f0e      	cmp	r7, #14
 800562e:	f300 8154 	bgt.w	80058da <_dtoa_r+0x6fa>
 8005632:	4b4b      	ldr	r3, [pc, #300]	@ (8005760 <_dtoa_r+0x580>)
 8005634:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005638:	ed93 7b00 	vldr	d7, [r3]
 800563c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800563e:	2b00      	cmp	r3, #0
 8005640:	ed8d 7b00 	vstr	d7, [sp]
 8005644:	f280 80e5 	bge.w	8005812 <_dtoa_r+0x632>
 8005648:	9b03      	ldr	r3, [sp, #12]
 800564a:	2b00      	cmp	r3, #0
 800564c:	f300 80e1 	bgt.w	8005812 <_dtoa_r+0x632>
 8005650:	d10c      	bne.n	800566c <_dtoa_r+0x48c>
 8005652:	4b48      	ldr	r3, [pc, #288]	@ (8005774 <_dtoa_r+0x594>)
 8005654:	2200      	movs	r2, #0
 8005656:	ec51 0b17 	vmov	r0, r1, d7
 800565a:	f7fa ffcd 	bl	80005f8 <__aeabi_dmul>
 800565e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005662:	f7fb fa4f 	bl	8000b04 <__aeabi_dcmpge>
 8005666:	2800      	cmp	r0, #0
 8005668:	f000 8266 	beq.w	8005b38 <_dtoa_r+0x958>
 800566c:	2400      	movs	r4, #0
 800566e:	4625      	mov	r5, r4
 8005670:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005672:	4656      	mov	r6, sl
 8005674:	ea6f 0803 	mvn.w	r8, r3
 8005678:	2700      	movs	r7, #0
 800567a:	4621      	mov	r1, r4
 800567c:	4648      	mov	r0, r9
 800567e:	f000 fcbf 	bl	8006000 <_Bfree>
 8005682:	2d00      	cmp	r5, #0
 8005684:	f000 80bd 	beq.w	8005802 <_dtoa_r+0x622>
 8005688:	b12f      	cbz	r7, 8005696 <_dtoa_r+0x4b6>
 800568a:	42af      	cmp	r7, r5
 800568c:	d003      	beq.n	8005696 <_dtoa_r+0x4b6>
 800568e:	4639      	mov	r1, r7
 8005690:	4648      	mov	r0, r9
 8005692:	f000 fcb5 	bl	8006000 <_Bfree>
 8005696:	4629      	mov	r1, r5
 8005698:	4648      	mov	r0, r9
 800569a:	f000 fcb1 	bl	8006000 <_Bfree>
 800569e:	e0b0      	b.n	8005802 <_dtoa_r+0x622>
 80056a0:	07e2      	lsls	r2, r4, #31
 80056a2:	d505      	bpl.n	80056b0 <_dtoa_r+0x4d0>
 80056a4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80056a8:	f7fa ffa6 	bl	80005f8 <__aeabi_dmul>
 80056ac:	3601      	adds	r6, #1
 80056ae:	2301      	movs	r3, #1
 80056b0:	1064      	asrs	r4, r4, #1
 80056b2:	3508      	adds	r5, #8
 80056b4:	e762      	b.n	800557c <_dtoa_r+0x39c>
 80056b6:	2602      	movs	r6, #2
 80056b8:	e765      	b.n	8005586 <_dtoa_r+0x3a6>
 80056ba:	9c03      	ldr	r4, [sp, #12]
 80056bc:	46b8      	mov	r8, r7
 80056be:	e784      	b.n	80055ca <_dtoa_r+0x3ea>
 80056c0:	4b27      	ldr	r3, [pc, #156]	@ (8005760 <_dtoa_r+0x580>)
 80056c2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80056c4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80056c8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80056cc:	4454      	add	r4, sl
 80056ce:	2900      	cmp	r1, #0
 80056d0:	d054      	beq.n	800577c <_dtoa_r+0x59c>
 80056d2:	4929      	ldr	r1, [pc, #164]	@ (8005778 <_dtoa_r+0x598>)
 80056d4:	2000      	movs	r0, #0
 80056d6:	f7fb f8b9 	bl	800084c <__aeabi_ddiv>
 80056da:	4633      	mov	r3, r6
 80056dc:	462a      	mov	r2, r5
 80056de:	f7fa fdd3 	bl	8000288 <__aeabi_dsub>
 80056e2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80056e6:	4656      	mov	r6, sl
 80056e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80056ec:	f7fb fa34 	bl	8000b58 <__aeabi_d2iz>
 80056f0:	4605      	mov	r5, r0
 80056f2:	f7fa ff17 	bl	8000524 <__aeabi_i2d>
 80056f6:	4602      	mov	r2, r0
 80056f8:	460b      	mov	r3, r1
 80056fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80056fe:	f7fa fdc3 	bl	8000288 <__aeabi_dsub>
 8005702:	3530      	adds	r5, #48	@ 0x30
 8005704:	4602      	mov	r2, r0
 8005706:	460b      	mov	r3, r1
 8005708:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800570c:	f806 5b01 	strb.w	r5, [r6], #1
 8005710:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005714:	f7fb f9e2 	bl	8000adc <__aeabi_dcmplt>
 8005718:	2800      	cmp	r0, #0
 800571a:	d172      	bne.n	8005802 <_dtoa_r+0x622>
 800571c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005720:	4911      	ldr	r1, [pc, #68]	@ (8005768 <_dtoa_r+0x588>)
 8005722:	2000      	movs	r0, #0
 8005724:	f7fa fdb0 	bl	8000288 <__aeabi_dsub>
 8005728:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800572c:	f7fb f9d6 	bl	8000adc <__aeabi_dcmplt>
 8005730:	2800      	cmp	r0, #0
 8005732:	f040 80b4 	bne.w	800589e <_dtoa_r+0x6be>
 8005736:	42a6      	cmp	r6, r4
 8005738:	f43f af70 	beq.w	800561c <_dtoa_r+0x43c>
 800573c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005740:	4b0a      	ldr	r3, [pc, #40]	@ (800576c <_dtoa_r+0x58c>)
 8005742:	2200      	movs	r2, #0
 8005744:	f7fa ff58 	bl	80005f8 <__aeabi_dmul>
 8005748:	4b08      	ldr	r3, [pc, #32]	@ (800576c <_dtoa_r+0x58c>)
 800574a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800574e:	2200      	movs	r2, #0
 8005750:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005754:	f7fa ff50 	bl	80005f8 <__aeabi_dmul>
 8005758:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800575c:	e7c4      	b.n	80056e8 <_dtoa_r+0x508>
 800575e:	bf00      	nop
 8005760:	08007e98 	.word	0x08007e98
 8005764:	08007e70 	.word	0x08007e70
 8005768:	3ff00000 	.word	0x3ff00000
 800576c:	40240000 	.word	0x40240000
 8005770:	401c0000 	.word	0x401c0000
 8005774:	40140000 	.word	0x40140000
 8005778:	3fe00000 	.word	0x3fe00000
 800577c:	4631      	mov	r1, r6
 800577e:	4628      	mov	r0, r5
 8005780:	f7fa ff3a 	bl	80005f8 <__aeabi_dmul>
 8005784:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005788:	9413      	str	r4, [sp, #76]	@ 0x4c
 800578a:	4656      	mov	r6, sl
 800578c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005790:	f7fb f9e2 	bl	8000b58 <__aeabi_d2iz>
 8005794:	4605      	mov	r5, r0
 8005796:	f7fa fec5 	bl	8000524 <__aeabi_i2d>
 800579a:	4602      	mov	r2, r0
 800579c:	460b      	mov	r3, r1
 800579e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057a2:	f7fa fd71 	bl	8000288 <__aeabi_dsub>
 80057a6:	3530      	adds	r5, #48	@ 0x30
 80057a8:	f806 5b01 	strb.w	r5, [r6], #1
 80057ac:	4602      	mov	r2, r0
 80057ae:	460b      	mov	r3, r1
 80057b0:	42a6      	cmp	r6, r4
 80057b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80057b6:	f04f 0200 	mov.w	r2, #0
 80057ba:	d124      	bne.n	8005806 <_dtoa_r+0x626>
 80057bc:	4baf      	ldr	r3, [pc, #700]	@ (8005a7c <_dtoa_r+0x89c>)
 80057be:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80057c2:	f7fa fd63 	bl	800028c <__adddf3>
 80057c6:	4602      	mov	r2, r0
 80057c8:	460b      	mov	r3, r1
 80057ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057ce:	f7fb f9a3 	bl	8000b18 <__aeabi_dcmpgt>
 80057d2:	2800      	cmp	r0, #0
 80057d4:	d163      	bne.n	800589e <_dtoa_r+0x6be>
 80057d6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80057da:	49a8      	ldr	r1, [pc, #672]	@ (8005a7c <_dtoa_r+0x89c>)
 80057dc:	2000      	movs	r0, #0
 80057de:	f7fa fd53 	bl	8000288 <__aeabi_dsub>
 80057e2:	4602      	mov	r2, r0
 80057e4:	460b      	mov	r3, r1
 80057e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057ea:	f7fb f977 	bl	8000adc <__aeabi_dcmplt>
 80057ee:	2800      	cmp	r0, #0
 80057f0:	f43f af14 	beq.w	800561c <_dtoa_r+0x43c>
 80057f4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80057f6:	1e73      	subs	r3, r6, #1
 80057f8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80057fa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80057fe:	2b30      	cmp	r3, #48	@ 0x30
 8005800:	d0f8      	beq.n	80057f4 <_dtoa_r+0x614>
 8005802:	4647      	mov	r7, r8
 8005804:	e03b      	b.n	800587e <_dtoa_r+0x69e>
 8005806:	4b9e      	ldr	r3, [pc, #632]	@ (8005a80 <_dtoa_r+0x8a0>)
 8005808:	f7fa fef6 	bl	80005f8 <__aeabi_dmul>
 800580c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005810:	e7bc      	b.n	800578c <_dtoa_r+0x5ac>
 8005812:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8005816:	4656      	mov	r6, sl
 8005818:	e9dd 2300 	ldrd	r2, r3, [sp]
 800581c:	4620      	mov	r0, r4
 800581e:	4629      	mov	r1, r5
 8005820:	f7fb f814 	bl	800084c <__aeabi_ddiv>
 8005824:	f7fb f998 	bl	8000b58 <__aeabi_d2iz>
 8005828:	4680      	mov	r8, r0
 800582a:	f7fa fe7b 	bl	8000524 <__aeabi_i2d>
 800582e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005832:	f7fa fee1 	bl	80005f8 <__aeabi_dmul>
 8005836:	4602      	mov	r2, r0
 8005838:	460b      	mov	r3, r1
 800583a:	4620      	mov	r0, r4
 800583c:	4629      	mov	r1, r5
 800583e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005842:	f7fa fd21 	bl	8000288 <__aeabi_dsub>
 8005846:	f806 4b01 	strb.w	r4, [r6], #1
 800584a:	9d03      	ldr	r5, [sp, #12]
 800584c:	eba6 040a 	sub.w	r4, r6, sl
 8005850:	42a5      	cmp	r5, r4
 8005852:	4602      	mov	r2, r0
 8005854:	460b      	mov	r3, r1
 8005856:	d133      	bne.n	80058c0 <_dtoa_r+0x6e0>
 8005858:	f7fa fd18 	bl	800028c <__adddf3>
 800585c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005860:	4604      	mov	r4, r0
 8005862:	460d      	mov	r5, r1
 8005864:	f7fb f958 	bl	8000b18 <__aeabi_dcmpgt>
 8005868:	b9c0      	cbnz	r0, 800589c <_dtoa_r+0x6bc>
 800586a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800586e:	4620      	mov	r0, r4
 8005870:	4629      	mov	r1, r5
 8005872:	f7fb f929 	bl	8000ac8 <__aeabi_dcmpeq>
 8005876:	b110      	cbz	r0, 800587e <_dtoa_r+0x69e>
 8005878:	f018 0f01 	tst.w	r8, #1
 800587c:	d10e      	bne.n	800589c <_dtoa_r+0x6bc>
 800587e:	9902      	ldr	r1, [sp, #8]
 8005880:	4648      	mov	r0, r9
 8005882:	f000 fbbd 	bl	8006000 <_Bfree>
 8005886:	2300      	movs	r3, #0
 8005888:	7033      	strb	r3, [r6, #0]
 800588a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800588c:	3701      	adds	r7, #1
 800588e:	601f      	str	r7, [r3, #0]
 8005890:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005892:	2b00      	cmp	r3, #0
 8005894:	f000 824b 	beq.w	8005d2e <_dtoa_r+0xb4e>
 8005898:	601e      	str	r6, [r3, #0]
 800589a:	e248      	b.n	8005d2e <_dtoa_r+0xb4e>
 800589c:	46b8      	mov	r8, r7
 800589e:	4633      	mov	r3, r6
 80058a0:	461e      	mov	r6, r3
 80058a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80058a6:	2a39      	cmp	r2, #57	@ 0x39
 80058a8:	d106      	bne.n	80058b8 <_dtoa_r+0x6d8>
 80058aa:	459a      	cmp	sl, r3
 80058ac:	d1f8      	bne.n	80058a0 <_dtoa_r+0x6c0>
 80058ae:	2230      	movs	r2, #48	@ 0x30
 80058b0:	f108 0801 	add.w	r8, r8, #1
 80058b4:	f88a 2000 	strb.w	r2, [sl]
 80058b8:	781a      	ldrb	r2, [r3, #0]
 80058ba:	3201      	adds	r2, #1
 80058bc:	701a      	strb	r2, [r3, #0]
 80058be:	e7a0      	b.n	8005802 <_dtoa_r+0x622>
 80058c0:	4b6f      	ldr	r3, [pc, #444]	@ (8005a80 <_dtoa_r+0x8a0>)
 80058c2:	2200      	movs	r2, #0
 80058c4:	f7fa fe98 	bl	80005f8 <__aeabi_dmul>
 80058c8:	2200      	movs	r2, #0
 80058ca:	2300      	movs	r3, #0
 80058cc:	4604      	mov	r4, r0
 80058ce:	460d      	mov	r5, r1
 80058d0:	f7fb f8fa 	bl	8000ac8 <__aeabi_dcmpeq>
 80058d4:	2800      	cmp	r0, #0
 80058d6:	d09f      	beq.n	8005818 <_dtoa_r+0x638>
 80058d8:	e7d1      	b.n	800587e <_dtoa_r+0x69e>
 80058da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80058dc:	2a00      	cmp	r2, #0
 80058de:	f000 80ea 	beq.w	8005ab6 <_dtoa_r+0x8d6>
 80058e2:	9a07      	ldr	r2, [sp, #28]
 80058e4:	2a01      	cmp	r2, #1
 80058e6:	f300 80cd 	bgt.w	8005a84 <_dtoa_r+0x8a4>
 80058ea:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80058ec:	2a00      	cmp	r2, #0
 80058ee:	f000 80c1 	beq.w	8005a74 <_dtoa_r+0x894>
 80058f2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80058f6:	9c08      	ldr	r4, [sp, #32]
 80058f8:	9e00      	ldr	r6, [sp, #0]
 80058fa:	9a00      	ldr	r2, [sp, #0]
 80058fc:	441a      	add	r2, r3
 80058fe:	9200      	str	r2, [sp, #0]
 8005900:	9a06      	ldr	r2, [sp, #24]
 8005902:	2101      	movs	r1, #1
 8005904:	441a      	add	r2, r3
 8005906:	4648      	mov	r0, r9
 8005908:	9206      	str	r2, [sp, #24]
 800590a:	f000 fc2d 	bl	8006168 <__i2b>
 800590e:	4605      	mov	r5, r0
 8005910:	b166      	cbz	r6, 800592c <_dtoa_r+0x74c>
 8005912:	9b06      	ldr	r3, [sp, #24]
 8005914:	2b00      	cmp	r3, #0
 8005916:	dd09      	ble.n	800592c <_dtoa_r+0x74c>
 8005918:	42b3      	cmp	r3, r6
 800591a:	9a00      	ldr	r2, [sp, #0]
 800591c:	bfa8      	it	ge
 800591e:	4633      	movge	r3, r6
 8005920:	1ad2      	subs	r2, r2, r3
 8005922:	9200      	str	r2, [sp, #0]
 8005924:	9a06      	ldr	r2, [sp, #24]
 8005926:	1af6      	subs	r6, r6, r3
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	9306      	str	r3, [sp, #24]
 800592c:	9b08      	ldr	r3, [sp, #32]
 800592e:	b30b      	cbz	r3, 8005974 <_dtoa_r+0x794>
 8005930:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005932:	2b00      	cmp	r3, #0
 8005934:	f000 80c6 	beq.w	8005ac4 <_dtoa_r+0x8e4>
 8005938:	2c00      	cmp	r4, #0
 800593a:	f000 80c0 	beq.w	8005abe <_dtoa_r+0x8de>
 800593e:	4629      	mov	r1, r5
 8005940:	4622      	mov	r2, r4
 8005942:	4648      	mov	r0, r9
 8005944:	f000 fcc8 	bl	80062d8 <__pow5mult>
 8005948:	9a02      	ldr	r2, [sp, #8]
 800594a:	4601      	mov	r1, r0
 800594c:	4605      	mov	r5, r0
 800594e:	4648      	mov	r0, r9
 8005950:	f000 fc20 	bl	8006194 <__multiply>
 8005954:	9902      	ldr	r1, [sp, #8]
 8005956:	4680      	mov	r8, r0
 8005958:	4648      	mov	r0, r9
 800595a:	f000 fb51 	bl	8006000 <_Bfree>
 800595e:	9b08      	ldr	r3, [sp, #32]
 8005960:	1b1b      	subs	r3, r3, r4
 8005962:	9308      	str	r3, [sp, #32]
 8005964:	f000 80b1 	beq.w	8005aca <_dtoa_r+0x8ea>
 8005968:	9a08      	ldr	r2, [sp, #32]
 800596a:	4641      	mov	r1, r8
 800596c:	4648      	mov	r0, r9
 800596e:	f000 fcb3 	bl	80062d8 <__pow5mult>
 8005972:	9002      	str	r0, [sp, #8]
 8005974:	2101      	movs	r1, #1
 8005976:	4648      	mov	r0, r9
 8005978:	f000 fbf6 	bl	8006168 <__i2b>
 800597c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800597e:	4604      	mov	r4, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	f000 81d8 	beq.w	8005d36 <_dtoa_r+0xb56>
 8005986:	461a      	mov	r2, r3
 8005988:	4601      	mov	r1, r0
 800598a:	4648      	mov	r0, r9
 800598c:	f000 fca4 	bl	80062d8 <__pow5mult>
 8005990:	9b07      	ldr	r3, [sp, #28]
 8005992:	2b01      	cmp	r3, #1
 8005994:	4604      	mov	r4, r0
 8005996:	f300 809f 	bgt.w	8005ad8 <_dtoa_r+0x8f8>
 800599a:	9b04      	ldr	r3, [sp, #16]
 800599c:	2b00      	cmp	r3, #0
 800599e:	f040 8097 	bne.w	8005ad0 <_dtoa_r+0x8f0>
 80059a2:	9b05      	ldr	r3, [sp, #20]
 80059a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	f040 8093 	bne.w	8005ad4 <_dtoa_r+0x8f4>
 80059ae:	9b05      	ldr	r3, [sp, #20]
 80059b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80059b4:	0d1b      	lsrs	r3, r3, #20
 80059b6:	051b      	lsls	r3, r3, #20
 80059b8:	b133      	cbz	r3, 80059c8 <_dtoa_r+0x7e8>
 80059ba:	9b00      	ldr	r3, [sp, #0]
 80059bc:	3301      	adds	r3, #1
 80059be:	9300      	str	r3, [sp, #0]
 80059c0:	9b06      	ldr	r3, [sp, #24]
 80059c2:	3301      	adds	r3, #1
 80059c4:	9306      	str	r3, [sp, #24]
 80059c6:	2301      	movs	r3, #1
 80059c8:	9308      	str	r3, [sp, #32]
 80059ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	f000 81b8 	beq.w	8005d42 <_dtoa_r+0xb62>
 80059d2:	6923      	ldr	r3, [r4, #16]
 80059d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80059d8:	6918      	ldr	r0, [r3, #16]
 80059da:	f000 fb79 	bl	80060d0 <__hi0bits>
 80059de:	f1c0 0020 	rsb	r0, r0, #32
 80059e2:	9b06      	ldr	r3, [sp, #24]
 80059e4:	4418      	add	r0, r3
 80059e6:	f010 001f 	ands.w	r0, r0, #31
 80059ea:	f000 8082 	beq.w	8005af2 <_dtoa_r+0x912>
 80059ee:	f1c0 0320 	rsb	r3, r0, #32
 80059f2:	2b04      	cmp	r3, #4
 80059f4:	dd73      	ble.n	8005ade <_dtoa_r+0x8fe>
 80059f6:	9b00      	ldr	r3, [sp, #0]
 80059f8:	f1c0 001c 	rsb	r0, r0, #28
 80059fc:	4403      	add	r3, r0
 80059fe:	9300      	str	r3, [sp, #0]
 8005a00:	9b06      	ldr	r3, [sp, #24]
 8005a02:	4403      	add	r3, r0
 8005a04:	4406      	add	r6, r0
 8005a06:	9306      	str	r3, [sp, #24]
 8005a08:	9b00      	ldr	r3, [sp, #0]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	dd05      	ble.n	8005a1a <_dtoa_r+0x83a>
 8005a0e:	9902      	ldr	r1, [sp, #8]
 8005a10:	461a      	mov	r2, r3
 8005a12:	4648      	mov	r0, r9
 8005a14:	f000 fcba 	bl	800638c <__lshift>
 8005a18:	9002      	str	r0, [sp, #8]
 8005a1a:	9b06      	ldr	r3, [sp, #24]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	dd05      	ble.n	8005a2c <_dtoa_r+0x84c>
 8005a20:	4621      	mov	r1, r4
 8005a22:	461a      	mov	r2, r3
 8005a24:	4648      	mov	r0, r9
 8005a26:	f000 fcb1 	bl	800638c <__lshift>
 8005a2a:	4604      	mov	r4, r0
 8005a2c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d061      	beq.n	8005af6 <_dtoa_r+0x916>
 8005a32:	9802      	ldr	r0, [sp, #8]
 8005a34:	4621      	mov	r1, r4
 8005a36:	f000 fd15 	bl	8006464 <__mcmp>
 8005a3a:	2800      	cmp	r0, #0
 8005a3c:	da5b      	bge.n	8005af6 <_dtoa_r+0x916>
 8005a3e:	2300      	movs	r3, #0
 8005a40:	9902      	ldr	r1, [sp, #8]
 8005a42:	220a      	movs	r2, #10
 8005a44:	4648      	mov	r0, r9
 8005a46:	f000 fafd 	bl	8006044 <__multadd>
 8005a4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a4c:	9002      	str	r0, [sp, #8]
 8005a4e:	f107 38ff 	add.w	r8, r7, #4294967295
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	f000 8177 	beq.w	8005d46 <_dtoa_r+0xb66>
 8005a58:	4629      	mov	r1, r5
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	220a      	movs	r2, #10
 8005a5e:	4648      	mov	r0, r9
 8005a60:	f000 faf0 	bl	8006044 <__multadd>
 8005a64:	f1bb 0f00 	cmp.w	fp, #0
 8005a68:	4605      	mov	r5, r0
 8005a6a:	dc6f      	bgt.n	8005b4c <_dtoa_r+0x96c>
 8005a6c:	9b07      	ldr	r3, [sp, #28]
 8005a6e:	2b02      	cmp	r3, #2
 8005a70:	dc49      	bgt.n	8005b06 <_dtoa_r+0x926>
 8005a72:	e06b      	b.n	8005b4c <_dtoa_r+0x96c>
 8005a74:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005a76:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005a7a:	e73c      	b.n	80058f6 <_dtoa_r+0x716>
 8005a7c:	3fe00000 	.word	0x3fe00000
 8005a80:	40240000 	.word	0x40240000
 8005a84:	9b03      	ldr	r3, [sp, #12]
 8005a86:	1e5c      	subs	r4, r3, #1
 8005a88:	9b08      	ldr	r3, [sp, #32]
 8005a8a:	42a3      	cmp	r3, r4
 8005a8c:	db09      	blt.n	8005aa2 <_dtoa_r+0x8c2>
 8005a8e:	1b1c      	subs	r4, r3, r4
 8005a90:	9b03      	ldr	r3, [sp, #12]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	f6bf af30 	bge.w	80058f8 <_dtoa_r+0x718>
 8005a98:	9b00      	ldr	r3, [sp, #0]
 8005a9a:	9a03      	ldr	r2, [sp, #12]
 8005a9c:	1a9e      	subs	r6, r3, r2
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	e72b      	b.n	80058fa <_dtoa_r+0x71a>
 8005aa2:	9b08      	ldr	r3, [sp, #32]
 8005aa4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005aa6:	9408      	str	r4, [sp, #32]
 8005aa8:	1ae3      	subs	r3, r4, r3
 8005aaa:	441a      	add	r2, r3
 8005aac:	9e00      	ldr	r6, [sp, #0]
 8005aae:	9b03      	ldr	r3, [sp, #12]
 8005ab0:	920d      	str	r2, [sp, #52]	@ 0x34
 8005ab2:	2400      	movs	r4, #0
 8005ab4:	e721      	b.n	80058fa <_dtoa_r+0x71a>
 8005ab6:	9c08      	ldr	r4, [sp, #32]
 8005ab8:	9e00      	ldr	r6, [sp, #0]
 8005aba:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8005abc:	e728      	b.n	8005910 <_dtoa_r+0x730>
 8005abe:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005ac2:	e751      	b.n	8005968 <_dtoa_r+0x788>
 8005ac4:	9a08      	ldr	r2, [sp, #32]
 8005ac6:	9902      	ldr	r1, [sp, #8]
 8005ac8:	e750      	b.n	800596c <_dtoa_r+0x78c>
 8005aca:	f8cd 8008 	str.w	r8, [sp, #8]
 8005ace:	e751      	b.n	8005974 <_dtoa_r+0x794>
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	e779      	b.n	80059c8 <_dtoa_r+0x7e8>
 8005ad4:	9b04      	ldr	r3, [sp, #16]
 8005ad6:	e777      	b.n	80059c8 <_dtoa_r+0x7e8>
 8005ad8:	2300      	movs	r3, #0
 8005ada:	9308      	str	r3, [sp, #32]
 8005adc:	e779      	b.n	80059d2 <_dtoa_r+0x7f2>
 8005ade:	d093      	beq.n	8005a08 <_dtoa_r+0x828>
 8005ae0:	9a00      	ldr	r2, [sp, #0]
 8005ae2:	331c      	adds	r3, #28
 8005ae4:	441a      	add	r2, r3
 8005ae6:	9200      	str	r2, [sp, #0]
 8005ae8:	9a06      	ldr	r2, [sp, #24]
 8005aea:	441a      	add	r2, r3
 8005aec:	441e      	add	r6, r3
 8005aee:	9206      	str	r2, [sp, #24]
 8005af0:	e78a      	b.n	8005a08 <_dtoa_r+0x828>
 8005af2:	4603      	mov	r3, r0
 8005af4:	e7f4      	b.n	8005ae0 <_dtoa_r+0x900>
 8005af6:	9b03      	ldr	r3, [sp, #12]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	46b8      	mov	r8, r7
 8005afc:	dc20      	bgt.n	8005b40 <_dtoa_r+0x960>
 8005afe:	469b      	mov	fp, r3
 8005b00:	9b07      	ldr	r3, [sp, #28]
 8005b02:	2b02      	cmp	r3, #2
 8005b04:	dd1e      	ble.n	8005b44 <_dtoa_r+0x964>
 8005b06:	f1bb 0f00 	cmp.w	fp, #0
 8005b0a:	f47f adb1 	bne.w	8005670 <_dtoa_r+0x490>
 8005b0e:	4621      	mov	r1, r4
 8005b10:	465b      	mov	r3, fp
 8005b12:	2205      	movs	r2, #5
 8005b14:	4648      	mov	r0, r9
 8005b16:	f000 fa95 	bl	8006044 <__multadd>
 8005b1a:	4601      	mov	r1, r0
 8005b1c:	4604      	mov	r4, r0
 8005b1e:	9802      	ldr	r0, [sp, #8]
 8005b20:	f000 fca0 	bl	8006464 <__mcmp>
 8005b24:	2800      	cmp	r0, #0
 8005b26:	f77f ada3 	ble.w	8005670 <_dtoa_r+0x490>
 8005b2a:	4656      	mov	r6, sl
 8005b2c:	2331      	movs	r3, #49	@ 0x31
 8005b2e:	f806 3b01 	strb.w	r3, [r6], #1
 8005b32:	f108 0801 	add.w	r8, r8, #1
 8005b36:	e59f      	b.n	8005678 <_dtoa_r+0x498>
 8005b38:	9c03      	ldr	r4, [sp, #12]
 8005b3a:	46b8      	mov	r8, r7
 8005b3c:	4625      	mov	r5, r4
 8005b3e:	e7f4      	b.n	8005b2a <_dtoa_r+0x94a>
 8005b40:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8005b44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	f000 8101 	beq.w	8005d4e <_dtoa_r+0xb6e>
 8005b4c:	2e00      	cmp	r6, #0
 8005b4e:	dd05      	ble.n	8005b5c <_dtoa_r+0x97c>
 8005b50:	4629      	mov	r1, r5
 8005b52:	4632      	mov	r2, r6
 8005b54:	4648      	mov	r0, r9
 8005b56:	f000 fc19 	bl	800638c <__lshift>
 8005b5a:	4605      	mov	r5, r0
 8005b5c:	9b08      	ldr	r3, [sp, #32]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d05c      	beq.n	8005c1c <_dtoa_r+0xa3c>
 8005b62:	6869      	ldr	r1, [r5, #4]
 8005b64:	4648      	mov	r0, r9
 8005b66:	f000 fa0b 	bl	8005f80 <_Balloc>
 8005b6a:	4606      	mov	r6, r0
 8005b6c:	b928      	cbnz	r0, 8005b7a <_dtoa_r+0x99a>
 8005b6e:	4b82      	ldr	r3, [pc, #520]	@ (8005d78 <_dtoa_r+0xb98>)
 8005b70:	4602      	mov	r2, r0
 8005b72:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005b76:	f7ff bb4a 	b.w	800520e <_dtoa_r+0x2e>
 8005b7a:	692a      	ldr	r2, [r5, #16]
 8005b7c:	3202      	adds	r2, #2
 8005b7e:	0092      	lsls	r2, r2, #2
 8005b80:	f105 010c 	add.w	r1, r5, #12
 8005b84:	300c      	adds	r0, #12
 8005b86:	f7ff fa94 	bl	80050b2 <memcpy>
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	4631      	mov	r1, r6
 8005b8e:	4648      	mov	r0, r9
 8005b90:	f000 fbfc 	bl	800638c <__lshift>
 8005b94:	f10a 0301 	add.w	r3, sl, #1
 8005b98:	9300      	str	r3, [sp, #0]
 8005b9a:	eb0a 030b 	add.w	r3, sl, fp
 8005b9e:	9308      	str	r3, [sp, #32]
 8005ba0:	9b04      	ldr	r3, [sp, #16]
 8005ba2:	f003 0301 	and.w	r3, r3, #1
 8005ba6:	462f      	mov	r7, r5
 8005ba8:	9306      	str	r3, [sp, #24]
 8005baa:	4605      	mov	r5, r0
 8005bac:	9b00      	ldr	r3, [sp, #0]
 8005bae:	9802      	ldr	r0, [sp, #8]
 8005bb0:	4621      	mov	r1, r4
 8005bb2:	f103 3bff 	add.w	fp, r3, #4294967295
 8005bb6:	f7ff fa8a 	bl	80050ce <quorem>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	3330      	adds	r3, #48	@ 0x30
 8005bbe:	9003      	str	r0, [sp, #12]
 8005bc0:	4639      	mov	r1, r7
 8005bc2:	9802      	ldr	r0, [sp, #8]
 8005bc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005bc6:	f000 fc4d 	bl	8006464 <__mcmp>
 8005bca:	462a      	mov	r2, r5
 8005bcc:	9004      	str	r0, [sp, #16]
 8005bce:	4621      	mov	r1, r4
 8005bd0:	4648      	mov	r0, r9
 8005bd2:	f000 fc63 	bl	800649c <__mdiff>
 8005bd6:	68c2      	ldr	r2, [r0, #12]
 8005bd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bda:	4606      	mov	r6, r0
 8005bdc:	bb02      	cbnz	r2, 8005c20 <_dtoa_r+0xa40>
 8005bde:	4601      	mov	r1, r0
 8005be0:	9802      	ldr	r0, [sp, #8]
 8005be2:	f000 fc3f 	bl	8006464 <__mcmp>
 8005be6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005be8:	4602      	mov	r2, r0
 8005bea:	4631      	mov	r1, r6
 8005bec:	4648      	mov	r0, r9
 8005bee:	920c      	str	r2, [sp, #48]	@ 0x30
 8005bf0:	9309      	str	r3, [sp, #36]	@ 0x24
 8005bf2:	f000 fa05 	bl	8006000 <_Bfree>
 8005bf6:	9b07      	ldr	r3, [sp, #28]
 8005bf8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005bfa:	9e00      	ldr	r6, [sp, #0]
 8005bfc:	ea42 0103 	orr.w	r1, r2, r3
 8005c00:	9b06      	ldr	r3, [sp, #24]
 8005c02:	4319      	orrs	r1, r3
 8005c04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c06:	d10d      	bne.n	8005c24 <_dtoa_r+0xa44>
 8005c08:	2b39      	cmp	r3, #57	@ 0x39
 8005c0a:	d027      	beq.n	8005c5c <_dtoa_r+0xa7c>
 8005c0c:	9a04      	ldr	r2, [sp, #16]
 8005c0e:	2a00      	cmp	r2, #0
 8005c10:	dd01      	ble.n	8005c16 <_dtoa_r+0xa36>
 8005c12:	9b03      	ldr	r3, [sp, #12]
 8005c14:	3331      	adds	r3, #49	@ 0x31
 8005c16:	f88b 3000 	strb.w	r3, [fp]
 8005c1a:	e52e      	b.n	800567a <_dtoa_r+0x49a>
 8005c1c:	4628      	mov	r0, r5
 8005c1e:	e7b9      	b.n	8005b94 <_dtoa_r+0x9b4>
 8005c20:	2201      	movs	r2, #1
 8005c22:	e7e2      	b.n	8005bea <_dtoa_r+0xa0a>
 8005c24:	9904      	ldr	r1, [sp, #16]
 8005c26:	2900      	cmp	r1, #0
 8005c28:	db04      	blt.n	8005c34 <_dtoa_r+0xa54>
 8005c2a:	9807      	ldr	r0, [sp, #28]
 8005c2c:	4301      	orrs	r1, r0
 8005c2e:	9806      	ldr	r0, [sp, #24]
 8005c30:	4301      	orrs	r1, r0
 8005c32:	d120      	bne.n	8005c76 <_dtoa_r+0xa96>
 8005c34:	2a00      	cmp	r2, #0
 8005c36:	ddee      	ble.n	8005c16 <_dtoa_r+0xa36>
 8005c38:	9902      	ldr	r1, [sp, #8]
 8005c3a:	9300      	str	r3, [sp, #0]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	4648      	mov	r0, r9
 8005c40:	f000 fba4 	bl	800638c <__lshift>
 8005c44:	4621      	mov	r1, r4
 8005c46:	9002      	str	r0, [sp, #8]
 8005c48:	f000 fc0c 	bl	8006464 <__mcmp>
 8005c4c:	2800      	cmp	r0, #0
 8005c4e:	9b00      	ldr	r3, [sp, #0]
 8005c50:	dc02      	bgt.n	8005c58 <_dtoa_r+0xa78>
 8005c52:	d1e0      	bne.n	8005c16 <_dtoa_r+0xa36>
 8005c54:	07da      	lsls	r2, r3, #31
 8005c56:	d5de      	bpl.n	8005c16 <_dtoa_r+0xa36>
 8005c58:	2b39      	cmp	r3, #57	@ 0x39
 8005c5a:	d1da      	bne.n	8005c12 <_dtoa_r+0xa32>
 8005c5c:	2339      	movs	r3, #57	@ 0x39
 8005c5e:	f88b 3000 	strb.w	r3, [fp]
 8005c62:	4633      	mov	r3, r6
 8005c64:	461e      	mov	r6, r3
 8005c66:	3b01      	subs	r3, #1
 8005c68:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005c6c:	2a39      	cmp	r2, #57	@ 0x39
 8005c6e:	d04e      	beq.n	8005d0e <_dtoa_r+0xb2e>
 8005c70:	3201      	adds	r2, #1
 8005c72:	701a      	strb	r2, [r3, #0]
 8005c74:	e501      	b.n	800567a <_dtoa_r+0x49a>
 8005c76:	2a00      	cmp	r2, #0
 8005c78:	dd03      	ble.n	8005c82 <_dtoa_r+0xaa2>
 8005c7a:	2b39      	cmp	r3, #57	@ 0x39
 8005c7c:	d0ee      	beq.n	8005c5c <_dtoa_r+0xa7c>
 8005c7e:	3301      	adds	r3, #1
 8005c80:	e7c9      	b.n	8005c16 <_dtoa_r+0xa36>
 8005c82:	9a00      	ldr	r2, [sp, #0]
 8005c84:	9908      	ldr	r1, [sp, #32]
 8005c86:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005c8a:	428a      	cmp	r2, r1
 8005c8c:	d028      	beq.n	8005ce0 <_dtoa_r+0xb00>
 8005c8e:	9902      	ldr	r1, [sp, #8]
 8005c90:	2300      	movs	r3, #0
 8005c92:	220a      	movs	r2, #10
 8005c94:	4648      	mov	r0, r9
 8005c96:	f000 f9d5 	bl	8006044 <__multadd>
 8005c9a:	42af      	cmp	r7, r5
 8005c9c:	9002      	str	r0, [sp, #8]
 8005c9e:	f04f 0300 	mov.w	r3, #0
 8005ca2:	f04f 020a 	mov.w	r2, #10
 8005ca6:	4639      	mov	r1, r7
 8005ca8:	4648      	mov	r0, r9
 8005caa:	d107      	bne.n	8005cbc <_dtoa_r+0xadc>
 8005cac:	f000 f9ca 	bl	8006044 <__multadd>
 8005cb0:	4607      	mov	r7, r0
 8005cb2:	4605      	mov	r5, r0
 8005cb4:	9b00      	ldr	r3, [sp, #0]
 8005cb6:	3301      	adds	r3, #1
 8005cb8:	9300      	str	r3, [sp, #0]
 8005cba:	e777      	b.n	8005bac <_dtoa_r+0x9cc>
 8005cbc:	f000 f9c2 	bl	8006044 <__multadd>
 8005cc0:	4629      	mov	r1, r5
 8005cc2:	4607      	mov	r7, r0
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	220a      	movs	r2, #10
 8005cc8:	4648      	mov	r0, r9
 8005cca:	f000 f9bb 	bl	8006044 <__multadd>
 8005cce:	4605      	mov	r5, r0
 8005cd0:	e7f0      	b.n	8005cb4 <_dtoa_r+0xad4>
 8005cd2:	f1bb 0f00 	cmp.w	fp, #0
 8005cd6:	bfcc      	ite	gt
 8005cd8:	465e      	movgt	r6, fp
 8005cda:	2601      	movle	r6, #1
 8005cdc:	4456      	add	r6, sl
 8005cde:	2700      	movs	r7, #0
 8005ce0:	9902      	ldr	r1, [sp, #8]
 8005ce2:	9300      	str	r3, [sp, #0]
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	4648      	mov	r0, r9
 8005ce8:	f000 fb50 	bl	800638c <__lshift>
 8005cec:	4621      	mov	r1, r4
 8005cee:	9002      	str	r0, [sp, #8]
 8005cf0:	f000 fbb8 	bl	8006464 <__mcmp>
 8005cf4:	2800      	cmp	r0, #0
 8005cf6:	dcb4      	bgt.n	8005c62 <_dtoa_r+0xa82>
 8005cf8:	d102      	bne.n	8005d00 <_dtoa_r+0xb20>
 8005cfa:	9b00      	ldr	r3, [sp, #0]
 8005cfc:	07db      	lsls	r3, r3, #31
 8005cfe:	d4b0      	bmi.n	8005c62 <_dtoa_r+0xa82>
 8005d00:	4633      	mov	r3, r6
 8005d02:	461e      	mov	r6, r3
 8005d04:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005d08:	2a30      	cmp	r2, #48	@ 0x30
 8005d0a:	d0fa      	beq.n	8005d02 <_dtoa_r+0xb22>
 8005d0c:	e4b5      	b.n	800567a <_dtoa_r+0x49a>
 8005d0e:	459a      	cmp	sl, r3
 8005d10:	d1a8      	bne.n	8005c64 <_dtoa_r+0xa84>
 8005d12:	2331      	movs	r3, #49	@ 0x31
 8005d14:	f108 0801 	add.w	r8, r8, #1
 8005d18:	f88a 3000 	strb.w	r3, [sl]
 8005d1c:	e4ad      	b.n	800567a <_dtoa_r+0x49a>
 8005d1e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005d20:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8005d7c <_dtoa_r+0xb9c>
 8005d24:	b11b      	cbz	r3, 8005d2e <_dtoa_r+0xb4e>
 8005d26:	f10a 0308 	add.w	r3, sl, #8
 8005d2a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8005d2c:	6013      	str	r3, [r2, #0]
 8005d2e:	4650      	mov	r0, sl
 8005d30:	b017      	add	sp, #92	@ 0x5c
 8005d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d36:	9b07      	ldr	r3, [sp, #28]
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	f77f ae2e 	ble.w	800599a <_dtoa_r+0x7ba>
 8005d3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005d40:	9308      	str	r3, [sp, #32]
 8005d42:	2001      	movs	r0, #1
 8005d44:	e64d      	b.n	80059e2 <_dtoa_r+0x802>
 8005d46:	f1bb 0f00 	cmp.w	fp, #0
 8005d4a:	f77f aed9 	ble.w	8005b00 <_dtoa_r+0x920>
 8005d4e:	4656      	mov	r6, sl
 8005d50:	9802      	ldr	r0, [sp, #8]
 8005d52:	4621      	mov	r1, r4
 8005d54:	f7ff f9bb 	bl	80050ce <quorem>
 8005d58:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8005d5c:	f806 3b01 	strb.w	r3, [r6], #1
 8005d60:	eba6 020a 	sub.w	r2, r6, sl
 8005d64:	4593      	cmp	fp, r2
 8005d66:	ddb4      	ble.n	8005cd2 <_dtoa_r+0xaf2>
 8005d68:	9902      	ldr	r1, [sp, #8]
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	220a      	movs	r2, #10
 8005d6e:	4648      	mov	r0, r9
 8005d70:	f000 f968 	bl	8006044 <__multadd>
 8005d74:	9002      	str	r0, [sp, #8]
 8005d76:	e7eb      	b.n	8005d50 <_dtoa_r+0xb70>
 8005d78:	08007da0 	.word	0x08007da0
 8005d7c:	08007d24 	.word	0x08007d24

08005d80 <_free_r>:
 8005d80:	b538      	push	{r3, r4, r5, lr}
 8005d82:	4605      	mov	r5, r0
 8005d84:	2900      	cmp	r1, #0
 8005d86:	d041      	beq.n	8005e0c <_free_r+0x8c>
 8005d88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d8c:	1f0c      	subs	r4, r1, #4
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	bfb8      	it	lt
 8005d92:	18e4      	addlt	r4, r4, r3
 8005d94:	f000 f8e8 	bl	8005f68 <__malloc_lock>
 8005d98:	4a1d      	ldr	r2, [pc, #116]	@ (8005e10 <_free_r+0x90>)
 8005d9a:	6813      	ldr	r3, [r2, #0]
 8005d9c:	b933      	cbnz	r3, 8005dac <_free_r+0x2c>
 8005d9e:	6063      	str	r3, [r4, #4]
 8005da0:	6014      	str	r4, [r2, #0]
 8005da2:	4628      	mov	r0, r5
 8005da4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005da8:	f000 b8e4 	b.w	8005f74 <__malloc_unlock>
 8005dac:	42a3      	cmp	r3, r4
 8005dae:	d908      	bls.n	8005dc2 <_free_r+0x42>
 8005db0:	6820      	ldr	r0, [r4, #0]
 8005db2:	1821      	adds	r1, r4, r0
 8005db4:	428b      	cmp	r3, r1
 8005db6:	bf01      	itttt	eq
 8005db8:	6819      	ldreq	r1, [r3, #0]
 8005dba:	685b      	ldreq	r3, [r3, #4]
 8005dbc:	1809      	addeq	r1, r1, r0
 8005dbe:	6021      	streq	r1, [r4, #0]
 8005dc0:	e7ed      	b.n	8005d9e <_free_r+0x1e>
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	b10b      	cbz	r3, 8005dcc <_free_r+0x4c>
 8005dc8:	42a3      	cmp	r3, r4
 8005dca:	d9fa      	bls.n	8005dc2 <_free_r+0x42>
 8005dcc:	6811      	ldr	r1, [r2, #0]
 8005dce:	1850      	adds	r0, r2, r1
 8005dd0:	42a0      	cmp	r0, r4
 8005dd2:	d10b      	bne.n	8005dec <_free_r+0x6c>
 8005dd4:	6820      	ldr	r0, [r4, #0]
 8005dd6:	4401      	add	r1, r0
 8005dd8:	1850      	adds	r0, r2, r1
 8005dda:	4283      	cmp	r3, r0
 8005ddc:	6011      	str	r1, [r2, #0]
 8005dde:	d1e0      	bne.n	8005da2 <_free_r+0x22>
 8005de0:	6818      	ldr	r0, [r3, #0]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	6053      	str	r3, [r2, #4]
 8005de6:	4408      	add	r0, r1
 8005de8:	6010      	str	r0, [r2, #0]
 8005dea:	e7da      	b.n	8005da2 <_free_r+0x22>
 8005dec:	d902      	bls.n	8005df4 <_free_r+0x74>
 8005dee:	230c      	movs	r3, #12
 8005df0:	602b      	str	r3, [r5, #0]
 8005df2:	e7d6      	b.n	8005da2 <_free_r+0x22>
 8005df4:	6820      	ldr	r0, [r4, #0]
 8005df6:	1821      	adds	r1, r4, r0
 8005df8:	428b      	cmp	r3, r1
 8005dfa:	bf04      	itt	eq
 8005dfc:	6819      	ldreq	r1, [r3, #0]
 8005dfe:	685b      	ldreq	r3, [r3, #4]
 8005e00:	6063      	str	r3, [r4, #4]
 8005e02:	bf04      	itt	eq
 8005e04:	1809      	addeq	r1, r1, r0
 8005e06:	6021      	streq	r1, [r4, #0]
 8005e08:	6054      	str	r4, [r2, #4]
 8005e0a:	e7ca      	b.n	8005da2 <_free_r+0x22>
 8005e0c:	bd38      	pop	{r3, r4, r5, pc}
 8005e0e:	bf00      	nop
 8005e10:	20000a7c 	.word	0x20000a7c

08005e14 <malloc>:
 8005e14:	4b02      	ldr	r3, [pc, #8]	@ (8005e20 <malloc+0xc>)
 8005e16:	4601      	mov	r1, r0
 8005e18:	6818      	ldr	r0, [r3, #0]
 8005e1a:	f000 b825 	b.w	8005e68 <_malloc_r>
 8005e1e:	bf00      	nop
 8005e20:	20000010 	.word	0x20000010

08005e24 <sbrk_aligned>:
 8005e24:	b570      	push	{r4, r5, r6, lr}
 8005e26:	4e0f      	ldr	r6, [pc, #60]	@ (8005e64 <sbrk_aligned+0x40>)
 8005e28:	460c      	mov	r4, r1
 8005e2a:	6831      	ldr	r1, [r6, #0]
 8005e2c:	4605      	mov	r5, r0
 8005e2e:	b911      	cbnz	r1, 8005e36 <sbrk_aligned+0x12>
 8005e30:	f000 fe3e 	bl	8006ab0 <_sbrk_r>
 8005e34:	6030      	str	r0, [r6, #0]
 8005e36:	4621      	mov	r1, r4
 8005e38:	4628      	mov	r0, r5
 8005e3a:	f000 fe39 	bl	8006ab0 <_sbrk_r>
 8005e3e:	1c43      	adds	r3, r0, #1
 8005e40:	d103      	bne.n	8005e4a <sbrk_aligned+0x26>
 8005e42:	f04f 34ff 	mov.w	r4, #4294967295
 8005e46:	4620      	mov	r0, r4
 8005e48:	bd70      	pop	{r4, r5, r6, pc}
 8005e4a:	1cc4      	adds	r4, r0, #3
 8005e4c:	f024 0403 	bic.w	r4, r4, #3
 8005e50:	42a0      	cmp	r0, r4
 8005e52:	d0f8      	beq.n	8005e46 <sbrk_aligned+0x22>
 8005e54:	1a21      	subs	r1, r4, r0
 8005e56:	4628      	mov	r0, r5
 8005e58:	f000 fe2a 	bl	8006ab0 <_sbrk_r>
 8005e5c:	3001      	adds	r0, #1
 8005e5e:	d1f2      	bne.n	8005e46 <sbrk_aligned+0x22>
 8005e60:	e7ef      	b.n	8005e42 <sbrk_aligned+0x1e>
 8005e62:	bf00      	nop
 8005e64:	20000a78 	.word	0x20000a78

08005e68 <_malloc_r>:
 8005e68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e6c:	1ccd      	adds	r5, r1, #3
 8005e6e:	f025 0503 	bic.w	r5, r5, #3
 8005e72:	3508      	adds	r5, #8
 8005e74:	2d0c      	cmp	r5, #12
 8005e76:	bf38      	it	cc
 8005e78:	250c      	movcc	r5, #12
 8005e7a:	2d00      	cmp	r5, #0
 8005e7c:	4606      	mov	r6, r0
 8005e7e:	db01      	blt.n	8005e84 <_malloc_r+0x1c>
 8005e80:	42a9      	cmp	r1, r5
 8005e82:	d904      	bls.n	8005e8e <_malloc_r+0x26>
 8005e84:	230c      	movs	r3, #12
 8005e86:	6033      	str	r3, [r6, #0]
 8005e88:	2000      	movs	r0, #0
 8005e8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e8e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005f64 <_malloc_r+0xfc>
 8005e92:	f000 f869 	bl	8005f68 <__malloc_lock>
 8005e96:	f8d8 3000 	ldr.w	r3, [r8]
 8005e9a:	461c      	mov	r4, r3
 8005e9c:	bb44      	cbnz	r4, 8005ef0 <_malloc_r+0x88>
 8005e9e:	4629      	mov	r1, r5
 8005ea0:	4630      	mov	r0, r6
 8005ea2:	f7ff ffbf 	bl	8005e24 <sbrk_aligned>
 8005ea6:	1c43      	adds	r3, r0, #1
 8005ea8:	4604      	mov	r4, r0
 8005eaa:	d158      	bne.n	8005f5e <_malloc_r+0xf6>
 8005eac:	f8d8 4000 	ldr.w	r4, [r8]
 8005eb0:	4627      	mov	r7, r4
 8005eb2:	2f00      	cmp	r7, #0
 8005eb4:	d143      	bne.n	8005f3e <_malloc_r+0xd6>
 8005eb6:	2c00      	cmp	r4, #0
 8005eb8:	d04b      	beq.n	8005f52 <_malloc_r+0xea>
 8005eba:	6823      	ldr	r3, [r4, #0]
 8005ebc:	4639      	mov	r1, r7
 8005ebe:	4630      	mov	r0, r6
 8005ec0:	eb04 0903 	add.w	r9, r4, r3
 8005ec4:	f000 fdf4 	bl	8006ab0 <_sbrk_r>
 8005ec8:	4581      	cmp	r9, r0
 8005eca:	d142      	bne.n	8005f52 <_malloc_r+0xea>
 8005ecc:	6821      	ldr	r1, [r4, #0]
 8005ece:	1a6d      	subs	r5, r5, r1
 8005ed0:	4629      	mov	r1, r5
 8005ed2:	4630      	mov	r0, r6
 8005ed4:	f7ff ffa6 	bl	8005e24 <sbrk_aligned>
 8005ed8:	3001      	adds	r0, #1
 8005eda:	d03a      	beq.n	8005f52 <_malloc_r+0xea>
 8005edc:	6823      	ldr	r3, [r4, #0]
 8005ede:	442b      	add	r3, r5
 8005ee0:	6023      	str	r3, [r4, #0]
 8005ee2:	f8d8 3000 	ldr.w	r3, [r8]
 8005ee6:	685a      	ldr	r2, [r3, #4]
 8005ee8:	bb62      	cbnz	r2, 8005f44 <_malloc_r+0xdc>
 8005eea:	f8c8 7000 	str.w	r7, [r8]
 8005eee:	e00f      	b.n	8005f10 <_malloc_r+0xa8>
 8005ef0:	6822      	ldr	r2, [r4, #0]
 8005ef2:	1b52      	subs	r2, r2, r5
 8005ef4:	d420      	bmi.n	8005f38 <_malloc_r+0xd0>
 8005ef6:	2a0b      	cmp	r2, #11
 8005ef8:	d917      	bls.n	8005f2a <_malloc_r+0xc2>
 8005efa:	1961      	adds	r1, r4, r5
 8005efc:	42a3      	cmp	r3, r4
 8005efe:	6025      	str	r5, [r4, #0]
 8005f00:	bf18      	it	ne
 8005f02:	6059      	strne	r1, [r3, #4]
 8005f04:	6863      	ldr	r3, [r4, #4]
 8005f06:	bf08      	it	eq
 8005f08:	f8c8 1000 	streq.w	r1, [r8]
 8005f0c:	5162      	str	r2, [r4, r5]
 8005f0e:	604b      	str	r3, [r1, #4]
 8005f10:	4630      	mov	r0, r6
 8005f12:	f000 f82f 	bl	8005f74 <__malloc_unlock>
 8005f16:	f104 000b 	add.w	r0, r4, #11
 8005f1a:	1d23      	adds	r3, r4, #4
 8005f1c:	f020 0007 	bic.w	r0, r0, #7
 8005f20:	1ac2      	subs	r2, r0, r3
 8005f22:	bf1c      	itt	ne
 8005f24:	1a1b      	subne	r3, r3, r0
 8005f26:	50a3      	strne	r3, [r4, r2]
 8005f28:	e7af      	b.n	8005e8a <_malloc_r+0x22>
 8005f2a:	6862      	ldr	r2, [r4, #4]
 8005f2c:	42a3      	cmp	r3, r4
 8005f2e:	bf0c      	ite	eq
 8005f30:	f8c8 2000 	streq.w	r2, [r8]
 8005f34:	605a      	strne	r2, [r3, #4]
 8005f36:	e7eb      	b.n	8005f10 <_malloc_r+0xa8>
 8005f38:	4623      	mov	r3, r4
 8005f3a:	6864      	ldr	r4, [r4, #4]
 8005f3c:	e7ae      	b.n	8005e9c <_malloc_r+0x34>
 8005f3e:	463c      	mov	r4, r7
 8005f40:	687f      	ldr	r7, [r7, #4]
 8005f42:	e7b6      	b.n	8005eb2 <_malloc_r+0x4a>
 8005f44:	461a      	mov	r2, r3
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	42a3      	cmp	r3, r4
 8005f4a:	d1fb      	bne.n	8005f44 <_malloc_r+0xdc>
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	6053      	str	r3, [r2, #4]
 8005f50:	e7de      	b.n	8005f10 <_malloc_r+0xa8>
 8005f52:	230c      	movs	r3, #12
 8005f54:	6033      	str	r3, [r6, #0]
 8005f56:	4630      	mov	r0, r6
 8005f58:	f000 f80c 	bl	8005f74 <__malloc_unlock>
 8005f5c:	e794      	b.n	8005e88 <_malloc_r+0x20>
 8005f5e:	6005      	str	r5, [r0, #0]
 8005f60:	e7d6      	b.n	8005f10 <_malloc_r+0xa8>
 8005f62:	bf00      	nop
 8005f64:	20000a7c 	.word	0x20000a7c

08005f68 <__malloc_lock>:
 8005f68:	4801      	ldr	r0, [pc, #4]	@ (8005f70 <__malloc_lock+0x8>)
 8005f6a:	f7ff b8a0 	b.w	80050ae <__retarget_lock_acquire_recursive>
 8005f6e:	bf00      	nop
 8005f70:	20000a74 	.word	0x20000a74

08005f74 <__malloc_unlock>:
 8005f74:	4801      	ldr	r0, [pc, #4]	@ (8005f7c <__malloc_unlock+0x8>)
 8005f76:	f7ff b89b 	b.w	80050b0 <__retarget_lock_release_recursive>
 8005f7a:	bf00      	nop
 8005f7c:	20000a74 	.word	0x20000a74

08005f80 <_Balloc>:
 8005f80:	b570      	push	{r4, r5, r6, lr}
 8005f82:	69c6      	ldr	r6, [r0, #28]
 8005f84:	4604      	mov	r4, r0
 8005f86:	460d      	mov	r5, r1
 8005f88:	b976      	cbnz	r6, 8005fa8 <_Balloc+0x28>
 8005f8a:	2010      	movs	r0, #16
 8005f8c:	f7ff ff42 	bl	8005e14 <malloc>
 8005f90:	4602      	mov	r2, r0
 8005f92:	61e0      	str	r0, [r4, #28]
 8005f94:	b920      	cbnz	r0, 8005fa0 <_Balloc+0x20>
 8005f96:	4b18      	ldr	r3, [pc, #96]	@ (8005ff8 <_Balloc+0x78>)
 8005f98:	4818      	ldr	r0, [pc, #96]	@ (8005ffc <_Balloc+0x7c>)
 8005f9a:	216b      	movs	r1, #107	@ 0x6b
 8005f9c:	f000 fd98 	bl	8006ad0 <__assert_func>
 8005fa0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005fa4:	6006      	str	r6, [r0, #0]
 8005fa6:	60c6      	str	r6, [r0, #12]
 8005fa8:	69e6      	ldr	r6, [r4, #28]
 8005faa:	68f3      	ldr	r3, [r6, #12]
 8005fac:	b183      	cbz	r3, 8005fd0 <_Balloc+0x50>
 8005fae:	69e3      	ldr	r3, [r4, #28]
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005fb6:	b9b8      	cbnz	r0, 8005fe8 <_Balloc+0x68>
 8005fb8:	2101      	movs	r1, #1
 8005fba:	fa01 f605 	lsl.w	r6, r1, r5
 8005fbe:	1d72      	adds	r2, r6, #5
 8005fc0:	0092      	lsls	r2, r2, #2
 8005fc2:	4620      	mov	r0, r4
 8005fc4:	f000 fda2 	bl	8006b0c <_calloc_r>
 8005fc8:	b160      	cbz	r0, 8005fe4 <_Balloc+0x64>
 8005fca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005fce:	e00e      	b.n	8005fee <_Balloc+0x6e>
 8005fd0:	2221      	movs	r2, #33	@ 0x21
 8005fd2:	2104      	movs	r1, #4
 8005fd4:	4620      	mov	r0, r4
 8005fd6:	f000 fd99 	bl	8006b0c <_calloc_r>
 8005fda:	69e3      	ldr	r3, [r4, #28]
 8005fdc:	60f0      	str	r0, [r6, #12]
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d1e4      	bne.n	8005fae <_Balloc+0x2e>
 8005fe4:	2000      	movs	r0, #0
 8005fe6:	bd70      	pop	{r4, r5, r6, pc}
 8005fe8:	6802      	ldr	r2, [r0, #0]
 8005fea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005fee:	2300      	movs	r3, #0
 8005ff0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005ff4:	e7f7      	b.n	8005fe6 <_Balloc+0x66>
 8005ff6:	bf00      	nop
 8005ff8:	08007d31 	.word	0x08007d31
 8005ffc:	08007db1 	.word	0x08007db1

08006000 <_Bfree>:
 8006000:	b570      	push	{r4, r5, r6, lr}
 8006002:	69c6      	ldr	r6, [r0, #28]
 8006004:	4605      	mov	r5, r0
 8006006:	460c      	mov	r4, r1
 8006008:	b976      	cbnz	r6, 8006028 <_Bfree+0x28>
 800600a:	2010      	movs	r0, #16
 800600c:	f7ff ff02 	bl	8005e14 <malloc>
 8006010:	4602      	mov	r2, r0
 8006012:	61e8      	str	r0, [r5, #28]
 8006014:	b920      	cbnz	r0, 8006020 <_Bfree+0x20>
 8006016:	4b09      	ldr	r3, [pc, #36]	@ (800603c <_Bfree+0x3c>)
 8006018:	4809      	ldr	r0, [pc, #36]	@ (8006040 <_Bfree+0x40>)
 800601a:	218f      	movs	r1, #143	@ 0x8f
 800601c:	f000 fd58 	bl	8006ad0 <__assert_func>
 8006020:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006024:	6006      	str	r6, [r0, #0]
 8006026:	60c6      	str	r6, [r0, #12]
 8006028:	b13c      	cbz	r4, 800603a <_Bfree+0x3a>
 800602a:	69eb      	ldr	r3, [r5, #28]
 800602c:	6862      	ldr	r2, [r4, #4]
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006034:	6021      	str	r1, [r4, #0]
 8006036:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800603a:	bd70      	pop	{r4, r5, r6, pc}
 800603c:	08007d31 	.word	0x08007d31
 8006040:	08007db1 	.word	0x08007db1

08006044 <__multadd>:
 8006044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006048:	690d      	ldr	r5, [r1, #16]
 800604a:	4607      	mov	r7, r0
 800604c:	460c      	mov	r4, r1
 800604e:	461e      	mov	r6, r3
 8006050:	f101 0c14 	add.w	ip, r1, #20
 8006054:	2000      	movs	r0, #0
 8006056:	f8dc 3000 	ldr.w	r3, [ip]
 800605a:	b299      	uxth	r1, r3
 800605c:	fb02 6101 	mla	r1, r2, r1, r6
 8006060:	0c1e      	lsrs	r6, r3, #16
 8006062:	0c0b      	lsrs	r3, r1, #16
 8006064:	fb02 3306 	mla	r3, r2, r6, r3
 8006068:	b289      	uxth	r1, r1
 800606a:	3001      	adds	r0, #1
 800606c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006070:	4285      	cmp	r5, r0
 8006072:	f84c 1b04 	str.w	r1, [ip], #4
 8006076:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800607a:	dcec      	bgt.n	8006056 <__multadd+0x12>
 800607c:	b30e      	cbz	r6, 80060c2 <__multadd+0x7e>
 800607e:	68a3      	ldr	r3, [r4, #8]
 8006080:	42ab      	cmp	r3, r5
 8006082:	dc19      	bgt.n	80060b8 <__multadd+0x74>
 8006084:	6861      	ldr	r1, [r4, #4]
 8006086:	4638      	mov	r0, r7
 8006088:	3101      	adds	r1, #1
 800608a:	f7ff ff79 	bl	8005f80 <_Balloc>
 800608e:	4680      	mov	r8, r0
 8006090:	b928      	cbnz	r0, 800609e <__multadd+0x5a>
 8006092:	4602      	mov	r2, r0
 8006094:	4b0c      	ldr	r3, [pc, #48]	@ (80060c8 <__multadd+0x84>)
 8006096:	480d      	ldr	r0, [pc, #52]	@ (80060cc <__multadd+0x88>)
 8006098:	21ba      	movs	r1, #186	@ 0xba
 800609a:	f000 fd19 	bl	8006ad0 <__assert_func>
 800609e:	6922      	ldr	r2, [r4, #16]
 80060a0:	3202      	adds	r2, #2
 80060a2:	f104 010c 	add.w	r1, r4, #12
 80060a6:	0092      	lsls	r2, r2, #2
 80060a8:	300c      	adds	r0, #12
 80060aa:	f7ff f802 	bl	80050b2 <memcpy>
 80060ae:	4621      	mov	r1, r4
 80060b0:	4638      	mov	r0, r7
 80060b2:	f7ff ffa5 	bl	8006000 <_Bfree>
 80060b6:	4644      	mov	r4, r8
 80060b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80060bc:	3501      	adds	r5, #1
 80060be:	615e      	str	r6, [r3, #20]
 80060c0:	6125      	str	r5, [r4, #16]
 80060c2:	4620      	mov	r0, r4
 80060c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060c8:	08007da0 	.word	0x08007da0
 80060cc:	08007db1 	.word	0x08007db1

080060d0 <__hi0bits>:
 80060d0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80060d4:	4603      	mov	r3, r0
 80060d6:	bf36      	itet	cc
 80060d8:	0403      	lslcc	r3, r0, #16
 80060da:	2000      	movcs	r0, #0
 80060dc:	2010      	movcc	r0, #16
 80060de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80060e2:	bf3c      	itt	cc
 80060e4:	021b      	lslcc	r3, r3, #8
 80060e6:	3008      	addcc	r0, #8
 80060e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060ec:	bf3c      	itt	cc
 80060ee:	011b      	lslcc	r3, r3, #4
 80060f0:	3004      	addcc	r0, #4
 80060f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060f6:	bf3c      	itt	cc
 80060f8:	009b      	lslcc	r3, r3, #2
 80060fa:	3002      	addcc	r0, #2
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	db05      	blt.n	800610c <__hi0bits+0x3c>
 8006100:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006104:	f100 0001 	add.w	r0, r0, #1
 8006108:	bf08      	it	eq
 800610a:	2020      	moveq	r0, #32
 800610c:	4770      	bx	lr

0800610e <__lo0bits>:
 800610e:	6803      	ldr	r3, [r0, #0]
 8006110:	4602      	mov	r2, r0
 8006112:	f013 0007 	ands.w	r0, r3, #7
 8006116:	d00b      	beq.n	8006130 <__lo0bits+0x22>
 8006118:	07d9      	lsls	r1, r3, #31
 800611a:	d421      	bmi.n	8006160 <__lo0bits+0x52>
 800611c:	0798      	lsls	r0, r3, #30
 800611e:	bf49      	itett	mi
 8006120:	085b      	lsrmi	r3, r3, #1
 8006122:	089b      	lsrpl	r3, r3, #2
 8006124:	2001      	movmi	r0, #1
 8006126:	6013      	strmi	r3, [r2, #0]
 8006128:	bf5c      	itt	pl
 800612a:	6013      	strpl	r3, [r2, #0]
 800612c:	2002      	movpl	r0, #2
 800612e:	4770      	bx	lr
 8006130:	b299      	uxth	r1, r3
 8006132:	b909      	cbnz	r1, 8006138 <__lo0bits+0x2a>
 8006134:	0c1b      	lsrs	r3, r3, #16
 8006136:	2010      	movs	r0, #16
 8006138:	b2d9      	uxtb	r1, r3
 800613a:	b909      	cbnz	r1, 8006140 <__lo0bits+0x32>
 800613c:	3008      	adds	r0, #8
 800613e:	0a1b      	lsrs	r3, r3, #8
 8006140:	0719      	lsls	r1, r3, #28
 8006142:	bf04      	itt	eq
 8006144:	091b      	lsreq	r3, r3, #4
 8006146:	3004      	addeq	r0, #4
 8006148:	0799      	lsls	r1, r3, #30
 800614a:	bf04      	itt	eq
 800614c:	089b      	lsreq	r3, r3, #2
 800614e:	3002      	addeq	r0, #2
 8006150:	07d9      	lsls	r1, r3, #31
 8006152:	d403      	bmi.n	800615c <__lo0bits+0x4e>
 8006154:	085b      	lsrs	r3, r3, #1
 8006156:	f100 0001 	add.w	r0, r0, #1
 800615a:	d003      	beq.n	8006164 <__lo0bits+0x56>
 800615c:	6013      	str	r3, [r2, #0]
 800615e:	4770      	bx	lr
 8006160:	2000      	movs	r0, #0
 8006162:	4770      	bx	lr
 8006164:	2020      	movs	r0, #32
 8006166:	4770      	bx	lr

08006168 <__i2b>:
 8006168:	b510      	push	{r4, lr}
 800616a:	460c      	mov	r4, r1
 800616c:	2101      	movs	r1, #1
 800616e:	f7ff ff07 	bl	8005f80 <_Balloc>
 8006172:	4602      	mov	r2, r0
 8006174:	b928      	cbnz	r0, 8006182 <__i2b+0x1a>
 8006176:	4b05      	ldr	r3, [pc, #20]	@ (800618c <__i2b+0x24>)
 8006178:	4805      	ldr	r0, [pc, #20]	@ (8006190 <__i2b+0x28>)
 800617a:	f240 1145 	movw	r1, #325	@ 0x145
 800617e:	f000 fca7 	bl	8006ad0 <__assert_func>
 8006182:	2301      	movs	r3, #1
 8006184:	6144      	str	r4, [r0, #20]
 8006186:	6103      	str	r3, [r0, #16]
 8006188:	bd10      	pop	{r4, pc}
 800618a:	bf00      	nop
 800618c:	08007da0 	.word	0x08007da0
 8006190:	08007db1 	.word	0x08007db1

08006194 <__multiply>:
 8006194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006198:	4617      	mov	r7, r2
 800619a:	690a      	ldr	r2, [r1, #16]
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	429a      	cmp	r2, r3
 80061a0:	bfa8      	it	ge
 80061a2:	463b      	movge	r3, r7
 80061a4:	4689      	mov	r9, r1
 80061a6:	bfa4      	itt	ge
 80061a8:	460f      	movge	r7, r1
 80061aa:	4699      	movge	r9, r3
 80061ac:	693d      	ldr	r5, [r7, #16]
 80061ae:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	6879      	ldr	r1, [r7, #4]
 80061b6:	eb05 060a 	add.w	r6, r5, sl
 80061ba:	42b3      	cmp	r3, r6
 80061bc:	b085      	sub	sp, #20
 80061be:	bfb8      	it	lt
 80061c0:	3101      	addlt	r1, #1
 80061c2:	f7ff fedd 	bl	8005f80 <_Balloc>
 80061c6:	b930      	cbnz	r0, 80061d6 <__multiply+0x42>
 80061c8:	4602      	mov	r2, r0
 80061ca:	4b41      	ldr	r3, [pc, #260]	@ (80062d0 <__multiply+0x13c>)
 80061cc:	4841      	ldr	r0, [pc, #260]	@ (80062d4 <__multiply+0x140>)
 80061ce:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80061d2:	f000 fc7d 	bl	8006ad0 <__assert_func>
 80061d6:	f100 0414 	add.w	r4, r0, #20
 80061da:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80061de:	4623      	mov	r3, r4
 80061e0:	2200      	movs	r2, #0
 80061e2:	4573      	cmp	r3, lr
 80061e4:	d320      	bcc.n	8006228 <__multiply+0x94>
 80061e6:	f107 0814 	add.w	r8, r7, #20
 80061ea:	f109 0114 	add.w	r1, r9, #20
 80061ee:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80061f2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80061f6:	9302      	str	r3, [sp, #8]
 80061f8:	1beb      	subs	r3, r5, r7
 80061fa:	3b15      	subs	r3, #21
 80061fc:	f023 0303 	bic.w	r3, r3, #3
 8006200:	3304      	adds	r3, #4
 8006202:	3715      	adds	r7, #21
 8006204:	42bd      	cmp	r5, r7
 8006206:	bf38      	it	cc
 8006208:	2304      	movcc	r3, #4
 800620a:	9301      	str	r3, [sp, #4]
 800620c:	9b02      	ldr	r3, [sp, #8]
 800620e:	9103      	str	r1, [sp, #12]
 8006210:	428b      	cmp	r3, r1
 8006212:	d80c      	bhi.n	800622e <__multiply+0x9a>
 8006214:	2e00      	cmp	r6, #0
 8006216:	dd03      	ble.n	8006220 <__multiply+0x8c>
 8006218:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800621c:	2b00      	cmp	r3, #0
 800621e:	d055      	beq.n	80062cc <__multiply+0x138>
 8006220:	6106      	str	r6, [r0, #16]
 8006222:	b005      	add	sp, #20
 8006224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006228:	f843 2b04 	str.w	r2, [r3], #4
 800622c:	e7d9      	b.n	80061e2 <__multiply+0x4e>
 800622e:	f8b1 a000 	ldrh.w	sl, [r1]
 8006232:	f1ba 0f00 	cmp.w	sl, #0
 8006236:	d01f      	beq.n	8006278 <__multiply+0xe4>
 8006238:	46c4      	mov	ip, r8
 800623a:	46a1      	mov	r9, r4
 800623c:	2700      	movs	r7, #0
 800623e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006242:	f8d9 3000 	ldr.w	r3, [r9]
 8006246:	fa1f fb82 	uxth.w	fp, r2
 800624a:	b29b      	uxth	r3, r3
 800624c:	fb0a 330b 	mla	r3, sl, fp, r3
 8006250:	443b      	add	r3, r7
 8006252:	f8d9 7000 	ldr.w	r7, [r9]
 8006256:	0c12      	lsrs	r2, r2, #16
 8006258:	0c3f      	lsrs	r7, r7, #16
 800625a:	fb0a 7202 	mla	r2, sl, r2, r7
 800625e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8006262:	b29b      	uxth	r3, r3
 8006264:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006268:	4565      	cmp	r5, ip
 800626a:	f849 3b04 	str.w	r3, [r9], #4
 800626e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8006272:	d8e4      	bhi.n	800623e <__multiply+0xaa>
 8006274:	9b01      	ldr	r3, [sp, #4]
 8006276:	50e7      	str	r7, [r4, r3]
 8006278:	9b03      	ldr	r3, [sp, #12]
 800627a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800627e:	3104      	adds	r1, #4
 8006280:	f1b9 0f00 	cmp.w	r9, #0
 8006284:	d020      	beq.n	80062c8 <__multiply+0x134>
 8006286:	6823      	ldr	r3, [r4, #0]
 8006288:	4647      	mov	r7, r8
 800628a:	46a4      	mov	ip, r4
 800628c:	f04f 0a00 	mov.w	sl, #0
 8006290:	f8b7 b000 	ldrh.w	fp, [r7]
 8006294:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006298:	fb09 220b 	mla	r2, r9, fp, r2
 800629c:	4452      	add	r2, sl
 800629e:	b29b      	uxth	r3, r3
 80062a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80062a4:	f84c 3b04 	str.w	r3, [ip], #4
 80062a8:	f857 3b04 	ldr.w	r3, [r7], #4
 80062ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80062b0:	f8bc 3000 	ldrh.w	r3, [ip]
 80062b4:	fb09 330a 	mla	r3, r9, sl, r3
 80062b8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80062bc:	42bd      	cmp	r5, r7
 80062be:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80062c2:	d8e5      	bhi.n	8006290 <__multiply+0xfc>
 80062c4:	9a01      	ldr	r2, [sp, #4]
 80062c6:	50a3      	str	r3, [r4, r2]
 80062c8:	3404      	adds	r4, #4
 80062ca:	e79f      	b.n	800620c <__multiply+0x78>
 80062cc:	3e01      	subs	r6, #1
 80062ce:	e7a1      	b.n	8006214 <__multiply+0x80>
 80062d0:	08007da0 	.word	0x08007da0
 80062d4:	08007db1 	.word	0x08007db1

080062d8 <__pow5mult>:
 80062d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062dc:	4615      	mov	r5, r2
 80062de:	f012 0203 	ands.w	r2, r2, #3
 80062e2:	4607      	mov	r7, r0
 80062e4:	460e      	mov	r6, r1
 80062e6:	d007      	beq.n	80062f8 <__pow5mult+0x20>
 80062e8:	4c25      	ldr	r4, [pc, #148]	@ (8006380 <__pow5mult+0xa8>)
 80062ea:	3a01      	subs	r2, #1
 80062ec:	2300      	movs	r3, #0
 80062ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80062f2:	f7ff fea7 	bl	8006044 <__multadd>
 80062f6:	4606      	mov	r6, r0
 80062f8:	10ad      	asrs	r5, r5, #2
 80062fa:	d03d      	beq.n	8006378 <__pow5mult+0xa0>
 80062fc:	69fc      	ldr	r4, [r7, #28]
 80062fe:	b97c      	cbnz	r4, 8006320 <__pow5mult+0x48>
 8006300:	2010      	movs	r0, #16
 8006302:	f7ff fd87 	bl	8005e14 <malloc>
 8006306:	4602      	mov	r2, r0
 8006308:	61f8      	str	r0, [r7, #28]
 800630a:	b928      	cbnz	r0, 8006318 <__pow5mult+0x40>
 800630c:	4b1d      	ldr	r3, [pc, #116]	@ (8006384 <__pow5mult+0xac>)
 800630e:	481e      	ldr	r0, [pc, #120]	@ (8006388 <__pow5mult+0xb0>)
 8006310:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006314:	f000 fbdc 	bl	8006ad0 <__assert_func>
 8006318:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800631c:	6004      	str	r4, [r0, #0]
 800631e:	60c4      	str	r4, [r0, #12]
 8006320:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006324:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006328:	b94c      	cbnz	r4, 800633e <__pow5mult+0x66>
 800632a:	f240 2171 	movw	r1, #625	@ 0x271
 800632e:	4638      	mov	r0, r7
 8006330:	f7ff ff1a 	bl	8006168 <__i2b>
 8006334:	2300      	movs	r3, #0
 8006336:	f8c8 0008 	str.w	r0, [r8, #8]
 800633a:	4604      	mov	r4, r0
 800633c:	6003      	str	r3, [r0, #0]
 800633e:	f04f 0900 	mov.w	r9, #0
 8006342:	07eb      	lsls	r3, r5, #31
 8006344:	d50a      	bpl.n	800635c <__pow5mult+0x84>
 8006346:	4631      	mov	r1, r6
 8006348:	4622      	mov	r2, r4
 800634a:	4638      	mov	r0, r7
 800634c:	f7ff ff22 	bl	8006194 <__multiply>
 8006350:	4631      	mov	r1, r6
 8006352:	4680      	mov	r8, r0
 8006354:	4638      	mov	r0, r7
 8006356:	f7ff fe53 	bl	8006000 <_Bfree>
 800635a:	4646      	mov	r6, r8
 800635c:	106d      	asrs	r5, r5, #1
 800635e:	d00b      	beq.n	8006378 <__pow5mult+0xa0>
 8006360:	6820      	ldr	r0, [r4, #0]
 8006362:	b938      	cbnz	r0, 8006374 <__pow5mult+0x9c>
 8006364:	4622      	mov	r2, r4
 8006366:	4621      	mov	r1, r4
 8006368:	4638      	mov	r0, r7
 800636a:	f7ff ff13 	bl	8006194 <__multiply>
 800636e:	6020      	str	r0, [r4, #0]
 8006370:	f8c0 9000 	str.w	r9, [r0]
 8006374:	4604      	mov	r4, r0
 8006376:	e7e4      	b.n	8006342 <__pow5mult+0x6a>
 8006378:	4630      	mov	r0, r6
 800637a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800637e:	bf00      	nop
 8006380:	08007e64 	.word	0x08007e64
 8006384:	08007d31 	.word	0x08007d31
 8006388:	08007db1 	.word	0x08007db1

0800638c <__lshift>:
 800638c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006390:	460c      	mov	r4, r1
 8006392:	6849      	ldr	r1, [r1, #4]
 8006394:	6923      	ldr	r3, [r4, #16]
 8006396:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800639a:	68a3      	ldr	r3, [r4, #8]
 800639c:	4607      	mov	r7, r0
 800639e:	4691      	mov	r9, r2
 80063a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80063a4:	f108 0601 	add.w	r6, r8, #1
 80063a8:	42b3      	cmp	r3, r6
 80063aa:	db0b      	blt.n	80063c4 <__lshift+0x38>
 80063ac:	4638      	mov	r0, r7
 80063ae:	f7ff fde7 	bl	8005f80 <_Balloc>
 80063b2:	4605      	mov	r5, r0
 80063b4:	b948      	cbnz	r0, 80063ca <__lshift+0x3e>
 80063b6:	4602      	mov	r2, r0
 80063b8:	4b28      	ldr	r3, [pc, #160]	@ (800645c <__lshift+0xd0>)
 80063ba:	4829      	ldr	r0, [pc, #164]	@ (8006460 <__lshift+0xd4>)
 80063bc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80063c0:	f000 fb86 	bl	8006ad0 <__assert_func>
 80063c4:	3101      	adds	r1, #1
 80063c6:	005b      	lsls	r3, r3, #1
 80063c8:	e7ee      	b.n	80063a8 <__lshift+0x1c>
 80063ca:	2300      	movs	r3, #0
 80063cc:	f100 0114 	add.w	r1, r0, #20
 80063d0:	f100 0210 	add.w	r2, r0, #16
 80063d4:	4618      	mov	r0, r3
 80063d6:	4553      	cmp	r3, sl
 80063d8:	db33      	blt.n	8006442 <__lshift+0xb6>
 80063da:	6920      	ldr	r0, [r4, #16]
 80063dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80063e0:	f104 0314 	add.w	r3, r4, #20
 80063e4:	f019 091f 	ands.w	r9, r9, #31
 80063e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80063ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80063f0:	d02b      	beq.n	800644a <__lshift+0xbe>
 80063f2:	f1c9 0e20 	rsb	lr, r9, #32
 80063f6:	468a      	mov	sl, r1
 80063f8:	2200      	movs	r2, #0
 80063fa:	6818      	ldr	r0, [r3, #0]
 80063fc:	fa00 f009 	lsl.w	r0, r0, r9
 8006400:	4310      	orrs	r0, r2
 8006402:	f84a 0b04 	str.w	r0, [sl], #4
 8006406:	f853 2b04 	ldr.w	r2, [r3], #4
 800640a:	459c      	cmp	ip, r3
 800640c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006410:	d8f3      	bhi.n	80063fa <__lshift+0x6e>
 8006412:	ebac 0304 	sub.w	r3, ip, r4
 8006416:	3b15      	subs	r3, #21
 8006418:	f023 0303 	bic.w	r3, r3, #3
 800641c:	3304      	adds	r3, #4
 800641e:	f104 0015 	add.w	r0, r4, #21
 8006422:	4560      	cmp	r0, ip
 8006424:	bf88      	it	hi
 8006426:	2304      	movhi	r3, #4
 8006428:	50ca      	str	r2, [r1, r3]
 800642a:	b10a      	cbz	r2, 8006430 <__lshift+0xa4>
 800642c:	f108 0602 	add.w	r6, r8, #2
 8006430:	3e01      	subs	r6, #1
 8006432:	4638      	mov	r0, r7
 8006434:	612e      	str	r6, [r5, #16]
 8006436:	4621      	mov	r1, r4
 8006438:	f7ff fde2 	bl	8006000 <_Bfree>
 800643c:	4628      	mov	r0, r5
 800643e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006442:	f842 0f04 	str.w	r0, [r2, #4]!
 8006446:	3301      	adds	r3, #1
 8006448:	e7c5      	b.n	80063d6 <__lshift+0x4a>
 800644a:	3904      	subs	r1, #4
 800644c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006450:	f841 2f04 	str.w	r2, [r1, #4]!
 8006454:	459c      	cmp	ip, r3
 8006456:	d8f9      	bhi.n	800644c <__lshift+0xc0>
 8006458:	e7ea      	b.n	8006430 <__lshift+0xa4>
 800645a:	bf00      	nop
 800645c:	08007da0 	.word	0x08007da0
 8006460:	08007db1 	.word	0x08007db1

08006464 <__mcmp>:
 8006464:	690a      	ldr	r2, [r1, #16]
 8006466:	4603      	mov	r3, r0
 8006468:	6900      	ldr	r0, [r0, #16]
 800646a:	1a80      	subs	r0, r0, r2
 800646c:	b530      	push	{r4, r5, lr}
 800646e:	d10e      	bne.n	800648e <__mcmp+0x2a>
 8006470:	3314      	adds	r3, #20
 8006472:	3114      	adds	r1, #20
 8006474:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006478:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800647c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006480:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006484:	4295      	cmp	r5, r2
 8006486:	d003      	beq.n	8006490 <__mcmp+0x2c>
 8006488:	d205      	bcs.n	8006496 <__mcmp+0x32>
 800648a:	f04f 30ff 	mov.w	r0, #4294967295
 800648e:	bd30      	pop	{r4, r5, pc}
 8006490:	42a3      	cmp	r3, r4
 8006492:	d3f3      	bcc.n	800647c <__mcmp+0x18>
 8006494:	e7fb      	b.n	800648e <__mcmp+0x2a>
 8006496:	2001      	movs	r0, #1
 8006498:	e7f9      	b.n	800648e <__mcmp+0x2a>
	...

0800649c <__mdiff>:
 800649c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064a0:	4689      	mov	r9, r1
 80064a2:	4606      	mov	r6, r0
 80064a4:	4611      	mov	r1, r2
 80064a6:	4648      	mov	r0, r9
 80064a8:	4614      	mov	r4, r2
 80064aa:	f7ff ffdb 	bl	8006464 <__mcmp>
 80064ae:	1e05      	subs	r5, r0, #0
 80064b0:	d112      	bne.n	80064d8 <__mdiff+0x3c>
 80064b2:	4629      	mov	r1, r5
 80064b4:	4630      	mov	r0, r6
 80064b6:	f7ff fd63 	bl	8005f80 <_Balloc>
 80064ba:	4602      	mov	r2, r0
 80064bc:	b928      	cbnz	r0, 80064ca <__mdiff+0x2e>
 80064be:	4b3f      	ldr	r3, [pc, #252]	@ (80065bc <__mdiff+0x120>)
 80064c0:	f240 2137 	movw	r1, #567	@ 0x237
 80064c4:	483e      	ldr	r0, [pc, #248]	@ (80065c0 <__mdiff+0x124>)
 80064c6:	f000 fb03 	bl	8006ad0 <__assert_func>
 80064ca:	2301      	movs	r3, #1
 80064cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80064d0:	4610      	mov	r0, r2
 80064d2:	b003      	add	sp, #12
 80064d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064d8:	bfbc      	itt	lt
 80064da:	464b      	movlt	r3, r9
 80064dc:	46a1      	movlt	r9, r4
 80064de:	4630      	mov	r0, r6
 80064e0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80064e4:	bfba      	itte	lt
 80064e6:	461c      	movlt	r4, r3
 80064e8:	2501      	movlt	r5, #1
 80064ea:	2500      	movge	r5, #0
 80064ec:	f7ff fd48 	bl	8005f80 <_Balloc>
 80064f0:	4602      	mov	r2, r0
 80064f2:	b918      	cbnz	r0, 80064fc <__mdiff+0x60>
 80064f4:	4b31      	ldr	r3, [pc, #196]	@ (80065bc <__mdiff+0x120>)
 80064f6:	f240 2145 	movw	r1, #581	@ 0x245
 80064fa:	e7e3      	b.n	80064c4 <__mdiff+0x28>
 80064fc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006500:	6926      	ldr	r6, [r4, #16]
 8006502:	60c5      	str	r5, [r0, #12]
 8006504:	f109 0310 	add.w	r3, r9, #16
 8006508:	f109 0514 	add.w	r5, r9, #20
 800650c:	f104 0e14 	add.w	lr, r4, #20
 8006510:	f100 0b14 	add.w	fp, r0, #20
 8006514:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006518:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800651c:	9301      	str	r3, [sp, #4]
 800651e:	46d9      	mov	r9, fp
 8006520:	f04f 0c00 	mov.w	ip, #0
 8006524:	9b01      	ldr	r3, [sp, #4]
 8006526:	f85e 0b04 	ldr.w	r0, [lr], #4
 800652a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800652e:	9301      	str	r3, [sp, #4]
 8006530:	fa1f f38a 	uxth.w	r3, sl
 8006534:	4619      	mov	r1, r3
 8006536:	b283      	uxth	r3, r0
 8006538:	1acb      	subs	r3, r1, r3
 800653a:	0c00      	lsrs	r0, r0, #16
 800653c:	4463      	add	r3, ip
 800653e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006542:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006546:	b29b      	uxth	r3, r3
 8006548:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800654c:	4576      	cmp	r6, lr
 800654e:	f849 3b04 	str.w	r3, [r9], #4
 8006552:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006556:	d8e5      	bhi.n	8006524 <__mdiff+0x88>
 8006558:	1b33      	subs	r3, r6, r4
 800655a:	3b15      	subs	r3, #21
 800655c:	f023 0303 	bic.w	r3, r3, #3
 8006560:	3415      	adds	r4, #21
 8006562:	3304      	adds	r3, #4
 8006564:	42a6      	cmp	r6, r4
 8006566:	bf38      	it	cc
 8006568:	2304      	movcc	r3, #4
 800656a:	441d      	add	r5, r3
 800656c:	445b      	add	r3, fp
 800656e:	461e      	mov	r6, r3
 8006570:	462c      	mov	r4, r5
 8006572:	4544      	cmp	r4, r8
 8006574:	d30e      	bcc.n	8006594 <__mdiff+0xf8>
 8006576:	f108 0103 	add.w	r1, r8, #3
 800657a:	1b49      	subs	r1, r1, r5
 800657c:	f021 0103 	bic.w	r1, r1, #3
 8006580:	3d03      	subs	r5, #3
 8006582:	45a8      	cmp	r8, r5
 8006584:	bf38      	it	cc
 8006586:	2100      	movcc	r1, #0
 8006588:	440b      	add	r3, r1
 800658a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800658e:	b191      	cbz	r1, 80065b6 <__mdiff+0x11a>
 8006590:	6117      	str	r7, [r2, #16]
 8006592:	e79d      	b.n	80064d0 <__mdiff+0x34>
 8006594:	f854 1b04 	ldr.w	r1, [r4], #4
 8006598:	46e6      	mov	lr, ip
 800659a:	0c08      	lsrs	r0, r1, #16
 800659c:	fa1c fc81 	uxtah	ip, ip, r1
 80065a0:	4471      	add	r1, lr
 80065a2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80065a6:	b289      	uxth	r1, r1
 80065a8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80065ac:	f846 1b04 	str.w	r1, [r6], #4
 80065b0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80065b4:	e7dd      	b.n	8006572 <__mdiff+0xd6>
 80065b6:	3f01      	subs	r7, #1
 80065b8:	e7e7      	b.n	800658a <__mdiff+0xee>
 80065ba:	bf00      	nop
 80065bc:	08007da0 	.word	0x08007da0
 80065c0:	08007db1 	.word	0x08007db1

080065c4 <__d2b>:
 80065c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80065c8:	460f      	mov	r7, r1
 80065ca:	2101      	movs	r1, #1
 80065cc:	ec59 8b10 	vmov	r8, r9, d0
 80065d0:	4616      	mov	r6, r2
 80065d2:	f7ff fcd5 	bl	8005f80 <_Balloc>
 80065d6:	4604      	mov	r4, r0
 80065d8:	b930      	cbnz	r0, 80065e8 <__d2b+0x24>
 80065da:	4602      	mov	r2, r0
 80065dc:	4b23      	ldr	r3, [pc, #140]	@ (800666c <__d2b+0xa8>)
 80065de:	4824      	ldr	r0, [pc, #144]	@ (8006670 <__d2b+0xac>)
 80065e0:	f240 310f 	movw	r1, #783	@ 0x30f
 80065e4:	f000 fa74 	bl	8006ad0 <__assert_func>
 80065e8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80065ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80065f0:	b10d      	cbz	r5, 80065f6 <__d2b+0x32>
 80065f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80065f6:	9301      	str	r3, [sp, #4]
 80065f8:	f1b8 0300 	subs.w	r3, r8, #0
 80065fc:	d023      	beq.n	8006646 <__d2b+0x82>
 80065fe:	4668      	mov	r0, sp
 8006600:	9300      	str	r3, [sp, #0]
 8006602:	f7ff fd84 	bl	800610e <__lo0bits>
 8006606:	e9dd 1200 	ldrd	r1, r2, [sp]
 800660a:	b1d0      	cbz	r0, 8006642 <__d2b+0x7e>
 800660c:	f1c0 0320 	rsb	r3, r0, #32
 8006610:	fa02 f303 	lsl.w	r3, r2, r3
 8006614:	430b      	orrs	r3, r1
 8006616:	40c2      	lsrs	r2, r0
 8006618:	6163      	str	r3, [r4, #20]
 800661a:	9201      	str	r2, [sp, #4]
 800661c:	9b01      	ldr	r3, [sp, #4]
 800661e:	61a3      	str	r3, [r4, #24]
 8006620:	2b00      	cmp	r3, #0
 8006622:	bf0c      	ite	eq
 8006624:	2201      	moveq	r2, #1
 8006626:	2202      	movne	r2, #2
 8006628:	6122      	str	r2, [r4, #16]
 800662a:	b1a5      	cbz	r5, 8006656 <__d2b+0x92>
 800662c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006630:	4405      	add	r5, r0
 8006632:	603d      	str	r5, [r7, #0]
 8006634:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006638:	6030      	str	r0, [r6, #0]
 800663a:	4620      	mov	r0, r4
 800663c:	b003      	add	sp, #12
 800663e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006642:	6161      	str	r1, [r4, #20]
 8006644:	e7ea      	b.n	800661c <__d2b+0x58>
 8006646:	a801      	add	r0, sp, #4
 8006648:	f7ff fd61 	bl	800610e <__lo0bits>
 800664c:	9b01      	ldr	r3, [sp, #4]
 800664e:	6163      	str	r3, [r4, #20]
 8006650:	3020      	adds	r0, #32
 8006652:	2201      	movs	r2, #1
 8006654:	e7e8      	b.n	8006628 <__d2b+0x64>
 8006656:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800665a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800665e:	6038      	str	r0, [r7, #0]
 8006660:	6918      	ldr	r0, [r3, #16]
 8006662:	f7ff fd35 	bl	80060d0 <__hi0bits>
 8006666:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800666a:	e7e5      	b.n	8006638 <__d2b+0x74>
 800666c:	08007da0 	.word	0x08007da0
 8006670:	08007db1 	.word	0x08007db1

08006674 <__ssputs_r>:
 8006674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006678:	688e      	ldr	r6, [r1, #8]
 800667a:	461f      	mov	r7, r3
 800667c:	42be      	cmp	r6, r7
 800667e:	680b      	ldr	r3, [r1, #0]
 8006680:	4682      	mov	sl, r0
 8006682:	460c      	mov	r4, r1
 8006684:	4690      	mov	r8, r2
 8006686:	d82d      	bhi.n	80066e4 <__ssputs_r+0x70>
 8006688:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800668c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006690:	d026      	beq.n	80066e0 <__ssputs_r+0x6c>
 8006692:	6965      	ldr	r5, [r4, #20]
 8006694:	6909      	ldr	r1, [r1, #16]
 8006696:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800669a:	eba3 0901 	sub.w	r9, r3, r1
 800669e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80066a2:	1c7b      	adds	r3, r7, #1
 80066a4:	444b      	add	r3, r9
 80066a6:	106d      	asrs	r5, r5, #1
 80066a8:	429d      	cmp	r5, r3
 80066aa:	bf38      	it	cc
 80066ac:	461d      	movcc	r5, r3
 80066ae:	0553      	lsls	r3, r2, #21
 80066b0:	d527      	bpl.n	8006702 <__ssputs_r+0x8e>
 80066b2:	4629      	mov	r1, r5
 80066b4:	f7ff fbd8 	bl	8005e68 <_malloc_r>
 80066b8:	4606      	mov	r6, r0
 80066ba:	b360      	cbz	r0, 8006716 <__ssputs_r+0xa2>
 80066bc:	6921      	ldr	r1, [r4, #16]
 80066be:	464a      	mov	r2, r9
 80066c0:	f7fe fcf7 	bl	80050b2 <memcpy>
 80066c4:	89a3      	ldrh	r3, [r4, #12]
 80066c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80066ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066ce:	81a3      	strh	r3, [r4, #12]
 80066d0:	6126      	str	r6, [r4, #16]
 80066d2:	6165      	str	r5, [r4, #20]
 80066d4:	444e      	add	r6, r9
 80066d6:	eba5 0509 	sub.w	r5, r5, r9
 80066da:	6026      	str	r6, [r4, #0]
 80066dc:	60a5      	str	r5, [r4, #8]
 80066de:	463e      	mov	r6, r7
 80066e0:	42be      	cmp	r6, r7
 80066e2:	d900      	bls.n	80066e6 <__ssputs_r+0x72>
 80066e4:	463e      	mov	r6, r7
 80066e6:	6820      	ldr	r0, [r4, #0]
 80066e8:	4632      	mov	r2, r6
 80066ea:	4641      	mov	r1, r8
 80066ec:	f000 f9c6 	bl	8006a7c <memmove>
 80066f0:	68a3      	ldr	r3, [r4, #8]
 80066f2:	1b9b      	subs	r3, r3, r6
 80066f4:	60a3      	str	r3, [r4, #8]
 80066f6:	6823      	ldr	r3, [r4, #0]
 80066f8:	4433      	add	r3, r6
 80066fa:	6023      	str	r3, [r4, #0]
 80066fc:	2000      	movs	r0, #0
 80066fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006702:	462a      	mov	r2, r5
 8006704:	f000 fa28 	bl	8006b58 <_realloc_r>
 8006708:	4606      	mov	r6, r0
 800670a:	2800      	cmp	r0, #0
 800670c:	d1e0      	bne.n	80066d0 <__ssputs_r+0x5c>
 800670e:	6921      	ldr	r1, [r4, #16]
 8006710:	4650      	mov	r0, sl
 8006712:	f7ff fb35 	bl	8005d80 <_free_r>
 8006716:	230c      	movs	r3, #12
 8006718:	f8ca 3000 	str.w	r3, [sl]
 800671c:	89a3      	ldrh	r3, [r4, #12]
 800671e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006722:	81a3      	strh	r3, [r4, #12]
 8006724:	f04f 30ff 	mov.w	r0, #4294967295
 8006728:	e7e9      	b.n	80066fe <__ssputs_r+0x8a>
	...

0800672c <_svfiprintf_r>:
 800672c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006730:	4698      	mov	r8, r3
 8006732:	898b      	ldrh	r3, [r1, #12]
 8006734:	061b      	lsls	r3, r3, #24
 8006736:	b09d      	sub	sp, #116	@ 0x74
 8006738:	4607      	mov	r7, r0
 800673a:	460d      	mov	r5, r1
 800673c:	4614      	mov	r4, r2
 800673e:	d510      	bpl.n	8006762 <_svfiprintf_r+0x36>
 8006740:	690b      	ldr	r3, [r1, #16]
 8006742:	b973      	cbnz	r3, 8006762 <_svfiprintf_r+0x36>
 8006744:	2140      	movs	r1, #64	@ 0x40
 8006746:	f7ff fb8f 	bl	8005e68 <_malloc_r>
 800674a:	6028      	str	r0, [r5, #0]
 800674c:	6128      	str	r0, [r5, #16]
 800674e:	b930      	cbnz	r0, 800675e <_svfiprintf_r+0x32>
 8006750:	230c      	movs	r3, #12
 8006752:	603b      	str	r3, [r7, #0]
 8006754:	f04f 30ff 	mov.w	r0, #4294967295
 8006758:	b01d      	add	sp, #116	@ 0x74
 800675a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800675e:	2340      	movs	r3, #64	@ 0x40
 8006760:	616b      	str	r3, [r5, #20]
 8006762:	2300      	movs	r3, #0
 8006764:	9309      	str	r3, [sp, #36]	@ 0x24
 8006766:	2320      	movs	r3, #32
 8006768:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800676c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006770:	2330      	movs	r3, #48	@ 0x30
 8006772:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006910 <_svfiprintf_r+0x1e4>
 8006776:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800677a:	f04f 0901 	mov.w	r9, #1
 800677e:	4623      	mov	r3, r4
 8006780:	469a      	mov	sl, r3
 8006782:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006786:	b10a      	cbz	r2, 800678c <_svfiprintf_r+0x60>
 8006788:	2a25      	cmp	r2, #37	@ 0x25
 800678a:	d1f9      	bne.n	8006780 <_svfiprintf_r+0x54>
 800678c:	ebba 0b04 	subs.w	fp, sl, r4
 8006790:	d00b      	beq.n	80067aa <_svfiprintf_r+0x7e>
 8006792:	465b      	mov	r3, fp
 8006794:	4622      	mov	r2, r4
 8006796:	4629      	mov	r1, r5
 8006798:	4638      	mov	r0, r7
 800679a:	f7ff ff6b 	bl	8006674 <__ssputs_r>
 800679e:	3001      	adds	r0, #1
 80067a0:	f000 80a7 	beq.w	80068f2 <_svfiprintf_r+0x1c6>
 80067a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80067a6:	445a      	add	r2, fp
 80067a8:	9209      	str	r2, [sp, #36]	@ 0x24
 80067aa:	f89a 3000 	ldrb.w	r3, [sl]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	f000 809f 	beq.w	80068f2 <_svfiprintf_r+0x1c6>
 80067b4:	2300      	movs	r3, #0
 80067b6:	f04f 32ff 	mov.w	r2, #4294967295
 80067ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80067be:	f10a 0a01 	add.w	sl, sl, #1
 80067c2:	9304      	str	r3, [sp, #16]
 80067c4:	9307      	str	r3, [sp, #28]
 80067c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80067ca:	931a      	str	r3, [sp, #104]	@ 0x68
 80067cc:	4654      	mov	r4, sl
 80067ce:	2205      	movs	r2, #5
 80067d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067d4:	484e      	ldr	r0, [pc, #312]	@ (8006910 <_svfiprintf_r+0x1e4>)
 80067d6:	f7f9 fcfb 	bl	80001d0 <memchr>
 80067da:	9a04      	ldr	r2, [sp, #16]
 80067dc:	b9d8      	cbnz	r0, 8006816 <_svfiprintf_r+0xea>
 80067de:	06d0      	lsls	r0, r2, #27
 80067e0:	bf44      	itt	mi
 80067e2:	2320      	movmi	r3, #32
 80067e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80067e8:	0711      	lsls	r1, r2, #28
 80067ea:	bf44      	itt	mi
 80067ec:	232b      	movmi	r3, #43	@ 0x2b
 80067ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80067f2:	f89a 3000 	ldrb.w	r3, [sl]
 80067f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80067f8:	d015      	beq.n	8006826 <_svfiprintf_r+0xfa>
 80067fa:	9a07      	ldr	r2, [sp, #28]
 80067fc:	4654      	mov	r4, sl
 80067fe:	2000      	movs	r0, #0
 8006800:	f04f 0c0a 	mov.w	ip, #10
 8006804:	4621      	mov	r1, r4
 8006806:	f811 3b01 	ldrb.w	r3, [r1], #1
 800680a:	3b30      	subs	r3, #48	@ 0x30
 800680c:	2b09      	cmp	r3, #9
 800680e:	d94b      	bls.n	80068a8 <_svfiprintf_r+0x17c>
 8006810:	b1b0      	cbz	r0, 8006840 <_svfiprintf_r+0x114>
 8006812:	9207      	str	r2, [sp, #28]
 8006814:	e014      	b.n	8006840 <_svfiprintf_r+0x114>
 8006816:	eba0 0308 	sub.w	r3, r0, r8
 800681a:	fa09 f303 	lsl.w	r3, r9, r3
 800681e:	4313      	orrs	r3, r2
 8006820:	9304      	str	r3, [sp, #16]
 8006822:	46a2      	mov	sl, r4
 8006824:	e7d2      	b.n	80067cc <_svfiprintf_r+0xa0>
 8006826:	9b03      	ldr	r3, [sp, #12]
 8006828:	1d19      	adds	r1, r3, #4
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	9103      	str	r1, [sp, #12]
 800682e:	2b00      	cmp	r3, #0
 8006830:	bfbb      	ittet	lt
 8006832:	425b      	neglt	r3, r3
 8006834:	f042 0202 	orrlt.w	r2, r2, #2
 8006838:	9307      	strge	r3, [sp, #28]
 800683a:	9307      	strlt	r3, [sp, #28]
 800683c:	bfb8      	it	lt
 800683e:	9204      	strlt	r2, [sp, #16]
 8006840:	7823      	ldrb	r3, [r4, #0]
 8006842:	2b2e      	cmp	r3, #46	@ 0x2e
 8006844:	d10a      	bne.n	800685c <_svfiprintf_r+0x130>
 8006846:	7863      	ldrb	r3, [r4, #1]
 8006848:	2b2a      	cmp	r3, #42	@ 0x2a
 800684a:	d132      	bne.n	80068b2 <_svfiprintf_r+0x186>
 800684c:	9b03      	ldr	r3, [sp, #12]
 800684e:	1d1a      	adds	r2, r3, #4
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	9203      	str	r2, [sp, #12]
 8006854:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006858:	3402      	adds	r4, #2
 800685a:	9305      	str	r3, [sp, #20]
 800685c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006920 <_svfiprintf_r+0x1f4>
 8006860:	7821      	ldrb	r1, [r4, #0]
 8006862:	2203      	movs	r2, #3
 8006864:	4650      	mov	r0, sl
 8006866:	f7f9 fcb3 	bl	80001d0 <memchr>
 800686a:	b138      	cbz	r0, 800687c <_svfiprintf_r+0x150>
 800686c:	9b04      	ldr	r3, [sp, #16]
 800686e:	eba0 000a 	sub.w	r0, r0, sl
 8006872:	2240      	movs	r2, #64	@ 0x40
 8006874:	4082      	lsls	r2, r0
 8006876:	4313      	orrs	r3, r2
 8006878:	3401      	adds	r4, #1
 800687a:	9304      	str	r3, [sp, #16]
 800687c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006880:	4824      	ldr	r0, [pc, #144]	@ (8006914 <_svfiprintf_r+0x1e8>)
 8006882:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006886:	2206      	movs	r2, #6
 8006888:	f7f9 fca2 	bl	80001d0 <memchr>
 800688c:	2800      	cmp	r0, #0
 800688e:	d036      	beq.n	80068fe <_svfiprintf_r+0x1d2>
 8006890:	4b21      	ldr	r3, [pc, #132]	@ (8006918 <_svfiprintf_r+0x1ec>)
 8006892:	bb1b      	cbnz	r3, 80068dc <_svfiprintf_r+0x1b0>
 8006894:	9b03      	ldr	r3, [sp, #12]
 8006896:	3307      	adds	r3, #7
 8006898:	f023 0307 	bic.w	r3, r3, #7
 800689c:	3308      	adds	r3, #8
 800689e:	9303      	str	r3, [sp, #12]
 80068a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068a2:	4433      	add	r3, r6
 80068a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80068a6:	e76a      	b.n	800677e <_svfiprintf_r+0x52>
 80068a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80068ac:	460c      	mov	r4, r1
 80068ae:	2001      	movs	r0, #1
 80068b0:	e7a8      	b.n	8006804 <_svfiprintf_r+0xd8>
 80068b2:	2300      	movs	r3, #0
 80068b4:	3401      	adds	r4, #1
 80068b6:	9305      	str	r3, [sp, #20]
 80068b8:	4619      	mov	r1, r3
 80068ba:	f04f 0c0a 	mov.w	ip, #10
 80068be:	4620      	mov	r0, r4
 80068c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80068c4:	3a30      	subs	r2, #48	@ 0x30
 80068c6:	2a09      	cmp	r2, #9
 80068c8:	d903      	bls.n	80068d2 <_svfiprintf_r+0x1a6>
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d0c6      	beq.n	800685c <_svfiprintf_r+0x130>
 80068ce:	9105      	str	r1, [sp, #20]
 80068d0:	e7c4      	b.n	800685c <_svfiprintf_r+0x130>
 80068d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80068d6:	4604      	mov	r4, r0
 80068d8:	2301      	movs	r3, #1
 80068da:	e7f0      	b.n	80068be <_svfiprintf_r+0x192>
 80068dc:	ab03      	add	r3, sp, #12
 80068de:	9300      	str	r3, [sp, #0]
 80068e0:	462a      	mov	r2, r5
 80068e2:	4b0e      	ldr	r3, [pc, #56]	@ (800691c <_svfiprintf_r+0x1f0>)
 80068e4:	a904      	add	r1, sp, #16
 80068e6:	4638      	mov	r0, r7
 80068e8:	f7fd fe6c 	bl	80045c4 <_printf_float>
 80068ec:	1c42      	adds	r2, r0, #1
 80068ee:	4606      	mov	r6, r0
 80068f0:	d1d6      	bne.n	80068a0 <_svfiprintf_r+0x174>
 80068f2:	89ab      	ldrh	r3, [r5, #12]
 80068f4:	065b      	lsls	r3, r3, #25
 80068f6:	f53f af2d 	bmi.w	8006754 <_svfiprintf_r+0x28>
 80068fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80068fc:	e72c      	b.n	8006758 <_svfiprintf_r+0x2c>
 80068fe:	ab03      	add	r3, sp, #12
 8006900:	9300      	str	r3, [sp, #0]
 8006902:	462a      	mov	r2, r5
 8006904:	4b05      	ldr	r3, [pc, #20]	@ (800691c <_svfiprintf_r+0x1f0>)
 8006906:	a904      	add	r1, sp, #16
 8006908:	4638      	mov	r0, r7
 800690a:	f7fe f8f3 	bl	8004af4 <_printf_i>
 800690e:	e7ed      	b.n	80068ec <_svfiprintf_r+0x1c0>
 8006910:	08007e0a 	.word	0x08007e0a
 8006914:	08007e14 	.word	0x08007e14
 8006918:	080045c5 	.word	0x080045c5
 800691c:	08006675 	.word	0x08006675
 8006920:	08007e10 	.word	0x08007e10

08006924 <__sflush_r>:
 8006924:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800692c:	0716      	lsls	r6, r2, #28
 800692e:	4605      	mov	r5, r0
 8006930:	460c      	mov	r4, r1
 8006932:	d454      	bmi.n	80069de <__sflush_r+0xba>
 8006934:	684b      	ldr	r3, [r1, #4]
 8006936:	2b00      	cmp	r3, #0
 8006938:	dc02      	bgt.n	8006940 <__sflush_r+0x1c>
 800693a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800693c:	2b00      	cmp	r3, #0
 800693e:	dd48      	ble.n	80069d2 <__sflush_r+0xae>
 8006940:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006942:	2e00      	cmp	r6, #0
 8006944:	d045      	beq.n	80069d2 <__sflush_r+0xae>
 8006946:	2300      	movs	r3, #0
 8006948:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800694c:	682f      	ldr	r7, [r5, #0]
 800694e:	6a21      	ldr	r1, [r4, #32]
 8006950:	602b      	str	r3, [r5, #0]
 8006952:	d030      	beq.n	80069b6 <__sflush_r+0x92>
 8006954:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006956:	89a3      	ldrh	r3, [r4, #12]
 8006958:	0759      	lsls	r1, r3, #29
 800695a:	d505      	bpl.n	8006968 <__sflush_r+0x44>
 800695c:	6863      	ldr	r3, [r4, #4]
 800695e:	1ad2      	subs	r2, r2, r3
 8006960:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006962:	b10b      	cbz	r3, 8006968 <__sflush_r+0x44>
 8006964:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006966:	1ad2      	subs	r2, r2, r3
 8006968:	2300      	movs	r3, #0
 800696a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800696c:	6a21      	ldr	r1, [r4, #32]
 800696e:	4628      	mov	r0, r5
 8006970:	47b0      	blx	r6
 8006972:	1c43      	adds	r3, r0, #1
 8006974:	89a3      	ldrh	r3, [r4, #12]
 8006976:	d106      	bne.n	8006986 <__sflush_r+0x62>
 8006978:	6829      	ldr	r1, [r5, #0]
 800697a:	291d      	cmp	r1, #29
 800697c:	d82b      	bhi.n	80069d6 <__sflush_r+0xb2>
 800697e:	4a2a      	ldr	r2, [pc, #168]	@ (8006a28 <__sflush_r+0x104>)
 8006980:	40ca      	lsrs	r2, r1
 8006982:	07d6      	lsls	r6, r2, #31
 8006984:	d527      	bpl.n	80069d6 <__sflush_r+0xb2>
 8006986:	2200      	movs	r2, #0
 8006988:	6062      	str	r2, [r4, #4]
 800698a:	04d9      	lsls	r1, r3, #19
 800698c:	6922      	ldr	r2, [r4, #16]
 800698e:	6022      	str	r2, [r4, #0]
 8006990:	d504      	bpl.n	800699c <__sflush_r+0x78>
 8006992:	1c42      	adds	r2, r0, #1
 8006994:	d101      	bne.n	800699a <__sflush_r+0x76>
 8006996:	682b      	ldr	r3, [r5, #0]
 8006998:	b903      	cbnz	r3, 800699c <__sflush_r+0x78>
 800699a:	6560      	str	r0, [r4, #84]	@ 0x54
 800699c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800699e:	602f      	str	r7, [r5, #0]
 80069a0:	b1b9      	cbz	r1, 80069d2 <__sflush_r+0xae>
 80069a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80069a6:	4299      	cmp	r1, r3
 80069a8:	d002      	beq.n	80069b0 <__sflush_r+0x8c>
 80069aa:	4628      	mov	r0, r5
 80069ac:	f7ff f9e8 	bl	8005d80 <_free_r>
 80069b0:	2300      	movs	r3, #0
 80069b2:	6363      	str	r3, [r4, #52]	@ 0x34
 80069b4:	e00d      	b.n	80069d2 <__sflush_r+0xae>
 80069b6:	2301      	movs	r3, #1
 80069b8:	4628      	mov	r0, r5
 80069ba:	47b0      	blx	r6
 80069bc:	4602      	mov	r2, r0
 80069be:	1c50      	adds	r0, r2, #1
 80069c0:	d1c9      	bne.n	8006956 <__sflush_r+0x32>
 80069c2:	682b      	ldr	r3, [r5, #0]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d0c6      	beq.n	8006956 <__sflush_r+0x32>
 80069c8:	2b1d      	cmp	r3, #29
 80069ca:	d001      	beq.n	80069d0 <__sflush_r+0xac>
 80069cc:	2b16      	cmp	r3, #22
 80069ce:	d11e      	bne.n	8006a0e <__sflush_r+0xea>
 80069d0:	602f      	str	r7, [r5, #0]
 80069d2:	2000      	movs	r0, #0
 80069d4:	e022      	b.n	8006a1c <__sflush_r+0xf8>
 80069d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069da:	b21b      	sxth	r3, r3
 80069dc:	e01b      	b.n	8006a16 <__sflush_r+0xf2>
 80069de:	690f      	ldr	r7, [r1, #16]
 80069e0:	2f00      	cmp	r7, #0
 80069e2:	d0f6      	beq.n	80069d2 <__sflush_r+0xae>
 80069e4:	0793      	lsls	r3, r2, #30
 80069e6:	680e      	ldr	r6, [r1, #0]
 80069e8:	bf08      	it	eq
 80069ea:	694b      	ldreq	r3, [r1, #20]
 80069ec:	600f      	str	r7, [r1, #0]
 80069ee:	bf18      	it	ne
 80069f0:	2300      	movne	r3, #0
 80069f2:	eba6 0807 	sub.w	r8, r6, r7
 80069f6:	608b      	str	r3, [r1, #8]
 80069f8:	f1b8 0f00 	cmp.w	r8, #0
 80069fc:	dde9      	ble.n	80069d2 <__sflush_r+0xae>
 80069fe:	6a21      	ldr	r1, [r4, #32]
 8006a00:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006a02:	4643      	mov	r3, r8
 8006a04:	463a      	mov	r2, r7
 8006a06:	4628      	mov	r0, r5
 8006a08:	47b0      	blx	r6
 8006a0a:	2800      	cmp	r0, #0
 8006a0c:	dc08      	bgt.n	8006a20 <__sflush_r+0xfc>
 8006a0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a16:	81a3      	strh	r3, [r4, #12]
 8006a18:	f04f 30ff 	mov.w	r0, #4294967295
 8006a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a20:	4407      	add	r7, r0
 8006a22:	eba8 0800 	sub.w	r8, r8, r0
 8006a26:	e7e7      	b.n	80069f8 <__sflush_r+0xd4>
 8006a28:	20400001 	.word	0x20400001

08006a2c <_fflush_r>:
 8006a2c:	b538      	push	{r3, r4, r5, lr}
 8006a2e:	690b      	ldr	r3, [r1, #16]
 8006a30:	4605      	mov	r5, r0
 8006a32:	460c      	mov	r4, r1
 8006a34:	b913      	cbnz	r3, 8006a3c <_fflush_r+0x10>
 8006a36:	2500      	movs	r5, #0
 8006a38:	4628      	mov	r0, r5
 8006a3a:	bd38      	pop	{r3, r4, r5, pc}
 8006a3c:	b118      	cbz	r0, 8006a46 <_fflush_r+0x1a>
 8006a3e:	6a03      	ldr	r3, [r0, #32]
 8006a40:	b90b      	cbnz	r3, 8006a46 <_fflush_r+0x1a>
 8006a42:	f7fe fa01 	bl	8004e48 <__sinit>
 8006a46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d0f3      	beq.n	8006a36 <_fflush_r+0xa>
 8006a4e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006a50:	07d0      	lsls	r0, r2, #31
 8006a52:	d404      	bmi.n	8006a5e <_fflush_r+0x32>
 8006a54:	0599      	lsls	r1, r3, #22
 8006a56:	d402      	bmi.n	8006a5e <_fflush_r+0x32>
 8006a58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a5a:	f7fe fb28 	bl	80050ae <__retarget_lock_acquire_recursive>
 8006a5e:	4628      	mov	r0, r5
 8006a60:	4621      	mov	r1, r4
 8006a62:	f7ff ff5f 	bl	8006924 <__sflush_r>
 8006a66:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006a68:	07da      	lsls	r2, r3, #31
 8006a6a:	4605      	mov	r5, r0
 8006a6c:	d4e4      	bmi.n	8006a38 <_fflush_r+0xc>
 8006a6e:	89a3      	ldrh	r3, [r4, #12]
 8006a70:	059b      	lsls	r3, r3, #22
 8006a72:	d4e1      	bmi.n	8006a38 <_fflush_r+0xc>
 8006a74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a76:	f7fe fb1b 	bl	80050b0 <__retarget_lock_release_recursive>
 8006a7a:	e7dd      	b.n	8006a38 <_fflush_r+0xc>

08006a7c <memmove>:
 8006a7c:	4288      	cmp	r0, r1
 8006a7e:	b510      	push	{r4, lr}
 8006a80:	eb01 0402 	add.w	r4, r1, r2
 8006a84:	d902      	bls.n	8006a8c <memmove+0x10>
 8006a86:	4284      	cmp	r4, r0
 8006a88:	4623      	mov	r3, r4
 8006a8a:	d807      	bhi.n	8006a9c <memmove+0x20>
 8006a8c:	1e43      	subs	r3, r0, #1
 8006a8e:	42a1      	cmp	r1, r4
 8006a90:	d008      	beq.n	8006aa4 <memmove+0x28>
 8006a92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006a9a:	e7f8      	b.n	8006a8e <memmove+0x12>
 8006a9c:	4402      	add	r2, r0
 8006a9e:	4601      	mov	r1, r0
 8006aa0:	428a      	cmp	r2, r1
 8006aa2:	d100      	bne.n	8006aa6 <memmove+0x2a>
 8006aa4:	bd10      	pop	{r4, pc}
 8006aa6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006aaa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006aae:	e7f7      	b.n	8006aa0 <memmove+0x24>

08006ab0 <_sbrk_r>:
 8006ab0:	b538      	push	{r3, r4, r5, lr}
 8006ab2:	4d06      	ldr	r5, [pc, #24]	@ (8006acc <_sbrk_r+0x1c>)
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	4604      	mov	r4, r0
 8006ab8:	4608      	mov	r0, r1
 8006aba:	602b      	str	r3, [r5, #0]
 8006abc:	f7fd fc3c 	bl	8004338 <_sbrk>
 8006ac0:	1c43      	adds	r3, r0, #1
 8006ac2:	d102      	bne.n	8006aca <_sbrk_r+0x1a>
 8006ac4:	682b      	ldr	r3, [r5, #0]
 8006ac6:	b103      	cbz	r3, 8006aca <_sbrk_r+0x1a>
 8006ac8:	6023      	str	r3, [r4, #0]
 8006aca:	bd38      	pop	{r3, r4, r5, pc}
 8006acc:	20000a70 	.word	0x20000a70

08006ad0 <__assert_func>:
 8006ad0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006ad2:	4614      	mov	r4, r2
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	4b09      	ldr	r3, [pc, #36]	@ (8006afc <__assert_func+0x2c>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4605      	mov	r5, r0
 8006adc:	68d8      	ldr	r0, [r3, #12]
 8006ade:	b14c      	cbz	r4, 8006af4 <__assert_func+0x24>
 8006ae0:	4b07      	ldr	r3, [pc, #28]	@ (8006b00 <__assert_func+0x30>)
 8006ae2:	9100      	str	r1, [sp, #0]
 8006ae4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006ae8:	4906      	ldr	r1, [pc, #24]	@ (8006b04 <__assert_func+0x34>)
 8006aea:	462b      	mov	r3, r5
 8006aec:	f000 f870 	bl	8006bd0 <fiprintf>
 8006af0:	f000 f880 	bl	8006bf4 <abort>
 8006af4:	4b04      	ldr	r3, [pc, #16]	@ (8006b08 <__assert_func+0x38>)
 8006af6:	461c      	mov	r4, r3
 8006af8:	e7f3      	b.n	8006ae2 <__assert_func+0x12>
 8006afa:	bf00      	nop
 8006afc:	20000010 	.word	0x20000010
 8006b00:	08007e25 	.word	0x08007e25
 8006b04:	08007e32 	.word	0x08007e32
 8006b08:	08007e60 	.word	0x08007e60

08006b0c <_calloc_r>:
 8006b0c:	b570      	push	{r4, r5, r6, lr}
 8006b0e:	fba1 5402 	umull	r5, r4, r1, r2
 8006b12:	b934      	cbnz	r4, 8006b22 <_calloc_r+0x16>
 8006b14:	4629      	mov	r1, r5
 8006b16:	f7ff f9a7 	bl	8005e68 <_malloc_r>
 8006b1a:	4606      	mov	r6, r0
 8006b1c:	b928      	cbnz	r0, 8006b2a <_calloc_r+0x1e>
 8006b1e:	4630      	mov	r0, r6
 8006b20:	bd70      	pop	{r4, r5, r6, pc}
 8006b22:	220c      	movs	r2, #12
 8006b24:	6002      	str	r2, [r0, #0]
 8006b26:	2600      	movs	r6, #0
 8006b28:	e7f9      	b.n	8006b1e <_calloc_r+0x12>
 8006b2a:	462a      	mov	r2, r5
 8006b2c:	4621      	mov	r1, r4
 8006b2e:	f7fe fa41 	bl	8004fb4 <memset>
 8006b32:	e7f4      	b.n	8006b1e <_calloc_r+0x12>

08006b34 <__ascii_mbtowc>:
 8006b34:	b082      	sub	sp, #8
 8006b36:	b901      	cbnz	r1, 8006b3a <__ascii_mbtowc+0x6>
 8006b38:	a901      	add	r1, sp, #4
 8006b3a:	b142      	cbz	r2, 8006b4e <__ascii_mbtowc+0x1a>
 8006b3c:	b14b      	cbz	r3, 8006b52 <__ascii_mbtowc+0x1e>
 8006b3e:	7813      	ldrb	r3, [r2, #0]
 8006b40:	600b      	str	r3, [r1, #0]
 8006b42:	7812      	ldrb	r2, [r2, #0]
 8006b44:	1e10      	subs	r0, r2, #0
 8006b46:	bf18      	it	ne
 8006b48:	2001      	movne	r0, #1
 8006b4a:	b002      	add	sp, #8
 8006b4c:	4770      	bx	lr
 8006b4e:	4610      	mov	r0, r2
 8006b50:	e7fb      	b.n	8006b4a <__ascii_mbtowc+0x16>
 8006b52:	f06f 0001 	mvn.w	r0, #1
 8006b56:	e7f8      	b.n	8006b4a <__ascii_mbtowc+0x16>

08006b58 <_realloc_r>:
 8006b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b5c:	4607      	mov	r7, r0
 8006b5e:	4614      	mov	r4, r2
 8006b60:	460d      	mov	r5, r1
 8006b62:	b921      	cbnz	r1, 8006b6e <_realloc_r+0x16>
 8006b64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b68:	4611      	mov	r1, r2
 8006b6a:	f7ff b97d 	b.w	8005e68 <_malloc_r>
 8006b6e:	b92a      	cbnz	r2, 8006b7c <_realloc_r+0x24>
 8006b70:	f7ff f906 	bl	8005d80 <_free_r>
 8006b74:	4625      	mov	r5, r4
 8006b76:	4628      	mov	r0, r5
 8006b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b7c:	f000 f841 	bl	8006c02 <_malloc_usable_size_r>
 8006b80:	4284      	cmp	r4, r0
 8006b82:	4606      	mov	r6, r0
 8006b84:	d802      	bhi.n	8006b8c <_realloc_r+0x34>
 8006b86:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006b8a:	d8f4      	bhi.n	8006b76 <_realloc_r+0x1e>
 8006b8c:	4621      	mov	r1, r4
 8006b8e:	4638      	mov	r0, r7
 8006b90:	f7ff f96a 	bl	8005e68 <_malloc_r>
 8006b94:	4680      	mov	r8, r0
 8006b96:	b908      	cbnz	r0, 8006b9c <_realloc_r+0x44>
 8006b98:	4645      	mov	r5, r8
 8006b9a:	e7ec      	b.n	8006b76 <_realloc_r+0x1e>
 8006b9c:	42b4      	cmp	r4, r6
 8006b9e:	4622      	mov	r2, r4
 8006ba0:	4629      	mov	r1, r5
 8006ba2:	bf28      	it	cs
 8006ba4:	4632      	movcs	r2, r6
 8006ba6:	f7fe fa84 	bl	80050b2 <memcpy>
 8006baa:	4629      	mov	r1, r5
 8006bac:	4638      	mov	r0, r7
 8006bae:	f7ff f8e7 	bl	8005d80 <_free_r>
 8006bb2:	e7f1      	b.n	8006b98 <_realloc_r+0x40>

08006bb4 <__ascii_wctomb>:
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	4608      	mov	r0, r1
 8006bb8:	b141      	cbz	r1, 8006bcc <__ascii_wctomb+0x18>
 8006bba:	2aff      	cmp	r2, #255	@ 0xff
 8006bbc:	d904      	bls.n	8006bc8 <__ascii_wctomb+0x14>
 8006bbe:	228a      	movs	r2, #138	@ 0x8a
 8006bc0:	601a      	str	r2, [r3, #0]
 8006bc2:	f04f 30ff 	mov.w	r0, #4294967295
 8006bc6:	4770      	bx	lr
 8006bc8:	700a      	strb	r2, [r1, #0]
 8006bca:	2001      	movs	r0, #1
 8006bcc:	4770      	bx	lr
	...

08006bd0 <fiprintf>:
 8006bd0:	b40e      	push	{r1, r2, r3}
 8006bd2:	b503      	push	{r0, r1, lr}
 8006bd4:	4601      	mov	r1, r0
 8006bd6:	ab03      	add	r3, sp, #12
 8006bd8:	4805      	ldr	r0, [pc, #20]	@ (8006bf0 <fiprintf+0x20>)
 8006bda:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bde:	6800      	ldr	r0, [r0, #0]
 8006be0:	9301      	str	r3, [sp, #4]
 8006be2:	f000 f83f 	bl	8006c64 <_vfiprintf_r>
 8006be6:	b002      	add	sp, #8
 8006be8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006bec:	b003      	add	sp, #12
 8006bee:	4770      	bx	lr
 8006bf0:	20000010 	.word	0x20000010

08006bf4 <abort>:
 8006bf4:	b508      	push	{r3, lr}
 8006bf6:	2006      	movs	r0, #6
 8006bf8:	f000 fa08 	bl	800700c <raise>
 8006bfc:	2001      	movs	r0, #1
 8006bfe:	f7fd fb6b 	bl	80042d8 <_exit>

08006c02 <_malloc_usable_size_r>:
 8006c02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c06:	1f18      	subs	r0, r3, #4
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	bfbc      	itt	lt
 8006c0c:	580b      	ldrlt	r3, [r1, r0]
 8006c0e:	18c0      	addlt	r0, r0, r3
 8006c10:	4770      	bx	lr

08006c12 <__sfputc_r>:
 8006c12:	6893      	ldr	r3, [r2, #8]
 8006c14:	3b01      	subs	r3, #1
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	b410      	push	{r4}
 8006c1a:	6093      	str	r3, [r2, #8]
 8006c1c:	da08      	bge.n	8006c30 <__sfputc_r+0x1e>
 8006c1e:	6994      	ldr	r4, [r2, #24]
 8006c20:	42a3      	cmp	r3, r4
 8006c22:	db01      	blt.n	8006c28 <__sfputc_r+0x16>
 8006c24:	290a      	cmp	r1, #10
 8006c26:	d103      	bne.n	8006c30 <__sfputc_r+0x1e>
 8006c28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c2c:	f000 b932 	b.w	8006e94 <__swbuf_r>
 8006c30:	6813      	ldr	r3, [r2, #0]
 8006c32:	1c58      	adds	r0, r3, #1
 8006c34:	6010      	str	r0, [r2, #0]
 8006c36:	7019      	strb	r1, [r3, #0]
 8006c38:	4608      	mov	r0, r1
 8006c3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <__sfputs_r>:
 8006c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c42:	4606      	mov	r6, r0
 8006c44:	460f      	mov	r7, r1
 8006c46:	4614      	mov	r4, r2
 8006c48:	18d5      	adds	r5, r2, r3
 8006c4a:	42ac      	cmp	r4, r5
 8006c4c:	d101      	bne.n	8006c52 <__sfputs_r+0x12>
 8006c4e:	2000      	movs	r0, #0
 8006c50:	e007      	b.n	8006c62 <__sfputs_r+0x22>
 8006c52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c56:	463a      	mov	r2, r7
 8006c58:	4630      	mov	r0, r6
 8006c5a:	f7ff ffda 	bl	8006c12 <__sfputc_r>
 8006c5e:	1c43      	adds	r3, r0, #1
 8006c60:	d1f3      	bne.n	8006c4a <__sfputs_r+0xa>
 8006c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006c64 <_vfiprintf_r>:
 8006c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c68:	460d      	mov	r5, r1
 8006c6a:	b09d      	sub	sp, #116	@ 0x74
 8006c6c:	4614      	mov	r4, r2
 8006c6e:	4698      	mov	r8, r3
 8006c70:	4606      	mov	r6, r0
 8006c72:	b118      	cbz	r0, 8006c7c <_vfiprintf_r+0x18>
 8006c74:	6a03      	ldr	r3, [r0, #32]
 8006c76:	b90b      	cbnz	r3, 8006c7c <_vfiprintf_r+0x18>
 8006c78:	f7fe f8e6 	bl	8004e48 <__sinit>
 8006c7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006c7e:	07d9      	lsls	r1, r3, #31
 8006c80:	d405      	bmi.n	8006c8e <_vfiprintf_r+0x2a>
 8006c82:	89ab      	ldrh	r3, [r5, #12]
 8006c84:	059a      	lsls	r2, r3, #22
 8006c86:	d402      	bmi.n	8006c8e <_vfiprintf_r+0x2a>
 8006c88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006c8a:	f7fe fa10 	bl	80050ae <__retarget_lock_acquire_recursive>
 8006c8e:	89ab      	ldrh	r3, [r5, #12]
 8006c90:	071b      	lsls	r3, r3, #28
 8006c92:	d501      	bpl.n	8006c98 <_vfiprintf_r+0x34>
 8006c94:	692b      	ldr	r3, [r5, #16]
 8006c96:	b99b      	cbnz	r3, 8006cc0 <_vfiprintf_r+0x5c>
 8006c98:	4629      	mov	r1, r5
 8006c9a:	4630      	mov	r0, r6
 8006c9c:	f000 f938 	bl	8006f10 <__swsetup_r>
 8006ca0:	b170      	cbz	r0, 8006cc0 <_vfiprintf_r+0x5c>
 8006ca2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006ca4:	07dc      	lsls	r4, r3, #31
 8006ca6:	d504      	bpl.n	8006cb2 <_vfiprintf_r+0x4e>
 8006ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8006cac:	b01d      	add	sp, #116	@ 0x74
 8006cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cb2:	89ab      	ldrh	r3, [r5, #12]
 8006cb4:	0598      	lsls	r0, r3, #22
 8006cb6:	d4f7      	bmi.n	8006ca8 <_vfiprintf_r+0x44>
 8006cb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006cba:	f7fe f9f9 	bl	80050b0 <__retarget_lock_release_recursive>
 8006cbe:	e7f3      	b.n	8006ca8 <_vfiprintf_r+0x44>
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	9309      	str	r3, [sp, #36]	@ 0x24
 8006cc4:	2320      	movs	r3, #32
 8006cc6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006cca:	f8cd 800c 	str.w	r8, [sp, #12]
 8006cce:	2330      	movs	r3, #48	@ 0x30
 8006cd0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006e80 <_vfiprintf_r+0x21c>
 8006cd4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006cd8:	f04f 0901 	mov.w	r9, #1
 8006cdc:	4623      	mov	r3, r4
 8006cde:	469a      	mov	sl, r3
 8006ce0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ce4:	b10a      	cbz	r2, 8006cea <_vfiprintf_r+0x86>
 8006ce6:	2a25      	cmp	r2, #37	@ 0x25
 8006ce8:	d1f9      	bne.n	8006cde <_vfiprintf_r+0x7a>
 8006cea:	ebba 0b04 	subs.w	fp, sl, r4
 8006cee:	d00b      	beq.n	8006d08 <_vfiprintf_r+0xa4>
 8006cf0:	465b      	mov	r3, fp
 8006cf2:	4622      	mov	r2, r4
 8006cf4:	4629      	mov	r1, r5
 8006cf6:	4630      	mov	r0, r6
 8006cf8:	f7ff ffa2 	bl	8006c40 <__sfputs_r>
 8006cfc:	3001      	adds	r0, #1
 8006cfe:	f000 80a7 	beq.w	8006e50 <_vfiprintf_r+0x1ec>
 8006d02:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d04:	445a      	add	r2, fp
 8006d06:	9209      	str	r2, [sp, #36]	@ 0x24
 8006d08:	f89a 3000 	ldrb.w	r3, [sl]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	f000 809f 	beq.w	8006e50 <_vfiprintf_r+0x1ec>
 8006d12:	2300      	movs	r3, #0
 8006d14:	f04f 32ff 	mov.w	r2, #4294967295
 8006d18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d1c:	f10a 0a01 	add.w	sl, sl, #1
 8006d20:	9304      	str	r3, [sp, #16]
 8006d22:	9307      	str	r3, [sp, #28]
 8006d24:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006d28:	931a      	str	r3, [sp, #104]	@ 0x68
 8006d2a:	4654      	mov	r4, sl
 8006d2c:	2205      	movs	r2, #5
 8006d2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d32:	4853      	ldr	r0, [pc, #332]	@ (8006e80 <_vfiprintf_r+0x21c>)
 8006d34:	f7f9 fa4c 	bl	80001d0 <memchr>
 8006d38:	9a04      	ldr	r2, [sp, #16]
 8006d3a:	b9d8      	cbnz	r0, 8006d74 <_vfiprintf_r+0x110>
 8006d3c:	06d1      	lsls	r1, r2, #27
 8006d3e:	bf44      	itt	mi
 8006d40:	2320      	movmi	r3, #32
 8006d42:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d46:	0713      	lsls	r3, r2, #28
 8006d48:	bf44      	itt	mi
 8006d4a:	232b      	movmi	r3, #43	@ 0x2b
 8006d4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d50:	f89a 3000 	ldrb.w	r3, [sl]
 8006d54:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d56:	d015      	beq.n	8006d84 <_vfiprintf_r+0x120>
 8006d58:	9a07      	ldr	r2, [sp, #28]
 8006d5a:	4654      	mov	r4, sl
 8006d5c:	2000      	movs	r0, #0
 8006d5e:	f04f 0c0a 	mov.w	ip, #10
 8006d62:	4621      	mov	r1, r4
 8006d64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d68:	3b30      	subs	r3, #48	@ 0x30
 8006d6a:	2b09      	cmp	r3, #9
 8006d6c:	d94b      	bls.n	8006e06 <_vfiprintf_r+0x1a2>
 8006d6e:	b1b0      	cbz	r0, 8006d9e <_vfiprintf_r+0x13a>
 8006d70:	9207      	str	r2, [sp, #28]
 8006d72:	e014      	b.n	8006d9e <_vfiprintf_r+0x13a>
 8006d74:	eba0 0308 	sub.w	r3, r0, r8
 8006d78:	fa09 f303 	lsl.w	r3, r9, r3
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	9304      	str	r3, [sp, #16]
 8006d80:	46a2      	mov	sl, r4
 8006d82:	e7d2      	b.n	8006d2a <_vfiprintf_r+0xc6>
 8006d84:	9b03      	ldr	r3, [sp, #12]
 8006d86:	1d19      	adds	r1, r3, #4
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	9103      	str	r1, [sp, #12]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	bfbb      	ittet	lt
 8006d90:	425b      	neglt	r3, r3
 8006d92:	f042 0202 	orrlt.w	r2, r2, #2
 8006d96:	9307      	strge	r3, [sp, #28]
 8006d98:	9307      	strlt	r3, [sp, #28]
 8006d9a:	bfb8      	it	lt
 8006d9c:	9204      	strlt	r2, [sp, #16]
 8006d9e:	7823      	ldrb	r3, [r4, #0]
 8006da0:	2b2e      	cmp	r3, #46	@ 0x2e
 8006da2:	d10a      	bne.n	8006dba <_vfiprintf_r+0x156>
 8006da4:	7863      	ldrb	r3, [r4, #1]
 8006da6:	2b2a      	cmp	r3, #42	@ 0x2a
 8006da8:	d132      	bne.n	8006e10 <_vfiprintf_r+0x1ac>
 8006daa:	9b03      	ldr	r3, [sp, #12]
 8006dac:	1d1a      	adds	r2, r3, #4
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	9203      	str	r2, [sp, #12]
 8006db2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006db6:	3402      	adds	r4, #2
 8006db8:	9305      	str	r3, [sp, #20]
 8006dba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006e90 <_vfiprintf_r+0x22c>
 8006dbe:	7821      	ldrb	r1, [r4, #0]
 8006dc0:	2203      	movs	r2, #3
 8006dc2:	4650      	mov	r0, sl
 8006dc4:	f7f9 fa04 	bl	80001d0 <memchr>
 8006dc8:	b138      	cbz	r0, 8006dda <_vfiprintf_r+0x176>
 8006dca:	9b04      	ldr	r3, [sp, #16]
 8006dcc:	eba0 000a 	sub.w	r0, r0, sl
 8006dd0:	2240      	movs	r2, #64	@ 0x40
 8006dd2:	4082      	lsls	r2, r0
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	3401      	adds	r4, #1
 8006dd8:	9304      	str	r3, [sp, #16]
 8006dda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dde:	4829      	ldr	r0, [pc, #164]	@ (8006e84 <_vfiprintf_r+0x220>)
 8006de0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006de4:	2206      	movs	r2, #6
 8006de6:	f7f9 f9f3 	bl	80001d0 <memchr>
 8006dea:	2800      	cmp	r0, #0
 8006dec:	d03f      	beq.n	8006e6e <_vfiprintf_r+0x20a>
 8006dee:	4b26      	ldr	r3, [pc, #152]	@ (8006e88 <_vfiprintf_r+0x224>)
 8006df0:	bb1b      	cbnz	r3, 8006e3a <_vfiprintf_r+0x1d6>
 8006df2:	9b03      	ldr	r3, [sp, #12]
 8006df4:	3307      	adds	r3, #7
 8006df6:	f023 0307 	bic.w	r3, r3, #7
 8006dfa:	3308      	adds	r3, #8
 8006dfc:	9303      	str	r3, [sp, #12]
 8006dfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e00:	443b      	add	r3, r7
 8006e02:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e04:	e76a      	b.n	8006cdc <_vfiprintf_r+0x78>
 8006e06:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e0a:	460c      	mov	r4, r1
 8006e0c:	2001      	movs	r0, #1
 8006e0e:	e7a8      	b.n	8006d62 <_vfiprintf_r+0xfe>
 8006e10:	2300      	movs	r3, #0
 8006e12:	3401      	adds	r4, #1
 8006e14:	9305      	str	r3, [sp, #20]
 8006e16:	4619      	mov	r1, r3
 8006e18:	f04f 0c0a 	mov.w	ip, #10
 8006e1c:	4620      	mov	r0, r4
 8006e1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e22:	3a30      	subs	r2, #48	@ 0x30
 8006e24:	2a09      	cmp	r2, #9
 8006e26:	d903      	bls.n	8006e30 <_vfiprintf_r+0x1cc>
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d0c6      	beq.n	8006dba <_vfiprintf_r+0x156>
 8006e2c:	9105      	str	r1, [sp, #20]
 8006e2e:	e7c4      	b.n	8006dba <_vfiprintf_r+0x156>
 8006e30:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e34:	4604      	mov	r4, r0
 8006e36:	2301      	movs	r3, #1
 8006e38:	e7f0      	b.n	8006e1c <_vfiprintf_r+0x1b8>
 8006e3a:	ab03      	add	r3, sp, #12
 8006e3c:	9300      	str	r3, [sp, #0]
 8006e3e:	462a      	mov	r2, r5
 8006e40:	4b12      	ldr	r3, [pc, #72]	@ (8006e8c <_vfiprintf_r+0x228>)
 8006e42:	a904      	add	r1, sp, #16
 8006e44:	4630      	mov	r0, r6
 8006e46:	f7fd fbbd 	bl	80045c4 <_printf_float>
 8006e4a:	4607      	mov	r7, r0
 8006e4c:	1c78      	adds	r0, r7, #1
 8006e4e:	d1d6      	bne.n	8006dfe <_vfiprintf_r+0x19a>
 8006e50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006e52:	07d9      	lsls	r1, r3, #31
 8006e54:	d405      	bmi.n	8006e62 <_vfiprintf_r+0x1fe>
 8006e56:	89ab      	ldrh	r3, [r5, #12]
 8006e58:	059a      	lsls	r2, r3, #22
 8006e5a:	d402      	bmi.n	8006e62 <_vfiprintf_r+0x1fe>
 8006e5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006e5e:	f7fe f927 	bl	80050b0 <__retarget_lock_release_recursive>
 8006e62:	89ab      	ldrh	r3, [r5, #12]
 8006e64:	065b      	lsls	r3, r3, #25
 8006e66:	f53f af1f 	bmi.w	8006ca8 <_vfiprintf_r+0x44>
 8006e6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006e6c:	e71e      	b.n	8006cac <_vfiprintf_r+0x48>
 8006e6e:	ab03      	add	r3, sp, #12
 8006e70:	9300      	str	r3, [sp, #0]
 8006e72:	462a      	mov	r2, r5
 8006e74:	4b05      	ldr	r3, [pc, #20]	@ (8006e8c <_vfiprintf_r+0x228>)
 8006e76:	a904      	add	r1, sp, #16
 8006e78:	4630      	mov	r0, r6
 8006e7a:	f7fd fe3b 	bl	8004af4 <_printf_i>
 8006e7e:	e7e4      	b.n	8006e4a <_vfiprintf_r+0x1e6>
 8006e80:	08007e0a 	.word	0x08007e0a
 8006e84:	08007e14 	.word	0x08007e14
 8006e88:	080045c5 	.word	0x080045c5
 8006e8c:	08006c41 	.word	0x08006c41
 8006e90:	08007e10 	.word	0x08007e10

08006e94 <__swbuf_r>:
 8006e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e96:	460e      	mov	r6, r1
 8006e98:	4614      	mov	r4, r2
 8006e9a:	4605      	mov	r5, r0
 8006e9c:	b118      	cbz	r0, 8006ea6 <__swbuf_r+0x12>
 8006e9e:	6a03      	ldr	r3, [r0, #32]
 8006ea0:	b90b      	cbnz	r3, 8006ea6 <__swbuf_r+0x12>
 8006ea2:	f7fd ffd1 	bl	8004e48 <__sinit>
 8006ea6:	69a3      	ldr	r3, [r4, #24]
 8006ea8:	60a3      	str	r3, [r4, #8]
 8006eaa:	89a3      	ldrh	r3, [r4, #12]
 8006eac:	071a      	lsls	r2, r3, #28
 8006eae:	d501      	bpl.n	8006eb4 <__swbuf_r+0x20>
 8006eb0:	6923      	ldr	r3, [r4, #16]
 8006eb2:	b943      	cbnz	r3, 8006ec6 <__swbuf_r+0x32>
 8006eb4:	4621      	mov	r1, r4
 8006eb6:	4628      	mov	r0, r5
 8006eb8:	f000 f82a 	bl	8006f10 <__swsetup_r>
 8006ebc:	b118      	cbz	r0, 8006ec6 <__swbuf_r+0x32>
 8006ebe:	f04f 37ff 	mov.w	r7, #4294967295
 8006ec2:	4638      	mov	r0, r7
 8006ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ec6:	6823      	ldr	r3, [r4, #0]
 8006ec8:	6922      	ldr	r2, [r4, #16]
 8006eca:	1a98      	subs	r0, r3, r2
 8006ecc:	6963      	ldr	r3, [r4, #20]
 8006ece:	b2f6      	uxtb	r6, r6
 8006ed0:	4283      	cmp	r3, r0
 8006ed2:	4637      	mov	r7, r6
 8006ed4:	dc05      	bgt.n	8006ee2 <__swbuf_r+0x4e>
 8006ed6:	4621      	mov	r1, r4
 8006ed8:	4628      	mov	r0, r5
 8006eda:	f7ff fda7 	bl	8006a2c <_fflush_r>
 8006ede:	2800      	cmp	r0, #0
 8006ee0:	d1ed      	bne.n	8006ebe <__swbuf_r+0x2a>
 8006ee2:	68a3      	ldr	r3, [r4, #8]
 8006ee4:	3b01      	subs	r3, #1
 8006ee6:	60a3      	str	r3, [r4, #8]
 8006ee8:	6823      	ldr	r3, [r4, #0]
 8006eea:	1c5a      	adds	r2, r3, #1
 8006eec:	6022      	str	r2, [r4, #0]
 8006eee:	701e      	strb	r6, [r3, #0]
 8006ef0:	6962      	ldr	r2, [r4, #20]
 8006ef2:	1c43      	adds	r3, r0, #1
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d004      	beq.n	8006f02 <__swbuf_r+0x6e>
 8006ef8:	89a3      	ldrh	r3, [r4, #12]
 8006efa:	07db      	lsls	r3, r3, #31
 8006efc:	d5e1      	bpl.n	8006ec2 <__swbuf_r+0x2e>
 8006efe:	2e0a      	cmp	r6, #10
 8006f00:	d1df      	bne.n	8006ec2 <__swbuf_r+0x2e>
 8006f02:	4621      	mov	r1, r4
 8006f04:	4628      	mov	r0, r5
 8006f06:	f7ff fd91 	bl	8006a2c <_fflush_r>
 8006f0a:	2800      	cmp	r0, #0
 8006f0c:	d0d9      	beq.n	8006ec2 <__swbuf_r+0x2e>
 8006f0e:	e7d6      	b.n	8006ebe <__swbuf_r+0x2a>

08006f10 <__swsetup_r>:
 8006f10:	b538      	push	{r3, r4, r5, lr}
 8006f12:	4b29      	ldr	r3, [pc, #164]	@ (8006fb8 <__swsetup_r+0xa8>)
 8006f14:	4605      	mov	r5, r0
 8006f16:	6818      	ldr	r0, [r3, #0]
 8006f18:	460c      	mov	r4, r1
 8006f1a:	b118      	cbz	r0, 8006f24 <__swsetup_r+0x14>
 8006f1c:	6a03      	ldr	r3, [r0, #32]
 8006f1e:	b90b      	cbnz	r3, 8006f24 <__swsetup_r+0x14>
 8006f20:	f7fd ff92 	bl	8004e48 <__sinit>
 8006f24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f28:	0719      	lsls	r1, r3, #28
 8006f2a:	d422      	bmi.n	8006f72 <__swsetup_r+0x62>
 8006f2c:	06da      	lsls	r2, r3, #27
 8006f2e:	d407      	bmi.n	8006f40 <__swsetup_r+0x30>
 8006f30:	2209      	movs	r2, #9
 8006f32:	602a      	str	r2, [r5, #0]
 8006f34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f38:	81a3      	strh	r3, [r4, #12]
 8006f3a:	f04f 30ff 	mov.w	r0, #4294967295
 8006f3e:	e033      	b.n	8006fa8 <__swsetup_r+0x98>
 8006f40:	0758      	lsls	r0, r3, #29
 8006f42:	d512      	bpl.n	8006f6a <__swsetup_r+0x5a>
 8006f44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006f46:	b141      	cbz	r1, 8006f5a <__swsetup_r+0x4a>
 8006f48:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006f4c:	4299      	cmp	r1, r3
 8006f4e:	d002      	beq.n	8006f56 <__swsetup_r+0x46>
 8006f50:	4628      	mov	r0, r5
 8006f52:	f7fe ff15 	bl	8005d80 <_free_r>
 8006f56:	2300      	movs	r3, #0
 8006f58:	6363      	str	r3, [r4, #52]	@ 0x34
 8006f5a:	89a3      	ldrh	r3, [r4, #12]
 8006f5c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006f60:	81a3      	strh	r3, [r4, #12]
 8006f62:	2300      	movs	r3, #0
 8006f64:	6063      	str	r3, [r4, #4]
 8006f66:	6923      	ldr	r3, [r4, #16]
 8006f68:	6023      	str	r3, [r4, #0]
 8006f6a:	89a3      	ldrh	r3, [r4, #12]
 8006f6c:	f043 0308 	orr.w	r3, r3, #8
 8006f70:	81a3      	strh	r3, [r4, #12]
 8006f72:	6923      	ldr	r3, [r4, #16]
 8006f74:	b94b      	cbnz	r3, 8006f8a <__swsetup_r+0x7a>
 8006f76:	89a3      	ldrh	r3, [r4, #12]
 8006f78:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006f7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f80:	d003      	beq.n	8006f8a <__swsetup_r+0x7a>
 8006f82:	4621      	mov	r1, r4
 8006f84:	4628      	mov	r0, r5
 8006f86:	f000 f883 	bl	8007090 <__smakebuf_r>
 8006f8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f8e:	f013 0201 	ands.w	r2, r3, #1
 8006f92:	d00a      	beq.n	8006faa <__swsetup_r+0x9a>
 8006f94:	2200      	movs	r2, #0
 8006f96:	60a2      	str	r2, [r4, #8]
 8006f98:	6962      	ldr	r2, [r4, #20]
 8006f9a:	4252      	negs	r2, r2
 8006f9c:	61a2      	str	r2, [r4, #24]
 8006f9e:	6922      	ldr	r2, [r4, #16]
 8006fa0:	b942      	cbnz	r2, 8006fb4 <__swsetup_r+0xa4>
 8006fa2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006fa6:	d1c5      	bne.n	8006f34 <__swsetup_r+0x24>
 8006fa8:	bd38      	pop	{r3, r4, r5, pc}
 8006faa:	0799      	lsls	r1, r3, #30
 8006fac:	bf58      	it	pl
 8006fae:	6962      	ldrpl	r2, [r4, #20]
 8006fb0:	60a2      	str	r2, [r4, #8]
 8006fb2:	e7f4      	b.n	8006f9e <__swsetup_r+0x8e>
 8006fb4:	2000      	movs	r0, #0
 8006fb6:	e7f7      	b.n	8006fa8 <__swsetup_r+0x98>
 8006fb8:	20000010 	.word	0x20000010

08006fbc <_raise_r>:
 8006fbc:	291f      	cmp	r1, #31
 8006fbe:	b538      	push	{r3, r4, r5, lr}
 8006fc0:	4605      	mov	r5, r0
 8006fc2:	460c      	mov	r4, r1
 8006fc4:	d904      	bls.n	8006fd0 <_raise_r+0x14>
 8006fc6:	2316      	movs	r3, #22
 8006fc8:	6003      	str	r3, [r0, #0]
 8006fca:	f04f 30ff 	mov.w	r0, #4294967295
 8006fce:	bd38      	pop	{r3, r4, r5, pc}
 8006fd0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006fd2:	b112      	cbz	r2, 8006fda <_raise_r+0x1e>
 8006fd4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006fd8:	b94b      	cbnz	r3, 8006fee <_raise_r+0x32>
 8006fda:	4628      	mov	r0, r5
 8006fdc:	f000 f830 	bl	8007040 <_getpid_r>
 8006fe0:	4622      	mov	r2, r4
 8006fe2:	4601      	mov	r1, r0
 8006fe4:	4628      	mov	r0, r5
 8006fe6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006fea:	f000 b817 	b.w	800701c <_kill_r>
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d00a      	beq.n	8007008 <_raise_r+0x4c>
 8006ff2:	1c59      	adds	r1, r3, #1
 8006ff4:	d103      	bne.n	8006ffe <_raise_r+0x42>
 8006ff6:	2316      	movs	r3, #22
 8006ff8:	6003      	str	r3, [r0, #0]
 8006ffa:	2001      	movs	r0, #1
 8006ffc:	e7e7      	b.n	8006fce <_raise_r+0x12>
 8006ffe:	2100      	movs	r1, #0
 8007000:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007004:	4620      	mov	r0, r4
 8007006:	4798      	blx	r3
 8007008:	2000      	movs	r0, #0
 800700a:	e7e0      	b.n	8006fce <_raise_r+0x12>

0800700c <raise>:
 800700c:	4b02      	ldr	r3, [pc, #8]	@ (8007018 <raise+0xc>)
 800700e:	4601      	mov	r1, r0
 8007010:	6818      	ldr	r0, [r3, #0]
 8007012:	f7ff bfd3 	b.w	8006fbc <_raise_r>
 8007016:	bf00      	nop
 8007018:	20000010 	.word	0x20000010

0800701c <_kill_r>:
 800701c:	b538      	push	{r3, r4, r5, lr}
 800701e:	4d07      	ldr	r5, [pc, #28]	@ (800703c <_kill_r+0x20>)
 8007020:	2300      	movs	r3, #0
 8007022:	4604      	mov	r4, r0
 8007024:	4608      	mov	r0, r1
 8007026:	4611      	mov	r1, r2
 8007028:	602b      	str	r3, [r5, #0]
 800702a:	f7fd f94d 	bl	80042c8 <_kill>
 800702e:	1c43      	adds	r3, r0, #1
 8007030:	d102      	bne.n	8007038 <_kill_r+0x1c>
 8007032:	682b      	ldr	r3, [r5, #0]
 8007034:	b103      	cbz	r3, 8007038 <_kill_r+0x1c>
 8007036:	6023      	str	r3, [r4, #0]
 8007038:	bd38      	pop	{r3, r4, r5, pc}
 800703a:	bf00      	nop
 800703c:	20000a70 	.word	0x20000a70

08007040 <_getpid_r>:
 8007040:	f7fd b940 	b.w	80042c4 <_getpid>

08007044 <__swhatbuf_r>:
 8007044:	b570      	push	{r4, r5, r6, lr}
 8007046:	460c      	mov	r4, r1
 8007048:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800704c:	2900      	cmp	r1, #0
 800704e:	b096      	sub	sp, #88	@ 0x58
 8007050:	4615      	mov	r5, r2
 8007052:	461e      	mov	r6, r3
 8007054:	da0d      	bge.n	8007072 <__swhatbuf_r+0x2e>
 8007056:	89a3      	ldrh	r3, [r4, #12]
 8007058:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800705c:	f04f 0100 	mov.w	r1, #0
 8007060:	bf14      	ite	ne
 8007062:	2340      	movne	r3, #64	@ 0x40
 8007064:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007068:	2000      	movs	r0, #0
 800706a:	6031      	str	r1, [r6, #0]
 800706c:	602b      	str	r3, [r5, #0]
 800706e:	b016      	add	sp, #88	@ 0x58
 8007070:	bd70      	pop	{r4, r5, r6, pc}
 8007072:	466a      	mov	r2, sp
 8007074:	f000 f848 	bl	8007108 <_fstat_r>
 8007078:	2800      	cmp	r0, #0
 800707a:	dbec      	blt.n	8007056 <__swhatbuf_r+0x12>
 800707c:	9901      	ldr	r1, [sp, #4]
 800707e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007082:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007086:	4259      	negs	r1, r3
 8007088:	4159      	adcs	r1, r3
 800708a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800708e:	e7eb      	b.n	8007068 <__swhatbuf_r+0x24>

08007090 <__smakebuf_r>:
 8007090:	898b      	ldrh	r3, [r1, #12]
 8007092:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007094:	079d      	lsls	r5, r3, #30
 8007096:	4606      	mov	r6, r0
 8007098:	460c      	mov	r4, r1
 800709a:	d507      	bpl.n	80070ac <__smakebuf_r+0x1c>
 800709c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80070a0:	6023      	str	r3, [r4, #0]
 80070a2:	6123      	str	r3, [r4, #16]
 80070a4:	2301      	movs	r3, #1
 80070a6:	6163      	str	r3, [r4, #20]
 80070a8:	b003      	add	sp, #12
 80070aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070ac:	ab01      	add	r3, sp, #4
 80070ae:	466a      	mov	r2, sp
 80070b0:	f7ff ffc8 	bl	8007044 <__swhatbuf_r>
 80070b4:	9f00      	ldr	r7, [sp, #0]
 80070b6:	4605      	mov	r5, r0
 80070b8:	4639      	mov	r1, r7
 80070ba:	4630      	mov	r0, r6
 80070bc:	f7fe fed4 	bl	8005e68 <_malloc_r>
 80070c0:	b948      	cbnz	r0, 80070d6 <__smakebuf_r+0x46>
 80070c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070c6:	059a      	lsls	r2, r3, #22
 80070c8:	d4ee      	bmi.n	80070a8 <__smakebuf_r+0x18>
 80070ca:	f023 0303 	bic.w	r3, r3, #3
 80070ce:	f043 0302 	orr.w	r3, r3, #2
 80070d2:	81a3      	strh	r3, [r4, #12]
 80070d4:	e7e2      	b.n	800709c <__smakebuf_r+0xc>
 80070d6:	89a3      	ldrh	r3, [r4, #12]
 80070d8:	6020      	str	r0, [r4, #0]
 80070da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070de:	81a3      	strh	r3, [r4, #12]
 80070e0:	9b01      	ldr	r3, [sp, #4]
 80070e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80070e6:	b15b      	cbz	r3, 8007100 <__smakebuf_r+0x70>
 80070e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070ec:	4630      	mov	r0, r6
 80070ee:	f000 f81d 	bl	800712c <_isatty_r>
 80070f2:	b128      	cbz	r0, 8007100 <__smakebuf_r+0x70>
 80070f4:	89a3      	ldrh	r3, [r4, #12]
 80070f6:	f023 0303 	bic.w	r3, r3, #3
 80070fa:	f043 0301 	orr.w	r3, r3, #1
 80070fe:	81a3      	strh	r3, [r4, #12]
 8007100:	89a3      	ldrh	r3, [r4, #12]
 8007102:	431d      	orrs	r5, r3
 8007104:	81a5      	strh	r5, [r4, #12]
 8007106:	e7cf      	b.n	80070a8 <__smakebuf_r+0x18>

08007108 <_fstat_r>:
 8007108:	b538      	push	{r3, r4, r5, lr}
 800710a:	4d07      	ldr	r5, [pc, #28]	@ (8007128 <_fstat_r+0x20>)
 800710c:	2300      	movs	r3, #0
 800710e:	4604      	mov	r4, r0
 8007110:	4608      	mov	r0, r1
 8007112:	4611      	mov	r1, r2
 8007114:	602b      	str	r3, [r5, #0]
 8007116:	f7fd f906 	bl	8004326 <_fstat>
 800711a:	1c43      	adds	r3, r0, #1
 800711c:	d102      	bne.n	8007124 <_fstat_r+0x1c>
 800711e:	682b      	ldr	r3, [r5, #0]
 8007120:	b103      	cbz	r3, 8007124 <_fstat_r+0x1c>
 8007122:	6023      	str	r3, [r4, #0]
 8007124:	bd38      	pop	{r3, r4, r5, pc}
 8007126:	bf00      	nop
 8007128:	20000a70 	.word	0x20000a70

0800712c <_isatty_r>:
 800712c:	b538      	push	{r3, r4, r5, lr}
 800712e:	4d06      	ldr	r5, [pc, #24]	@ (8007148 <_isatty_r+0x1c>)
 8007130:	2300      	movs	r3, #0
 8007132:	4604      	mov	r4, r0
 8007134:	4608      	mov	r0, r1
 8007136:	602b      	str	r3, [r5, #0]
 8007138:	f7fd f8fa 	bl	8004330 <_isatty>
 800713c:	1c43      	adds	r3, r0, #1
 800713e:	d102      	bne.n	8007146 <_isatty_r+0x1a>
 8007140:	682b      	ldr	r3, [r5, #0]
 8007142:	b103      	cbz	r3, 8007146 <_isatty_r+0x1a>
 8007144:	6023      	str	r3, [r4, #0]
 8007146:	bd38      	pop	{r3, r4, r5, pc}
 8007148:	20000a70 	.word	0x20000a70

0800714c <logf>:
 800714c:	b508      	push	{r3, lr}
 800714e:	ed2d 8b02 	vpush	{d8}
 8007152:	eeb0 8a40 	vmov.f32	s16, s0
 8007156:	f000 f8ab 	bl	80072b0 <__ieee754_logf>
 800715a:	eeb4 8a48 	vcmp.f32	s16, s16
 800715e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007162:	d60f      	bvs.n	8007184 <logf+0x38>
 8007164:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8007168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800716c:	dc0a      	bgt.n	8007184 <logf+0x38>
 800716e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8007172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007176:	d108      	bne.n	800718a <logf+0x3e>
 8007178:	f7fd ff6e 	bl	8005058 <__errno>
 800717c:	2322      	movs	r3, #34	@ 0x22
 800717e:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80071a0 <logf+0x54>
 8007182:	6003      	str	r3, [r0, #0]
 8007184:	ecbd 8b02 	vpop	{d8}
 8007188:	bd08      	pop	{r3, pc}
 800718a:	f7fd ff65 	bl	8005058 <__errno>
 800718e:	ecbd 8b02 	vpop	{d8}
 8007192:	2321      	movs	r3, #33	@ 0x21
 8007194:	6003      	str	r3, [r0, #0]
 8007196:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800719a:	4802      	ldr	r0, [pc, #8]	@ (80071a4 <logf+0x58>)
 800719c:	f000 b804 	b.w	80071a8 <nanf>
 80071a0:	ff800000 	.word	0xff800000
 80071a4:	08007e60 	.word	0x08007e60

080071a8 <nanf>:
 80071a8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80071b0 <nanf+0x8>
 80071ac:	4770      	bx	lr
 80071ae:	bf00      	nop
 80071b0:	7fc00000 	.word	0x7fc00000
 80071b4:	00000000 	.word	0x00000000

080071b8 <ceil>:
 80071b8:	ec51 0b10 	vmov	r0, r1, d0
 80071bc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80071c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071c4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 80071c8:	2e13      	cmp	r6, #19
 80071ca:	460c      	mov	r4, r1
 80071cc:	4605      	mov	r5, r0
 80071ce:	4680      	mov	r8, r0
 80071d0:	dc2e      	bgt.n	8007230 <ceil+0x78>
 80071d2:	2e00      	cmp	r6, #0
 80071d4:	da11      	bge.n	80071fa <ceil+0x42>
 80071d6:	a332      	add	r3, pc, #200	@ (adr r3, 80072a0 <ceil+0xe8>)
 80071d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071dc:	f7f9 f856 	bl	800028c <__adddf3>
 80071e0:	2200      	movs	r2, #0
 80071e2:	2300      	movs	r3, #0
 80071e4:	f7f9 fc98 	bl	8000b18 <__aeabi_dcmpgt>
 80071e8:	b120      	cbz	r0, 80071f4 <ceil+0x3c>
 80071ea:	2c00      	cmp	r4, #0
 80071ec:	db4f      	blt.n	800728e <ceil+0xd6>
 80071ee:	4325      	orrs	r5, r4
 80071f0:	d151      	bne.n	8007296 <ceil+0xde>
 80071f2:	462c      	mov	r4, r5
 80071f4:	4621      	mov	r1, r4
 80071f6:	4628      	mov	r0, r5
 80071f8:	e023      	b.n	8007242 <ceil+0x8a>
 80071fa:	4f2b      	ldr	r7, [pc, #172]	@ (80072a8 <ceil+0xf0>)
 80071fc:	4137      	asrs	r7, r6
 80071fe:	ea01 0307 	and.w	r3, r1, r7
 8007202:	4303      	orrs	r3, r0
 8007204:	d01d      	beq.n	8007242 <ceil+0x8a>
 8007206:	a326      	add	r3, pc, #152	@ (adr r3, 80072a0 <ceil+0xe8>)
 8007208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800720c:	f7f9 f83e 	bl	800028c <__adddf3>
 8007210:	2200      	movs	r2, #0
 8007212:	2300      	movs	r3, #0
 8007214:	f7f9 fc80 	bl	8000b18 <__aeabi_dcmpgt>
 8007218:	2800      	cmp	r0, #0
 800721a:	d0eb      	beq.n	80071f4 <ceil+0x3c>
 800721c:	2c00      	cmp	r4, #0
 800721e:	bfc2      	ittt	gt
 8007220:	f44f 1380 	movgt.w	r3, #1048576	@ 0x100000
 8007224:	4133      	asrgt	r3, r6
 8007226:	18e4      	addgt	r4, r4, r3
 8007228:	ea24 0407 	bic.w	r4, r4, r7
 800722c:	2500      	movs	r5, #0
 800722e:	e7e1      	b.n	80071f4 <ceil+0x3c>
 8007230:	2e33      	cmp	r6, #51	@ 0x33
 8007232:	dd0a      	ble.n	800724a <ceil+0x92>
 8007234:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8007238:	d103      	bne.n	8007242 <ceil+0x8a>
 800723a:	4602      	mov	r2, r0
 800723c:	460b      	mov	r3, r1
 800723e:	f7f9 f825 	bl	800028c <__adddf3>
 8007242:	ec41 0b10 	vmov	d0, r0, r1
 8007246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800724a:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800724e:	f04f 37ff 	mov.w	r7, #4294967295
 8007252:	40df      	lsrs	r7, r3
 8007254:	4238      	tst	r0, r7
 8007256:	d0f4      	beq.n	8007242 <ceil+0x8a>
 8007258:	a311      	add	r3, pc, #68	@ (adr r3, 80072a0 <ceil+0xe8>)
 800725a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800725e:	f7f9 f815 	bl	800028c <__adddf3>
 8007262:	2200      	movs	r2, #0
 8007264:	2300      	movs	r3, #0
 8007266:	f7f9 fc57 	bl	8000b18 <__aeabi_dcmpgt>
 800726a:	2800      	cmp	r0, #0
 800726c:	d0c2      	beq.n	80071f4 <ceil+0x3c>
 800726e:	2c00      	cmp	r4, #0
 8007270:	dd0a      	ble.n	8007288 <ceil+0xd0>
 8007272:	2e14      	cmp	r6, #20
 8007274:	d101      	bne.n	800727a <ceil+0xc2>
 8007276:	3401      	adds	r4, #1
 8007278:	e006      	b.n	8007288 <ceil+0xd0>
 800727a:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800727e:	2301      	movs	r3, #1
 8007280:	40b3      	lsls	r3, r6
 8007282:	441d      	add	r5, r3
 8007284:	45a8      	cmp	r8, r5
 8007286:	d8f6      	bhi.n	8007276 <ceil+0xbe>
 8007288:	ea25 0507 	bic.w	r5, r5, r7
 800728c:	e7b2      	b.n	80071f4 <ceil+0x3c>
 800728e:	2500      	movs	r5, #0
 8007290:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 8007294:	e7ae      	b.n	80071f4 <ceil+0x3c>
 8007296:	4c05      	ldr	r4, [pc, #20]	@ (80072ac <ceil+0xf4>)
 8007298:	2500      	movs	r5, #0
 800729a:	e7ab      	b.n	80071f4 <ceil+0x3c>
 800729c:	f3af 8000 	nop.w
 80072a0:	8800759c 	.word	0x8800759c
 80072a4:	7e37e43c 	.word	0x7e37e43c
 80072a8:	000fffff 	.word	0x000fffff
 80072ac:	3ff00000 	.word	0x3ff00000

080072b0 <__ieee754_logf>:
 80072b0:	ee10 3a10 	vmov	r3, s0
 80072b4:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80072b8:	d106      	bne.n	80072c8 <__ieee754_logf+0x18>
 80072ba:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8007454 <__ieee754_logf+0x1a4>
 80072be:	eddf 7a66 	vldr	s15, [pc, #408]	@ 8007458 <__ieee754_logf+0x1a8>
 80072c2:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80072c6:	4770      	bx	lr
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	461a      	mov	r2, r3
 80072cc:	da02      	bge.n	80072d4 <__ieee754_logf+0x24>
 80072ce:	ee30 7a40 	vsub.f32	s14, s0, s0
 80072d2:	e7f4      	b.n	80072be <__ieee754_logf+0xe>
 80072d4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80072d8:	db02      	blt.n	80072e0 <__ieee754_logf+0x30>
 80072da:	ee30 0a00 	vadd.f32	s0, s0, s0
 80072de:	4770      	bx	lr
 80072e0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80072e4:	bfb8      	it	lt
 80072e6:	eddf 7a5d 	vldrlt	s15, [pc, #372]	@ 800745c <__ieee754_logf+0x1ac>
 80072ea:	485d      	ldr	r0, [pc, #372]	@ (8007460 <__ieee754_logf+0x1b0>)
 80072ec:	bfbe      	ittt	lt
 80072ee:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80072f2:	f06f 0118 	mvnlt.w	r1, #24
 80072f6:	ee17 2a90 	vmovlt	r2, s15
 80072fa:	ea4f 53e2 	mov.w	r3, r2, asr #23
 80072fe:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8007302:	4410      	add	r0, r2
 8007304:	bfa8      	it	ge
 8007306:	2100      	movge	r1, #0
 8007308:	3b7f      	subs	r3, #127	@ 0x7f
 800730a:	440b      	add	r3, r1
 800730c:	f400 0100 	and.w	r1, r0, #8388608	@ 0x800000
 8007310:	f081 517e 	eor.w	r1, r1, #1065353216	@ 0x3f800000
 8007314:	4311      	orrs	r1, r2
 8007316:	ee00 1a10 	vmov	s0, r1
 800731a:	4952      	ldr	r1, [pc, #328]	@ (8007464 <__ieee754_logf+0x1b4>)
 800731c:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 8007320:	f102 000f 	add.w	r0, r2, #15
 8007324:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8007328:	4001      	ands	r1, r0
 800732a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800732e:	bb89      	cbnz	r1, 8007394 <__ieee754_logf+0xe4>
 8007330:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8007334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007338:	d10f      	bne.n	800735a <__ieee754_logf+0xaa>
 800733a:	2b00      	cmp	r3, #0
 800733c:	f000 8087 	beq.w	800744e <__ieee754_logf+0x19e>
 8007340:	ee07 3a90 	vmov	s15, r3
 8007344:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 8007468 <__ieee754_logf+0x1b8>
 8007348:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 800746c <__ieee754_logf+0x1bc>
 800734c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007350:	ee27 0a80 	vmul.f32	s0, s15, s0
 8007354:	eea7 0a87 	vfma.f32	s0, s15, s14
 8007358:	4770      	bx	lr
 800735a:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8007470 <__ieee754_logf+0x1c0>
 800735e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8007362:	eee0 7a66 	vfms.f32	s15, s0, s13
 8007366:	ee20 7a00 	vmul.f32	s14, s0, s0
 800736a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800736e:	b913      	cbnz	r3, 8007376 <__ieee754_logf+0xc6>
 8007370:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007374:	4770      	bx	lr
 8007376:	ee07 3a90 	vmov	s15, r3
 800737a:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8007468 <__ieee754_logf+0x1b8>
 800737e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007382:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8007386:	ee37 0a40 	vsub.f32	s0, s14, s0
 800738a:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800746c <__ieee754_logf+0x1bc>
 800738e:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8007392:	4770      	bx	lr
 8007394:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8007398:	ee70 7a27 	vadd.f32	s15, s0, s15
 800739c:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8007474 <__ieee754_logf+0x1c4>
 80073a0:	eddf 4a35 	vldr	s9, [pc, #212]	@ 8007478 <__ieee754_logf+0x1c8>
 80073a4:	4935      	ldr	r1, [pc, #212]	@ (800747c <__ieee754_logf+0x1cc>)
 80073a6:	ee80 6a27 	vdiv.f32	s12, s0, s15
 80073aa:	4411      	add	r1, r2
 80073ac:	f5c2 1257 	rsb	r2, r2, #3522560	@ 0x35c000
 80073b0:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 80073b4:	430a      	orrs	r2, r1
 80073b6:	2a00      	cmp	r2, #0
 80073b8:	ee07 3a90 	vmov	s15, r3
 80073bc:	ee26 5a06 	vmul.f32	s10, s12, s12
 80073c0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80073c4:	ee25 7a05 	vmul.f32	s14, s10, s10
 80073c8:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 8007480 <__ieee754_logf+0x1d0>
 80073cc:	eee7 7a25 	vfma.f32	s15, s14, s11
 80073d0:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8007484 <__ieee754_logf+0x1d4>
 80073d4:	eee7 5a87 	vfma.f32	s11, s15, s14
 80073d8:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 8007488 <__ieee754_logf+0x1d8>
 80073dc:	eee7 7a24 	vfma.f32	s15, s14, s9
 80073e0:	eddf 4a2a 	vldr	s9, [pc, #168]	@ 800748c <__ieee754_logf+0x1dc>
 80073e4:	eee7 4a87 	vfma.f32	s9, s15, s14
 80073e8:	eddf 7a29 	vldr	s15, [pc, #164]	@ 8007490 <__ieee754_logf+0x1e0>
 80073ec:	eee4 7a87 	vfma.f32	s15, s9, s14
 80073f0:	ee67 7a85 	vmul.f32	s15, s15, s10
 80073f4:	eee5 7a87 	vfma.f32	s15, s11, s14
 80073f8:	dd1a      	ble.n	8007430 <__ieee754_logf+0x180>
 80073fa:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80073fe:	ee20 7a07 	vmul.f32	s14, s0, s14
 8007402:	ee27 7a00 	vmul.f32	s14, s14, s0
 8007406:	ee77 7a87 	vadd.f32	s15, s15, s14
 800740a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800740e:	b913      	cbnz	r3, 8007416 <__ieee754_logf+0x166>
 8007410:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007414:	e7ac      	b.n	8007370 <__ieee754_logf+0xc0>
 8007416:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 8007468 <__ieee754_logf+0x1b8>
 800741a:	eee6 7a86 	vfma.f32	s15, s13, s12
 800741e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007422:	ee37 0a40 	vsub.f32	s0, s14, s0
 8007426:	eddf 7a11 	vldr	s15, [pc, #68]	@ 800746c <__ieee754_logf+0x1bc>
 800742a:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800742e:	4770      	bx	lr
 8007430:	ee70 7a67 	vsub.f32	s15, s0, s15
 8007434:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007438:	b913      	cbnz	r3, 8007440 <__ieee754_logf+0x190>
 800743a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800743e:	4770      	bx	lr
 8007440:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8007468 <__ieee754_logf+0x1b8>
 8007444:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8007448:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800744c:	e7eb      	b.n	8007426 <__ieee754_logf+0x176>
 800744e:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 8007458 <__ieee754_logf+0x1a8>
 8007452:	4770      	bx	lr
 8007454:	cc000000 	.word	0xcc000000
 8007458:	00000000 	.word	0x00000000
 800745c:	4c000000 	.word	0x4c000000
 8007460:	004afb20 	.word	0x004afb20
 8007464:	007ffff0 	.word	0x007ffff0
 8007468:	3717f7d1 	.word	0x3717f7d1
 800746c:	3f317180 	.word	0x3f317180
 8007470:	3eaaaaab 	.word	0x3eaaaaab
 8007474:	3e1cd04f 	.word	0x3e1cd04f
 8007478:	3e178897 	.word	0x3e178897
 800747c:	ffcf5c30 	.word	0xffcf5c30
 8007480:	3e638e29 	.word	0x3e638e29
 8007484:	3ecccccd 	.word	0x3ecccccd
 8007488:	3e3a3325 	.word	0x3e3a3325
 800748c:	3e924925 	.word	0x3e924925
 8007490:	3f2aaaab 	.word	0x3f2aaaab

08007494 <_init>:
 8007494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007496:	bf00      	nop
 8007498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800749a:	bc08      	pop	{r3}
 800749c:	469e      	mov	lr, r3
 800749e:	4770      	bx	lr

080074a0 <_fini>:
 80074a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074a2:	bf00      	nop
 80074a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074a6:	bc08      	pop	{r3}
 80074a8:	469e      	mov	lr, r3
 80074aa:	4770      	bx	lr
